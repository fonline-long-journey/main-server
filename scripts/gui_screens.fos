// GUI scheme name: The Long Journey Original

#include "_macros.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "input_h.fos"
#include "gui_h.fos"
#include "gui_screens_stuff.fos"

void InitializeScreens()
{
    Login_TLJ::Init( CLIENT_MAIN_SCREEN_LOGIN );
    Register_TLJ::Init( CLIENT_MAIN_SCREEN_REGISTRATION );
    Options_TLJ::Init( CLIENT_MAIN_SCREEN_OPTIONS );
    Game_TLJ::Init( CLIENT_MAIN_SCREEN_GAME );
    Inventory_TLJ::Init( CLIENT_SCREEN_INVENTORY );
    Character_TLJ::Init( CLIENT_SCREEN_CHARACTER );
    Cursor::Init( CLIENT_SCREEN_CURSOR );
}

namespace Login_TLJ
{
    uint currentLogStrNum = STR_UPDATE_LOG_LATEST;
    void NextLog()
        {
        	if(currentLogStrNum+1 <= STR_UPDATE_LOG_LATEST)
        		currentLogStrNum++;
        }
        		
    void PreviousLog()
        {
            if   (currentLogStrNum-1 >= STR_UPDATE_LOG_BEGIN)
        		currentLogStrNum--;
        }
    

    class Login : GUIScreen
    {
        int ScreenWidth = 0;

        void OnConstruct() override
        {
            SetPosition( 63, 22 );
            SetSize( 1920, 1080 );
            SetDock( DOCK_FILL );
            SetBackgroundImage( "art/intrface/background.png", IMAGE_LAYOUT_STRETCH );
        }

        void OnInit() override
        {
            SetSize( __ScreenHeight, __ScreenWidth );
        }

        void OnDraw() override
        {
            if( __ScreenWidth != ScreenWidth ){
                ScreenWidth = __ScreenWidth;
                SetSize( __ScreenWidth, __ScreenHeight  );
                if( __ScreenWidth > 1200 ){
                    Find("Menu").SetPosition( int(floor(__ScreenWidth/2 - 273/2)),  int(floor(__ScreenHeight/2 - 360/2)) );
                }else if (__ScreenWidth < 1000){
                    Find("Menu").SetPosition( 20, int(floor(__ScreenHeight/2 - 360/2)) );
                }else{
                    Find("Menu").SetPosition( int(floor(__ScreenWidth/5*2 - 273/2)), int(floor(__ScreenHeight/2 - 360/2)) );
                }
                
                Find("UpdateLogPanel").SetPosition( int(__ScreenWidth - 477), 0);
            }
        }

        void OnGlobalInput( uint8 key, string@ text ) override
        {
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
        }
    }

    class Menu : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 1, 479 );
            SetSize( 360, 273 );
            SetBackgroundImage( "art/intrface/login_tlj.png" );
        }
    }

    class Play2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 247, 131 );
            SetSize( 82, 46 );
            SetPressedImage( "art/intrface/done.png" );
        }

        void OnLMouseClick() override
        {
            PlaySound ("click22+23.ogg");
            if( !__Singleplayer )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            
        }
    }

    class Play : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 247, 131 );
            SetSize( 82, 46 );
            SetPressedImage( "art/intrface/done.png" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click22+23.ogg");
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
        }
    }

    class Registration : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 12, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click4.ogg");
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            else
                ShowScreen( CLIENT_SCREEN_SAVE_LOAD );
        }
    }

    class Options : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 128, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_OPTIONS );
            PlaySound ("click4.ogg");
        }
    }

    class About : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 243, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click4.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_CREDITS );
        }
    }

    class Exit : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 211, 232 );
            SetSize( 49, 25 );
            SetPressedImage( "art/intrface/ok2.png" );
        }

        void OnLMouseClick() override
        {
            PlaySound ("click4.ogg");
            TryExit();
            
        }
    }

    class InputLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 61, 129 );
            SetSize( 155, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __Name );
        }
    }

    class InputPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 0, 18 );
            SetSize( 155, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
            SetInputPassword( "#" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( CustomCall( "GetPassword" ) );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 13, 9 );
            SetSize( 323, 95 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    class Version : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, 5 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
            SetText( MSG_GAME( STR_VERSION_INFO ) );
            SetTextFlags( FT_BORDERED );
            SetTextColor( COLOR_WHITE );
        }
    }

    class UpdateLogPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 377, 477 );
            SetDock( DOCK_RIGHT );
            SetBackgroundImage( "art/intrface/log_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetPosition( 0, __ScreenWidth - 477);
        }
    }

    class UpdateLogText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 25 );
            SetSize( 335, 345 );
            SetAnchor( ANCHOR_TOP );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( ( MSG_GAME( STR_UPDATE_LOG_LATEST ) ) );
        }
    }

    class UpdateLogButtonUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -7, 405 );
            SetSize( 35, 34 );
            SetPressedImage( "art/intrface/bigkey_up.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            NextLog();
            cast<UpdateLogText>(Parent).SetText ( ( MSG_GAME( currentLogStrNum ) ) );
        }
    }

    class UpdateLogButtonDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 30, 405 );
            SetSize( 35, 34 );
            SetPressedImage( "art/intrface/bigkey_down.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            PreviousLog();
            cast<UpdateLogText>(Parent).SetText ( ( MSG_GAME( currentLogStrNum ) ) );
        }
    }

    void Init( int screenIndex )
    {
        Login _Login();
        _Login.Init( null );
        Menu _Menu();
        _Menu.Init( _Login );
        Play2 _Play2();
        _Play2.Init( _Menu );
        Play _Play();
        _Play.Init( _Menu );
        Registration _Registration();
        _Registration.Init( _Menu );
        Options _Options();
        _Options.Init( _Menu );
        About _About();
        _About.Init( _Menu );
        Exit _Exit();
        _Exit.Init( _Menu );
        InputLogin _InputLogin();
        _InputLogin.Init( _Menu );
        InputPassword _InputPassword();
        _InputPassword.Init( _InputLogin );
        MessageBox _MessageBox();
        _MessageBox.Init( _Menu );
        Version _Version();
        _Version.Init( _Login );
        UpdateLogPanel _UpdateLogPanel();
        _UpdateLogPanel.Init( _Login );
        UpdateLogText _UpdateLogText();
        _UpdateLogText.Init( _UpdateLogPanel );
        UpdateLogButtonUp _UpdateLogButtonUp();
        _UpdateLogButtonUp.Init( _UpdateLogText );
        UpdateLogButtonDown _UpdateLogButtonDown();
        _UpdateLogButtonDown.Init( _UpdateLogText );
        GUI_RegisterScreen( screenIndex, _Login );
    }
}

namespace Register_TLJ
{
    import void player_data_generate( int[]& params ) from "client_main";
    import bool player_data_check( int[]& params ) from "client_main";
    
            int[] ShowBaseStats = { ST_AGILITY, ST_STRENGTH, ST_PERCEPTION, ST_EDUCATION, ST_CHARISMA, ST_TOUGHNESS};
            int[] ShowHealthStats = { ST_MAX_LIFE, DAMAGE_POISONED, DAMAGE_RADIATED, DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
            int[] ShowExtendedStats = { ST_ARMOR_CLASS, ST_ACTION_POINTS, ST_APREGEN, ST_CARRY_WEIGHT, ST_MELEE_DAMAGE, ST_POISON_RESISTANCE, ST_RADIATION_RESISTANCE, ST_SEQUENCE, ST_HEALING_RATE };
            int[] ShowTraitsLeft = { TRAIT_FAST_METABOLISM, TRAIT_BRUISER, TRAIT_SMALL_FRAME, TRAIT_ONE_HANDER, TRAIT_FINESSE, TRAIT_KAMIKAZE, TRAIT_HEAVY_HANDED, TRAIT_FAST_SHOT };
            int[] ShowTraitsRight = { TRAIT_BLOODY_MESS, TRAIT_JINXED, TRAIT_GOOD_NATURED, TRAIT_CHEM_RELIANT, TRAIT_CHEM_RESISTANT, TRAIT_SEX_APPEAL, TRAIT_SKILLED, TRAIT_NIGHT_PERSON };
            int[] ShowSkills = { SK_SMALL_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_THROWING, SK_DOCTOR, SK_SNEAK, SK_SCIENCE, SK_REPAIR, SK_BARTER, SK_OUTDOORSMAN };
    
    int[] Params( PARAMS_COUNT );
    
    uint[] skinMale = {0, 150};
    uint[] skinFemale = {4, 151};
    
    
    int CurTip = -1;
    
    int GetParam( int param )
    {
        return Params[ param ];
    }
    
    void GenParams()
    {
        player_data_generate( Params );
    }
    
    int GetUnspentStatPoints()
    {
        int unspent = __StartSpecialPoints;
        for( uint i = 0; i < ShowBaseStats.length(); i++ )
             unspent -= __RegParams[ ShowBaseStats[ i ] ] - REG_STAT_MINIMUM;
        return unspent;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        int ScreenWidth = 0;

        void OnConstruct() override
        {
            SetModal( true );
            SetSize( 1920, 1080 );
            SetDock( DOCK_FILL );
            SetBackgroundImage( "art/intrface/background.png" );
        }

        void OnInit() override
        {
            GenParams();
            SetSize( __ScreenHeight, __ScreenWidth );
        }

        void OnDraw() override
        {
            if( ScreenWidth != __ScreenWidth ){
                ScreenWidth = __ScreenWidth;
                SetSize( __ScreenHeight, __ScreenWidth );
                if( __ScreenWidth < 1000) {
                    Find("Main").SetPosition( int(floor(__ScreenHeight/2 - 640/1.999999)), int(floor(__ScreenWidth/2 - 538/1.999999) ));
                }else{
                    Find("Main").SetPosition( int(floor(__ScreenHeight/2 - 640/2)), int(floor(__ScreenWidth/2 - 538/2) ));
                }
            }
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 640, 539 );
            SetBackgroundImage( "art/intrface/register_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetPosition( __ScreenHeight/2 - 640/2, __ScreenWidth/2 - 538/2);
        }
    }

    class TLJRegister : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -79, 57 );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 97, 12 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -5, 4 );
            SetSize( 25, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 40, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 85, 4 );
            SetSize( 55, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL_ABB( GetParam( cast< BaseStat >( Parent ).Param ) ) );
        }
    }

    class StatInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 146, 4 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] < REG_STAT_MAXIMUM && GetUnspentStatPoints() > 0 )
            {
                __RegParams[ param ]++;
                GenParams();
            }
        }
    }

    class StatDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 146, 15 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] > REG_STAT_MINIMUM )
            {
                __RegParams[ param ]--;
                GenParams();
            }
        }
    }

    class BaseStatPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 97, 218 );
        }
    }

    class Title1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -4, 5 );
            SetSize( 110, 30 );
            SetText( MSG_GAME( STR_REG_SPECIAL_SUM ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class StatPointsValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 106, 5 );
            SetSize( 34, 30 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetUnspentStatPoints() );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 272, -16 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            uint color;
            if( param == DAMAGE_RADIATED )
                color = ( GetParam( ST_RADIATION_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else if( param == DAMAGE_POISONED )
                color = ( GetParam( ST_POISONING_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetParam( param ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            if( param == ST_MAX_LIFE )
                return MSG_GAME( STR_INV_HP ) + "  " + GetParam( ST_CURRENT_HP ) + " / " + GetParam( ST_MAX_LIFE );
            return MSG_GAME( STR_PARAM_NAME( param ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 272, 117 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            Text = MSG_GAME( STR_PARAM_NAME_SHORT( param ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 102, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            string text;
            if( param == ST_CARRY_WEIGHT )
                text = "" + ( GetParam( param ) / 1000 );
            else if( param == ST_NORMAL_RESIST || param == ST_NORMAL_RESIST )
                text = "" + GetParam( param ) + "%";
            else if ( param == ST_APREGEN )
                text = "" + float( GetParam ( param ) / 100 );
            else
                text = "" + GetParam( param );
            return text;
        }
    }

    class Traits : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 423, 138 );
        }
    }

    class TraitsLeft : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 4, 6 );
            SetCellPrototype( "TraitLeft" );
            SetGridSize( ShowTraitsLeft.length() );
        }
    }

    class TraitLeft : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( -1, 0 );
            SetSize( 150, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsLeft[ cellIndex ];
        }
    }

    class Switcher1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 2 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitLeft >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName1" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 23, 0 );
            SetSize( 115, 14 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitLeft >( Parent ).Param ) );
        }
    }

    class TraitsRight : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 126, 6 );
            SetCellPrototype( "TraitRight" );
            SetGridSize( ShowTraitsRight.length() );
        }
    }

    class TraitRight : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( -1, 0 );
            SetSize( 148, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsRight[ cellIndex ];
        }
    }

    class Switcher2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 125, 2 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitRight >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName2" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 20, 0 );
            SetSize( 105, 14 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitRight >( Parent ).Param ) );
        }
    }

    class Skills : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 420, -30 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowSkills[ cellIndex ];
        }
    }

    class TagSkill : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -1, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            int param = cast< Skill >( Parent ).Param;
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            
            if( __RegParams[ TAG_SKILL1 ] == param )
                __RegParams[ TAG_SKILL1 ] = 0;
            else if( __RegParams[ TAG_SKILL2 ] == param )
                __RegParams[ TAG_SKILL2 ] = 0;
            else if( __RegParams[ TAG_SKILL3 ] == param )
                __RegParams[ TAG_SKILL3 ] = 0;
            else if( __RegParams[ TAG_SKILL4 ] == param )
                __RegParams[ TAG_SKILL4 ] = 0;
            else if( __RegParams[ TAG_SKILL1 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL1 ] = param;
            else if( __RegParams[ TAG_SKILL2 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL2 ] = param;
            else if( __RegParams[ TAG_SKILL3 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL3 ] = param;
            else if( __RegParams[ TAG_SKILL4 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL4 ] = param;
            
            bool tagged = ( __RegParams[ TAG_SKILL1 ] == param || __RegParams[ TAG_SKILL2 ] == param || __RegParams[ TAG_SKILL3 ] == param || __RegParams[ TAG_SKILL4 ] == param );
            Parent.FindText( "SkillName" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            Parent.FindText( "SkillValue" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Param ) );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 240, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            return GetParam( cast< Skill >( Parent ).Param ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, -28 );
            SetSize( 150, 24 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentSkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 434, 88 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 1 );
            SetSize( 120, 26 );
            SetText( MSG_GAME( STR_REG_UNSPENT_TAGS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 170, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            return FormatXX( freeTagSkills );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 417, 263 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            int param = -1;
            
            #define CHECK_PARAM_PARENT #( className ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = cast< className >( obj.Parent ).Param
            //#define CHECK_PARENT #( className, p ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = p
            
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( TraitLeft );
            CHECK_PARAM_PARENT( TraitRight );
            CHECK_PARAM_PARENT( Skill );
            
            if( param != -1 && CurTip != param )
            {
                CurTip = param;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( param ) );
                FindText( "Desc" ).Text = FormatFormulas( MSG_GAME( STR_PARAM_DESC( param ) ) );
                FindText( "Math" ).Text = FormatFormulas( MSG_GAME( STR_PARAM_MATH( param ) ) );
                //FindPanel( "Image" ).SetBackgroundImage( GetConstantName( CONSTANTS_PICTURE, param ) );
                string@ image =  MSG_GAME( STR_PARAM_PIC( param ) );
                GUIPanel@ uiImage = FindPanel( "Image" );
                if(image != "error"){
                    uint width = uiImage.get_Width();
                    uiImage.SetBackgroundImage(image);
                    uiImage.SetActive(true);
                    if(width < 1) uiImage.SetSize(0,0);
                }else{
                    uiImage.SetActive(false);
                }
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 172, 45 );
            SetSize( 120, 135 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 13, 12 );
            SetSize( 230, 30 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_SAND );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 13, 45 );
            SetSize( 160, 134 );
        }
    }

    class Math : GUIText
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 13, 45 );
            SetSize( 160, 134 );
        }
    }

    class Switch : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 251, 19 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/greenDot.png" );
        }

        void OnCheckedChanged() override
        {
            if( IsChecked ){
                Parent.Find("Desc").SetActive(false);
                Parent.Find("Math").SetActive(true);
            }else{
                Parent.Find("Desc").SetActive(true);
                Parent.Find("Math").SetActive(false);
            }
            PlaySound ("click10.ogg");
        }
    }

    class ImgSwitch : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 274, 19 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/yellowDot.png" );
        }

        void OnCheckedChanged() override
        {
            if( IsChecked ){
                Parent.Find("Desc").SetSize(280, 134);
                Parent.Find("Math").SetSize(280, 134);
                Parent.Find("Image").SetSize(0,0);
            }else{
                Parent.Find("Desc").SetSize(160, 134);
                Parent.Find("Math").SetSize(160, 134);
                Parent.Find("Image").SetSize(120, 135);
            }
            PlaySound ("click10.ogg");
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 418, 451 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -23, 5 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click4.ogg");
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -23, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click4.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "Register" );
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -22, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click4.ogg");
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 97, 60 );
        }
    }

    class Button4 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -13, -115 );
            SetSize( 259, 28 );
            SetPressedImage( "art/intrface/NAMEON.PNG" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( true );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 118, -102 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __RegName;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 349, -57 );
        }
    }

    class Button5 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -3, 2 );
            SetSize( 40, 28 );
            SetPressedImage( "art/intrface/AGEON.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterAgePopUp" ).SetActive( true );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 17, 14 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetParam( ST_AGE );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 96, -25 );
        }
    }

    class Button6 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -115, 7 );
            SetSize( 24, 24 );
            SetPressedImage( "art/intrface/blank_sort.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click7+8.ogg");
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 122, 15 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetParam( ST_GENDER ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class Male : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 28, 1 );
            SetSize( 31, 29 );
            SetPressedImage( "art/intrface/male_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click7+8.ogg");
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_MALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Female" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_MALE );
        }
    }

    class Female : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 58, 1 );
            SetSize( 33, 31 );
            SetPressedImage( "art/intrface/female_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click7+8.ogg");
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_FEMALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Male" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_FEMALE );
        }
    }

    class CharacterNamePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 84, -26 );
            SetSize( 238, 117 );
            SetBackgroundImage( "art/intrface/cha_name_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                GUI_SetFocusedObject( FindTextInput( "ChaName" ) );
        }
    }

    class ChaName : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 27, 32 );
            SetSize( 180, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegName );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegName = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 27, 64 );
            SetSize( 180, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegPassword );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegPassword = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaTrollButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 40, 91 );
            SetSize( 49, 25 );
            SetPressedImage( "art/intrface/ok2.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("pyromother.wav");
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( false );
            PlaySound ("pyromother.wav");
        }
    }

    class CharacterAgePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 87, 4 );
            SetSize( 139, 43 );
            SetBackgroundImage( "art/intrface/cha_age.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class IncAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_inc_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]++;
            if( __RegParams[ ST_AGE ] > AGE_MAX )
                __RegParams[ ST_AGE ] = AGE_MIN;
            GenParams();
        }
    }

    class DecAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_dec_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]--;
            if( __RegParams[ ST_AGE ] < AGE_MIN )
                __RegParams[ ST_AGE ] = AGE_MAX;
            GenParams();
        }
    }

    class AgeValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 54, 8 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( ST_AGE ) );
        }
    }

    class CharacterGenderPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 136, -45 );
            SetSize( 24, 24 );
            SetBackgroundImage( "art/intrface/blank_sort.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class CharacterSelect : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 166, 407 );
        }
    }

    class CharSelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -12, -13 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterSelectPopUp" ).SetActive( true );
            PlaySound ("click4.ogg");
        }
    }

    class CharacterSelectPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 79, 255 );
            SetSize( 135, 175 );
            SetBackgroundImage( "art/intrface/character_select_main.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class ChaButtonUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 30 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/character_select_up2.png" );
        }

        void OnLMousePressed() override
        {
            if( __RegParams[ ST_GENDER ] == 1){
                int currentId = skinFemale.find(__RegParams[ ST_BASE_CRTYPE ]);
                if( currentId < 0 ){
                    __RegParams[ ST_BASE_CRTYPE ] = skinFemale[0];
                } else if( currentId > 0 ) {
                    __RegParams[ ST_BASE_CRTYPE ] = skinFemale[--currentId];
                }else{
                    __RegParams[ ST_BASE_CRTYPE ] = skinFemale[skinFemale.length - 1];
                }
            }else{
                int currentId = skinMale.find(__RegParams[ ST_BASE_CRTYPE ]);
                if( currentId < 0){
                    __RegParams[ ST_BASE_CRTYPE ] = skinMale[0];
                } else if( currentId > 0 ) {
                    __RegParams[ ST_BASE_CRTYPE ] = skinMale[--currentId];
                } else {
                    __RegParams[ ST_BASE_CRTYPE ] = skinMale[skinMale.length - 1];
                }
            }
            GenParams();
            PlaySound ("click22.ogg");
        }
    }

    class ChaButtonDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 53 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/character_select_dn2.png" );
        }

        void OnLMousePressed() override
        {
            if( __RegParams[ ST_GENDER ] == 1){
                int currentId = int(skinFemale.find(__RegParams[ ST_BASE_CRTYPE ]));
                if( currentId < 0 ){
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinFemale[0]);
                    } else if( currentId < int(skinFemale.length - 1) ) {
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinFemale[++currentId]);
                }else{
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinFemale[0]);
                }
            }else{
                int currentId = int(skinMale.find(__RegParams[ ST_BASE_CRTYPE ]));
                if( currentId < 0  ){
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinMale[0]);
                    } else if( currentId < int(skinFemale.length - 1 )) {
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinMale[++currentId]);
                }else{
                    __RegParams[ ST_BASE_CRTYPE ] = int(skinMale[0]);
                }
            }
            GenParams();
            PlaySound ("click22+23.ogg");
        }
    }

    class ChaSelClose : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 75, 139 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnMouseClick( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMouseClick() override
        {
            //Screen.FindPanel( "CharacterSelectPopUp" ).SetActive( false );
            
        }
    }

    class CharacterView : GUIPanel
    {
        int CurDir;
        uint LastDirChangeTick;

        void OnConstruct() override
        {
            SetPosition( 29, 24 );
            SetSize( 61, 98 );
            SetNotHittable( true );
        }

        void OnInit() override
        {
            CurDir            = 0;
            LastDirChangeTick = GetTick();
        }

        void OnDraw() override
        {
            // Сброс на дефолтный скин пола если что-то пойдет не так
            if( __RegParams[ ST_GENDER ] == 1){
                int currentId = skinFemale.find(__RegParams[ ST_BASE_CRTYPE ]);
                if( currentId <= 0 ){
                    __RegParams[ ST_BASE_CRTYPE ] = skinFemale[0];
                    GenParams();
                }
            }else{
                int currentId = skinMale.find(__RegParams[ ST_BASE_CRTYPE ]);
                if( currentId <= 0){
                    __RegParams[ ST_BASE_CRTYPE ] = skinMale[0];
                    GenParams();
                    
                }
            }
            
            // Рисовка самого криттера
            uint curTick = GetTick();
            if( curTick - LastDirChangeTick >= 500 )
            {
                LastDirChangeTick = curTick;
                CurDir++;
                if( CurDir >= ( __MapHexagonal ? 6 : 8 ) )
                    CurDir = 0;
            }
            DrawCritter2d( __RegParams[ ST_BASE_CRTYPE ], ANIM2_IDLE, ANIM2_IDLE, CurDir,AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
        }
    }

    class CharacterViewLabel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 30, 95 );
            SetTextFlags( FT_CENTERX | FT_BOTTOM );
        }

        string@ get_Text() override
        {
            return "#"+ __RegParams[ ST_BASE_CRTYPE ];
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 134, 338 );
            SetSize( 205, 110 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    void Init( int screenIndex )
    {
        Character _Character();
        _Character.Init( null );
        Main _Main();
        _Main.Init( _Character );
        TLJRegister _TLJRegister();
        _TLJRegister.Init( _Main );
        BaseStats _BaseStats();
        _BaseStats.Init( _TLJRegister );
        BaseStat _BaseStat();
        _BaseStat.Init( _BaseStats );
        StatName _StatName();
        _StatName.Init( _BaseStat );
        StatValue _StatValue();
        _StatValue.Init( _BaseStat );
        StatValueDesc _StatValueDesc();
        _StatValueDesc.Init( _BaseStat );
        StatInc _StatInc();
        _StatInc.Init( _BaseStat );
        StatDec _StatDec();
        _StatDec.Init( _BaseStat );
        BaseStatPoints _BaseStatPoints();
        _BaseStatPoints.Init( _TLJRegister );
        Title1 _Title1();
        _Title1.Init( _BaseStatPoints );
        StatPointsValue _StatPointsValue();
        _StatPointsValue.Init( _BaseStatPoints );
        HealthStats _HealthStats();
        _HealthStats.Init( _TLJRegister );
        HealthStat _HealthStat();
        _HealthStat.Init( _HealthStats );
        StatDesc _StatDesc();
        _StatDesc.Init( _HealthStat );
        ExtendedStats _ExtendedStats();
        _ExtendedStats.Init( _TLJRegister );
        ExtendedStat _ExtendedStat();
        _ExtendedStat.Init( _ExtendedStats );
        StatName2 _StatName2();
        _StatName2.Init( _ExtendedStat );
        StatValue2 _StatValue2();
        _StatValue2.Init( _ExtendedStat );
        Traits _Traits();
        _Traits.Init( _TLJRegister );
        TraitsLeft _TraitsLeft();
        _TraitsLeft.Init( _Traits );
        TraitLeft _TraitLeft();
        _TraitLeft.Init( _TraitsLeft );
        Switcher1 _Switcher1();
        _Switcher1.Init( _TraitLeft );
        TraitName1 _TraitName1();
        _TraitName1.Init( _TraitLeft );
        TraitsRight _TraitsRight();
        _TraitsRight.Init( _Traits );
        TraitRight _TraitRight();
        _TraitRight.Init( _TraitsRight );
        Switcher2 _Switcher2();
        _Switcher2.Init( _TraitRight );
        TraitName2 _TraitName2();
        _TraitName2.Init( _TraitRight );
        Skills _Skills();
        _Skills.Init( _TLJRegister );
        Skill _Skill();
        _Skill.Init( _Skills );
        TagSkill _TagSkill();
        _TagSkill.Init( _Skill );
        SkillName _SkillName();
        _SkillName.Init( _Skill );
        SkillValue _SkillValue();
        _SkillValue.Init( _Skill );
        Title3 _Title3();
        _Title3.Init( _Skills );
        UnspentSkillPoints _UnspentSkillPoints();
        _UnspentSkillPoints.Init( _TLJRegister );
        Title2 _Title2();
        _Title2.Init( _UnspentSkillPoints );
        UnspentValue _UnspentValue();
        _UnspentValue.Init( _UnspentSkillPoints );
        Tip _Tip();
        _Tip.Init( _TLJRegister );
        Image _Image();
        _Image.Init( _Tip );
        Name _Name();
        _Name.Init( _Tip );
        Desc _Desc();
        _Desc.Init( _Tip );
        Math _Math();
        _Math.Init( _Tip );
        Switch _Switch();
        _Switch.Init( _Tip );
        ImgSwitch _ImgSwitch();
        _ImgSwitch.Init( _Tip );
        Buttons _Buttons();
        _Buttons.Init( _TLJRegister );
        Print _Print();
        _Print.Init( _Buttons );
        Button1 _Button1();
        _Button1.Init( _Print );
        Text7 _Text7();
        _Text7.Init( _Print );
        Done _Done();
        _Done.Init( _Buttons );
        Button2 _Button2();
        _Button2.Init( _Done );
        Text8 _Text8();
        _Text8.Init( _Done );
        Back _Back();
        _Back.Init( _Buttons );
        Button3 _Button3();
        _Button3.Init( _Back );
        Text9 _Text9();
        _Text9.Init( _Back );
        CharacterName _CharacterName();
        _CharacterName.Init( _TLJRegister );
        Button4 _Button4();
        _Button4.Init( _CharacterName );
        CharacterText _CharacterText();
        _CharacterText.Init( _CharacterName );
        CharacterAge _CharacterAge();
        _CharacterAge.Init( _TLJRegister );
        Button5 _Button5();
        _Button5.Init( _CharacterAge );
        AgeText _AgeText();
        _AgeText.Init( _CharacterAge );
        CharacterGender _CharacterGender();
        _CharacterGender.Init( _TLJRegister );
        Button6 _Button6();
        _Button6.Init( _CharacterGender );
        GenderText _GenderText();
        _GenderText.Init( _CharacterGender );
        Male _Male();
        _Male.Init( _CharacterGender );
        Female _Female();
        _Female.Init( _CharacterGender );
        CharacterNamePopUp _CharacterNamePopUp();
        _CharacterNamePopUp.Init( _TLJRegister );
        ChaName _ChaName();
        _ChaName.Init( _CharacterNamePopUp );
        ChaPassword _ChaPassword();
        _ChaPassword.Init( _CharacterNamePopUp );
        ChaTrollButton _ChaTrollButton();
        _ChaTrollButton.Init( _CharacterNamePopUp );
        CharacterAgePopUp _CharacterAgePopUp();
        _CharacterAgePopUp.Init( _TLJRegister );
        IncAge _IncAge();
        _IncAge.Init( _CharacterAgePopUp );
        DecAge _DecAge();
        _DecAge.Init( _CharacterAgePopUp );
        AgeValue _AgeValue();
        _AgeValue.Init( _CharacterAgePopUp );
        CharacterGenderPopUp _CharacterGenderPopUp();
        _CharacterGenderPopUp.Init( _TLJRegister );
        CharacterSelect _CharacterSelect();
        _CharacterSelect.Init( _TLJRegister );
        CharSelButton _CharSelButton();
        _CharSelButton.Init( _CharacterSelect );
        CharacterSelectPopUp _CharacterSelectPopUp();
        _CharacterSelectPopUp.Init( _TLJRegister );
        ChaButtonUp _ChaButtonUp();
        _ChaButtonUp.Init( _CharacterSelectPopUp );
        ChaButtonDown _ChaButtonDown();
        _ChaButtonDown.Init( _CharacterSelectPopUp );
        ChaSelClose _ChaSelClose();
        _ChaSelClose.Init( _CharacterSelectPopUp );
        CharacterView _CharacterView();
        _CharacterView.Init( _CharacterSelectPopUp );
        CharacterViewLabel _CharacterViewLabel();
        _CharacterViewLabel.Init( _CharacterView );
        MessageBox _MessageBox();
        _MessageBox.Init( _Main );
        GUI_RegisterScreen( screenIndex, _Character );
    }
}

namespace Options_TLJ
{
    void SaveOptions()
    {
        string[] savedOptions =
        {
            "Language", "" + CustomCall( "GetLanguage" ),
            "ScreenWidth", "" + __ScreenWidth,
            "ScreenHeight", "" + __ScreenHeight,
            "FullScreen", "" + __FullScr,
            "AlwaysOnTop", "" + __AlwaysOnTop,
            "MusicVolume", "" + __MusicVolume,
            "SoundVolume", "" + __SoundVolume,
            "AlwaysRun", "" + __AlwaysRun,
            "DefaultCombatMode", "" + __DefaultCombatMode,
            "RemoteHost", "" + __Host,
            "RemotePort", "" + __Port,
            "ProxyType", "" + __ProxyType,
            "ProxyHost", "" + __ProxyHost,
            "ProxyPort", "" + __ProxyPort,
            "ProxyUser", "" + __ProxyUser,
            "ProxyPass", "" + __ProxyPass
        };
        SetUserConfig( savedOptions );
    }

    class Screen : GUIScreen
    {
        int ScreenWidth = 0;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetDock( DOCK_FILL );
            SetBackgroundImage( "art/intrface/background.png" );
        }

        void OnInit() override
        {
            SetSize(__ScreenWidth, __ScreenHeight);
        }

        void OnDraw() override
        {
            if( ScreenWidth != __ScreenWidth){
                ScreenWidth = __ScreenWidth;
                SetSize(__ScreenWidth, __ScreenHeight);
                Main@ main = cast<Main>(Find("Main"));
                if( ScreenWidth < 1000){
                    // Если делить ровно на два все улетаёт нах-- за край экрана, хз почему
                    main.SetPosition( int(floor(__ScreenWidth/2-640/1.99999)) , int(floor(__ScreenHeight/2-480/1.99999) ));
                }else{
                    main.SetPosition( int(floor(__ScreenWidth/2-main.get_Width()/2)) , int(floor(__ScreenHeight/2-main.get_Height()/2)) );
                }
            }
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/options_tlj.png" );
        }

        void OnInit() override
        {
            
            SetPosition((__ScreenWidth - get_Width()) / 2, (__ScreenHeight - get_Height()) / 2);
        }
    }

    class Options : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 640, 440 );
        }
    }

    class Game : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 9, 20 );
        }
    }

    class Language : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 49, 400 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE ) );
        }
    }

    class Russian : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "russ" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage russ" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_RUSSIAN ) );
        }
    }

    class English : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "engl" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage engl" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_ENGLISH ) );
        }
    }

    int[] ScreenWidthOpt = { 800, 1024, 1280, 1280, 1366, 1920 };
    int[] ScreenHeightOpt = { 600, 768, 800, 1024, 768, 1080 };

    class Resolution : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 40 );
            SetText( MSG_GAME( STR_OPTIONS_RESOLUTION ) );
        }
    }

    class Resolution1 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 200, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 0 ] && __ScreenHeight == ScreenHeightOpt[ 0 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 0 ] + " " + ScreenHeightOpt[ 0 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text14 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 33, 0 );
            SetText( ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ] );
        }
    }

    class Resolution2 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 199, 38 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 1 ] && __ScreenHeight == ScreenHeightOpt[ 1 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 1 ] + " " + ScreenHeightOpt[ 1 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text15 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 33, 1 );
            SetText( ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ] );
        }
    }

    class Resolution3 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 325, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 2 ] && __ScreenHeight == ScreenHeightOpt[ 2 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 2 ] + " " + ScreenHeightOpt[ 2 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text16 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 33, 0 );
            SetText( ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ] );
        }
    }

    class Resolution4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 325, 39 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 3 ] && __ScreenHeight == ScreenHeightOpt[ 3 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 3 ] + " " + ScreenHeightOpt[ 3 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text17 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 29, 0 );
            SetText( ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ] );
        }
    }

    class Resolution5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 449, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 4 ] && __ScreenHeight == ScreenHeightOpt[ 4 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 4 ] + " " + ScreenHeightOpt[ 4 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text18 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 33, 0 );
            SetText( ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ] );
        }
    }

    class Resolution6 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 449, 38 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 5 ] && __ScreenHeight == ScreenHeightOpt[ 5 ] );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 5 ] + " " + ScreenHeightOpt[ 5 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
            PlaySound ("click10.ogg");
        }
    }

    class Text19 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 33, 0 );
            SetText( ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ] );
        }
    }

    class FullScreen : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 70 );
            SetText( MSG_GAME( STR_OPTIONS_FULL_SCREEN ) );
        }
    }

    class CheckBox1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 112, -1 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __FullScr );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            PlaySound ("click10.ogg");
            CustomCall( "SwitchFullscreen" );
            SaveOptions();
        }
    }

    class AlwaysOnTop : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 100 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_ON_TOP ) );
        }
    }

    class CheckBox2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 112, -1 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysOnTop );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            PlaySound ("click10.ogg");
            __AlwaysOnTop = IsChecked;
            SaveOptions();
        }
    }

    class Music : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 130 );
            SetText( MSG_GAME( STR_OPTIONS_MUSIC ) );
        }
    }

    class MusicDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 179, -2 );
            SetSize( 17, 12 );
            SetBackgroundImage( "art/intrface/SNEGON.png" );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume > 0 )
            {
                __MusicVolume--;
                 SaveOptions();
            }
        }
    }

    class MusicInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 262, -2 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/SPLSON.png" );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume < 100 )
            {
                __MusicVolume++;
                SaveOptions();
            }
        }
    }

    class MusicValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 231, 2 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return "" + __MusicVolume;
        }
    }

    class Sound : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 160 );
            SetText( MSG_GAME( STR_OPTIONS_SOUND ) );
        }
    }

    class SoundDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 179, -2 );
            SetSize( 17, 12 );
            SetBackgroundImage( "art/intrface/SNEGON.png" );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume > 0 )
            {
                __SoundVolume--;
                SaveOptions();
            }
        }
    }

    class SoundInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 262, -2 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/SPLSON.png" );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnMousePressed( int button ) override
        {
             PlaySound ("click22+23.ogg");
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume < 100 )
            {
                __SoundVolume++;
                SaveOptions();
            }
        }
    }

    class SoundValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 231, 2 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return "" + __SoundVolume;
        }
    }

    class AlwaysRun : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 190 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_RUN ) );
        }
    }

    class CheckBox3 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 112, -2 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysRun );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __AlwaysRun = IsChecked;
            SaveOptions();
        }
    }

    class CombatMode : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 220 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE ) );
        }
    }

    class Both : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, -4 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_ANY );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_ANY;
            SaveOptions();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_BOTH ) );
        }
    }

    class RealTime : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -4 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_REAL_TIME );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_REAL_TIME;
            SaveOptions();
        }
    }

    class Text6 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_RT ) );
        }
    }

    class TurnBased : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 451, -4 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_TURN_BASED );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_TURN_BASED;
            SaveOptions();
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_TB ) );
        }
    }

    class CombatMessages : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 250 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES ) );
        }
    }

    class Verbose : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType == 0 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 0;
            SaveOptions();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_FULL ) );
        }
    }

    class Brief : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType != 0 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 1;
            SaveOptions();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_SHORT ) );
        }
    }

    class GameServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 280 );
            SetText( MSG_GAME( STR_OPTIONS_GAME_SERVER ) );
        }
    }

    class Panel1 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel2 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Host : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __Host );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class Port : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __Port );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Port = Text.toInt( __Port );
            Text = "" + __Port;
            SaveOptions();
        }
    }

    class ProxyType : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 310 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE ) );
        }
    }

    class ProxyNone : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 0 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __ProxyType = 0;
            SaveOptions();
        }
    }

    class Text10 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_NONE ) );
        }
    }

    class ProxySocks4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 1 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __ProxyType = 1;
            SaveOptions();
        }
    }

    class Text11 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS4 ) );
        }
    }

    class ProxySocks5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 2 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __ProxyType = 2;
            SaveOptions();
        }
    }

    class Text12 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS5 ) );
        }
    }

    class ProxyHttp : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 3 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            __ProxyType = 3;
            SaveOptions();
        }
    }

    class Text13 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_HTTP ) );
        }
    }

    class ProxyServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 340 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_SERVER ) );
        }
    }

    class Panel3 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -4 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel4 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -4 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyHost : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetText( __ProxyHost );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class ProxyPort : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetText( "" + __ProxyPort );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPort = Text.toInt( __ProxyPort );
            Text = "" + __ProxyPort;
            SaveOptions();
        }
    }

    class ProxyAccess : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 368 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_ACCESS ) );
        }
    }

    class Panel5 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -4 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel6 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 350, -4 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 150, 12 );
            SetText( __ProxyUser );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyUser = Text;
            SaveOptions();
        }
    }

    class ProxyPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 350, -2 );
            SetSize( 150, 12 );
            SetText( __ProxyPass );
            SetTextFlags( FT_CENTERX );
            SetInputPassword( "#" );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPass = Text;
            SaveOptions();
        }
    }

    class Back : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 507, 413 );
            SetSize( 82, 46 );
            SetBackgroundImage( "art/intrface/blank_sort.png" );
            SetPressedImage( "art/intrface/done.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click18+19.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_LOGIN );
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        Options _Options();
        _Options.Init( _Main );
        Game _Game();
        _Game.Init( _Options );
        Language _Language();
        _Language.Init( _Game );
        Russian _Russian();
        _Russian.Init( _Language );
        Text1 _Text1();
        _Text1.Init( _Russian );
        English _English();
        _English.Init( _Language );
        Text2 _Text2();
        _Text2.Init( _English );
        Resolution _Resolution();
        _Resolution.Init( _Game );
        Resolution1 _Resolution1();
        _Resolution1.Init( _Resolution );
        Text14 _Text14();
        _Text14.Init( _Resolution1 );
        Resolution2 _Resolution2();
        _Resolution2.Init( _Resolution );
        Text15 _Text15();
        _Text15.Init( _Resolution2 );
        Resolution3 _Resolution3();
        _Resolution3.Init( _Resolution );
        Text16 _Text16();
        _Text16.Init( _Resolution3 );
        Resolution4 _Resolution4();
        _Resolution4.Init( _Resolution );
        Text17 _Text17();
        _Text17.Init( _Resolution4 );
        Resolution5 _Resolution5();
        _Resolution5.Init( _Resolution );
        Text18 _Text18();
        _Text18.Init( _Resolution5 );
        Resolution6 _Resolution6();
        _Resolution6.Init( _Resolution );
        Text19 _Text19();
        _Text19.Init( _Resolution6 );
        FullScreen _FullScreen();
        _FullScreen.Init( _Game );
        CheckBox1 _CheckBox1();
        _CheckBox1.Init( _FullScreen );
        AlwaysOnTop _AlwaysOnTop();
        _AlwaysOnTop.Init( _Game );
        CheckBox2 _CheckBox2();
        _CheckBox2.Init( _AlwaysOnTop );
        Music _Music();
        _Music.Init( _Game );
        MusicDec _MusicDec();
        _MusicDec.Init( _Music );
        MusicInc _MusicInc();
        _MusicInc.Init( _Music );
        MusicValue _MusicValue();
        _MusicValue.Init( _Music );
        Sound _Sound();
        _Sound.Init( _Game );
        SoundDec _SoundDec();
        _SoundDec.Init( _Sound );
        SoundInc _SoundInc();
        _SoundInc.Init( _Sound );
        SoundValue _SoundValue();
        _SoundValue.Init( _Sound );
        AlwaysRun _AlwaysRun();
        _AlwaysRun.Init( _Game );
        CheckBox3 _CheckBox3();
        _CheckBox3.Init( _AlwaysRun );
        CombatMode _CombatMode();
        _CombatMode.Init( _Game );
        Both _Both();
        _Both.Init( _CombatMode );
        Text5 _Text5();
        _Text5.Init( _Both );
        RealTime _RealTime();
        _RealTime.Init( _CombatMode );
        Text6 _Text6();
        _Text6.Init( _RealTime );
        TurnBased _TurnBased();
        _TurnBased.Init( _CombatMode );
        Text7 _Text7();
        _Text7.Init( _TurnBased );
        CombatMessages _CombatMessages();
        _CombatMessages.Init( _Game );
        Verbose _Verbose();
        _Verbose.Init( _CombatMessages );
        Text8 _Text8();
        _Text8.Init( _Verbose );
        Brief _Brief();
        _Brief.Init( _CombatMessages );
        Text9 _Text9();
        _Text9.Init( _Brief );
        GameServer _GameServer();
        _GameServer.Init( _Game );
        Panel1 _Panel1();
        _Panel1.Init( _GameServer );
        Panel2 _Panel2();
        _Panel2.Init( _GameServer );
        Host _Host();
        _Host.Init( _GameServer );
        Port _Port();
        _Port.Init( _GameServer );
        ProxyType _ProxyType();
        _ProxyType.Init( _Game );
        ProxyNone _ProxyNone();
        _ProxyNone.Init( _ProxyType );
        Text10 _Text10();
        _Text10.Init( _ProxyNone );
        ProxySocks4 _ProxySocks4();
        _ProxySocks4.Init( _ProxyType );
        Text11 _Text11();
        _Text11.Init( _ProxySocks4 );
        ProxySocks5 _ProxySocks5();
        _ProxySocks5.Init( _ProxyType );
        Text12 _Text12();
        _Text12.Init( _ProxySocks5 );
        ProxyHttp _ProxyHttp();
        _ProxyHttp.Init( _ProxyType );
        Text13 _Text13();
        _Text13.Init( _ProxyHttp );
        ProxyServer _ProxyServer();
        _ProxyServer.Init( _Game );
        Panel3 _Panel3();
        _Panel3.Init( _ProxyServer );
        Panel4 _Panel4();
        _Panel4.Init( _ProxyServer );
        ProxyHost _ProxyHost();
        _ProxyHost.Init( _ProxyServer );
        ProxyPort _ProxyPort();
        _ProxyPort.Init( _ProxyServer );
        ProxyAccess _ProxyAccess();
        _ProxyAccess.Init( _Game );
        Panel5 _Panel5();
        _Panel5.Init( _ProxyAccess );
        Panel6 _Panel6();
        _Panel6.Init( _ProxyAccess );
        ProxyLogin _ProxyLogin();
        _ProxyLogin.Init( _ProxyAccess );
        ProxyPassword _ProxyPassword();
        _ProxyPassword.Init( _ProxyAccess );
        Back _Back();
        _Back.Init( _Main );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Game_TLJ
{
    import string FormatFormulas(string@ text, bool updateList = true) from "formulas";
    
    string@ FormatXXX( int value )
    {
        string@ result = "";
        result = "" + ABS(value);
        if(result.length() < 2) result = "0" + result;
        if(result.length() < 3) result = "0" + result;
        if( value < 0 ) result = "-" + result;
        return result;
        /*int offs  = 0;
        if( value >= 0 )
        {
            result += EncodeUTF8( '9' + 4 );
        }
        else
        {
            offs = 0x20;
            result += EncodeUTF8( '9' + offs + 3 );
            value = -value;
        }
    
        value = CLAMP( value, 0, 999 );
    
        result += EncodeUTF8( '0' + offs + value / 100 );
        result += EncodeUTF8( '0' + offs + value / 10 % 10 );
        result += EncodeUTF8( '0' + offs + value % 10 );
    
        return result;*/
    }
    

    class Screen : GUIScreen
    {
        bool isHitIfaceOnMouseDown;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetDock( DOCK_FILL );
            SetNotHittable( true );
        }

        void OnInit() override
        {
            SetSize(__ScreenWidth, __ScreenHeight);
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( __MapZooming && __SpritesZoomMin != __SpritesZoomMax )
            {
                if( button == MOUSE_BUTTON_WHEEL_UP )
                    ChangeZoom( __SpritesZoom - 0.01 );
                else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                    ChangeZoom( __SpritesZoom + 0.01 );
                else if( button == MOUSE_BUTTON_MIDDLE )
                    ChangeZoom( 1.0 );
            }
            
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseDown" );
                else if( button == MOUSE_BUTTON_RIGHT )
                    isHitIfaceOnMouseDown = ( FindMouseHit() !is null );
            }
        }

        void OnGlobalMouseUp( int button ) override
        {
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseUp" );
                else if( button == MOUSE_BUTTON_RIGHT && !isHitIfaceOnMouseDown )
                    NextCursor();
            }
        }

        void OnGlobalMouseMove() override
        {
            CustomCall( "ProcessMouseScroll" );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -1, 314 );
            SetSize( 1024, 101 );
            SetCheckTransparentOnHit( true );
            SetBackgroundImage( "art/intrface/iface_tlj_main.png" );
        }

        void OnInit() override
        {
            //SetSize(1024, 101);
            SetPosition((__ScreenWidth - get_Width()) / 2, __ScreenHeight - _BaseHeight);
            //Log("Pyromother!" + get_Parent().get_Width() + "" + get_Parent().get_Height());
        }
    }

    class MessageBoxExtended : GUIPanel
    {
        int custom_height = 0;

        void OnConstruct() override
        {
            SetPosition( 0, -21 );
            SetSize( 300, 25 );
            SetAnchor( ANCHOR_BOTTOM );
            SetBackgroundImage( "art/intrface/chatbox_top.png" );
        }

        void OnDraw() override
        {
            if( get_Height() != custom_height){
                custom_height    = get_Height();
                int spacerHeight = custom_height-25;
                MessageBoxSpacer@ spacer = cast<MessageBoxSpacer>(Find("MessageBoxSpacer"));
                spacer.SetSize(300,spacerHeight>0?spacerHeight:0); 
            }
        }
    }

    class MessageBoxSpacer : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 24 );
            SetSize( 300, 0 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_RIGHT| ANCHOR_BOTTOM );
            SetBackgroundImage( "art/intrface/chatbox_middle.png", IMAGE_LAYOUT_TILE );
        }
    }

    class MessageBoxText : GUIMessageBox
    {
        void FiltersChanged()
        {
            int[] messageTypes;
            if( cast< GUICheckBox >( Parent.Find( "Filter1" ) ).IsChecked )
                messageTypes.insertLast( FOMB_TALK );
            if( cast< GUICheckBox >( Parent.Find( "Filter2" ) ).IsChecked )
                messageTypes.insertLast( FOMB_COMBAT_RESULT );
        
            if( messageTypes.length() == 0 )
                messageTypes.insertLast( FOMB_ALL );
        
            SetDisplayedMessages( messageTypes );
        }

        void OnConstruct() override
        {
            SetPosition( 9, -12 );
            SetSize( 280, 90 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_RIGHT| ANCHOR_TOP| ANCHOR_BOTTOM );
        }
    }

    class SeizeMessageBox : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 253, 88 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/yellowDot.png" );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click22.ogg");
            MessageBoxExtended@ messageBoxExtended = cast<MessageBoxExtended>(Parent.Find("MessageBoxExtended"));
            GUIObject@ messageBoxText = Parent.Find( "MessageBoxText" );
            
            int hmod = 0;
            switch(button){
              case MOUSE_BUTTON_WHEEL_UP:
              case 0:
                SetBackgroundImage("art/intrface/yellowDot.png");
                hmod = 5;
                break;
              case MOUSE_BUTTON_WHEEL_DOWN:
              case 1:
                SetBackgroundImage("art/intrface/whiteDot.png");
                hmod = -5;
                break;
            }
            
            if(
                hmod == 0 ||
                // Высота увеличивается, позиция уменьшается
                (hmod > 0 && messageBoxText.get_Height() < 800) ||
                // Высота уменьшается, позиция увеличивается, >= 25h
                (hmod < 0 && messageBoxText.get_Height() > 100 )
            ){
                // @@todo пересобрать черную магию в нормальный вид
                messageBoxExtended.SetSize(messageBoxExtended.get_Width(),messageBoxExtended.get_Height() + hmod);
                messageBoxExtended.SetPosition(0,4-messageBoxExtended.get_Height() );
                messageBoxText.SetPosition(9,8-messageBoxExtended.get_Height());
                messageBoxText.SetSize(280,70+messageBoxExtended.get_Height());
            } 
                    
        }

        void OnMouseMove() override
        {
            SetBackgroundImage(null,IMAGE_LAYOUT_ZOOM);
        }
    }

    class Console : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 305, -52 );
        }
    }

    class ConsoleImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 1, 7 );
            SetSize( 655, 38 );
            SetNotHittable( true );
        }
    }

    class ConsoleImageTop : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 655, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/console_top.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ConsoleImageMiddle : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 18 );
            SetSize( 655, 1 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/console_middle_655.png", IMAGE_LAYOUT_TILE );
        }
    }

    class ConsoleImageBottom : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 19 );
            SetSize( 655, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/console_bottom.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ConsoleText : GUIConsole
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 13, 13 );
            SetSize( 630, 25 );
            SetTextFlags( FT_CENTERY );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            int rowHeight      = 13;
            int requiredHeight = int(floor(_Text.length() / 78)*rowHeight+26);
            int height         = get_Height();
            
            ConsoleImage@ image = cast<ConsoleImage>(Parent.Find("ConsoleImage"));
            
            // Выше 233 - сообщение будет выглядеть обрезано над головой персонажа, хотя полностью видно в чате
            /*if(_Text.length() == 200){
                Message("Вам хочется перевести дыхание.");
            }*/
            
            // В районе 400х - сервак забанит клиент за превышение лимита данных
            // (кириллица - юникод, для нее - лимит в районе 224)
            // Ограничение на ввод
            /*if(_Text.length() > 225){
                _Text        = substring(_Text,0,390);
                _CarriagePos = 390;
            }*/
            // Авторазделение сообщений 
            if(_Text.length() > 210){ // @@todo проблемы с эмоутами-криком-шепотом
                _Text += "..."; //@@todo понять почему не работает
                _CarriagePos += 3;
                SendText();
                _Text        = "...";
                _CarriagePos = 3;
            }
            
            // Автосайз окна ввода
            if(requiredHeight != height ) {
                SetSize(get_Width(),requiredHeight);
                image.SetSize(image.get_Width(),requiredHeight + 10);
                image.Find("ConsoleImageBottom").SetPosition(0,image.get_Height()-18);
                image.Find("ConsoleImageMiddle").SetSize(image.get_Width(),image.get_Height()-36);
                Parent.SetPosition(Parent.get_PosX(), -49+16+rowHeight-requiredHeight);
            }
        }

        void OnActiveChanged() override
        {
            Parent.Find( "ConsoleImage" ).SetActive( ActiveSelf ); 
        }
    }

    class Filter1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 252, 100 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/greenDot.png" );
        }

        void OnCheckedChanged() override
        {
            PlaySound ("click22.ogg");
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class Filter2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 271, 100 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/redDot.png" );
        }

        void OnCheckedChanged() override
        {
            PlaySound ("click22.ogg");
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class GameMenu : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 712, 81 );
            SetSize( 19, 28 );
            SetPressedImage( "art/intrface/menu.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MENU );
        }
    }

    class Inventory : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 210, 92 );
            SetSize( 36, 15 );
            SetPressedImage( "art/intrface/inv.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    }

    class SwitchItems : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 721, 6 );
            SetSize( 20, 20 );
            SetPressedImage( "art/intrface/btn_skill.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "ChangeSlot" );
        }
    }

    class Skills : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 898, 16 );
            SetSize( 20, 20 );
            SetPressedImage( "art/intrface/btn_skill.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_SKILLBOX );
        }
    }

    class Map : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 163, 91 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/map.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MINIMAP );
        }
    }

    class Character : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 25, 90 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/cha.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CHARACTER );
            CritterCl@ chosen = GetChosen();
            if( chosen !is null && chosen.ParamBase[ ST_UNSPENT_PERKS ] > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class PipBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 118, 91 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/pip.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    }

    class FixBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 72, 91 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/fix.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    }

    class Combat : GUIPanel
    {
        bool CombatActive;

        void OnConstruct() override
        {
            SetPosition( 891, 49 );
            SetBackgroundImage( "art/intrface/combat.fofrm" );
        }

        void OnInit() override
        {
            BackgroundImage.SetFirstFrame();
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            bool combatActive = ( chosen !is null && chosen.Param[ TO_BATTLE ] != 0 );
            if( combatActive != CombatActive )
            {
                CombatActive = combatActive;
                BackgroundImage.PlayAnimation( false, !combatActive );
                PlaySound( "ICIBOXX1" );
            }
            
            GetChild( 0 ).SetActive( CombatActive && CustomCall( "IsTurnBasedMyTurn" ) == "true" );
            GetChild( 1 ).SetActive( CombatActive && IsTurnBased() );
        }
    }

    class EndTurn : GUIButton
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 5 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_turn_button_dn.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndTurn" );
        }
    }

    class EndCombat : GUICheckBox
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 27 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_combat_button_dn.png" );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            SetChecked( IsTurnBased() && chosen !is null && chosen.ParamBase[ MODE_END_COMBAT ] != 0 );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndCombat" );
        }

        void OnCheckedChanged() override
        {
            PlaySound ("click10.ogg");
        }
    }

    class HitPoints : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 633, 35 );
            SetTextFont( FONT_SAND_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_WHITE );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Param[ ST_CURRENT_HP ];
            
            if( chosen.Param[ST_CURRENT_HP] > 0 ){
                int d = int(floor(255 * chosen.Param[ ST_CURRENT_HP ] / chosen.Param[ST_MAX_LIFE] ));
                SetTextColor( COLOR_RGB(255-d,d,0) );
            }else{
                SetTextColor( COLOR_RGB(255,0,0) );
            }
            
            return FormatXXX( result );
        }
    }

    class ArmorClass : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 370, 35 );
            SetTextFont( FONT_SAND_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_WHITE );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Stat[ ST_CURRENT_AC ];
            return FormatXXX( result );
        }
    }

    class MainItemPlate : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 735, 45 );
            SetSize( 143, 66 );
            SetPressedImage( "art/intrface/gunslot_down.png", IMAGE_LAYOUT_STRETCH );
        }

        void OnMouseDown( int button ) override
        {
            //if( button == MOUSE_BUTTON_LEFT || button == MOUSE_BUTTON_RIGHT )
            //    GetChild( 0 ).SetPosition( 0, -2 );
        }

        void OnMouseUp( int button, bool lost ) override
        {
            GetChild( 0 ).SetPosition( 0, 0 );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
            if( button == MOUSE_BUTTON_LEFT )
                CustomCall( "UseMainItem" );
            else if( button == MOUSE_BUTTON_RIGHT )
                CustomCall( "NextItemMode" );
            else if( button == MOUSE_BUTTON_WHEEL_UP )
                CustomCall( "NextItemMode Prev" );
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                CustomCall( "NextItemMode" );
        }
    }

    class MainItemSlot : GUIItemView
    {
        void OnConstruct() override
        {
            SetNotHittable( true );
            SetCellPrototype( "MainItemSlotCell" );
            SetGridSize( 1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class MainItemSlotCell : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 5, 7 );
            SetSize( 130, 55 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv );
            SetBackgroundImage( picInv, IMAGE_LAYOUT_ZOOM );
            SetSize(130,55);
        }
    }

    class DeteriorationValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 131, 3 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
            SetTextFlags( FT_CENTERY | FT_CENTERR );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.IsDeteriorable() ? int(floor(item.Deterioration)/100) + "%" : "" );
        }
    }

    class UsePic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -1, 37 );
            SetSize( 17, 12 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_BOTTOM );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint usePic = 0;
            
            CritterCl@ chosen = GetChosen();
            uint8 mode;
            const ProtoItem@ proto;
            uint flags;
            if( item !is null )
            {
                mode = item.Mode;
                @proto = item.Proto;
                flags = item.Flags;
            }
            else if( chosen !is null )
            {
                @proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                flags = proto.Flags;
            }
            
            if( item !is null || chosen !is null )
            {
                int use = _WeaponModeUse( mode );
                if( proto.Type == ITEM_TYPE_WEAPON )
                {
                    if( use == USE_RELOAD )
                        usePic = GetStrHash( "art\\intrface\\reload.frm" );
                    else if( use == USE_USE )
                        usePic = GetStrHash( "art\\intrface\\useon.frm" );
                    else if( use < MAX_USES )
                        usePic = _WeaponPicUse( proto, use );
                }
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE_ON_SMTH ) )
                    usePic = GetStrHash( "art\\intrface\\useon.frm" );
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE ) )
                    usePic = GetStrHash( "art\\intrface\\uset.frm" );
            }
            //cast<UseLabel> (Find("UseLabel")).SetText(usePic);
            BackgroundImage.Load( usePic );
            //SetPosition( 180 - BackgroundImage.Width, PosY );
        }
    }

    class UseLabel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, -16 );
        }
    }

    import uint GetItemUseApCost( CritterCl& cr, ItemCl& item, uint8 mode ) from "parameters";
    import uint GetProtoItemUseApCost( CritterCl& cr, ProtoItem& proto, uint8 mode ) from "parameters";

    class ApCost : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 22, -114 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint apCost = 0;
            if( item !is null && item.Accessory == ACCESSORY_CRITTER )
            {
                apCost = GetItemUseApCost( GetCritter( item.CritId ), item, item.Mode );
            }
            else if( item is null )
            {
                CritterCl@ chosen = GetChosen();
                if( chosen !is null )
                {
                    uint8 mode = 0;
                    ProtoItem@ proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                    apCost = GetProtoItemUseApCost( chosen, proto, mode );
                }
            }
            
            SetActive( apCost > 0 );
            if( apCost > 0 )
                FindText( "ApCostValue" ).SetText( "" + apCost );
        }
    }

    class ApCostValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -22, 114 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_BORDERED );
            SetTextColor( COLOR_WHITE );
        }
    }

    class AimPic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 112, 36 );
            SetSize( 18, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/aim_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            CritterCl@ chosen = GetChosen();
            uint8 mode = 0;
            if( item !is null )
                mode = item.Mode;
            else if( chosen !is null )
                chosen.GetSlotProto( SLOT_HAND1, mode );
            
            BackgroundImage.Hidden = ( _WeaponModeAim( mode ) == HIT_LOCATION_NONE );
        }
    }

    class AmmoBar : GUIPanel
    {
        uint sprite      = 0;
        uint spriteWidth = 0;

        void OnConstruct() override
        {
            SetPosition( -4, -16 );
            SetSize( 140, 8 );
            SetNotHittable( true );
        }

        void OnInit() override
        {
            sprite      = LoadSprite( "ap_bar_small.png", PT_ART_INTRFACE );
            spriteWidth = GetSpriteWidth(sprite, -1);
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            int max  = 0;
            int curr = 0;
            if( item !is null )
            {
                if( item.GetType() == ITEM_TYPE_WEAPON && item.Proto.Weapon_MaxAmmoCount > 0 )
                {
                    max  = int(item.Proto.Weapon_MaxAmmoCount);
                    curr = int(item.AmmoCount);
                }
                else
                {
                    max  = int(item.GetCount());
                    curr = int(item.GetCount() - 1);
                }
                if(max > 0 && curr <= max && curr >= 0){
                    float red        = 144;
                    float green      = 54;
                    float blue       = 38;
                    float alpha      = 255;
                    float brightness = 0.8;
                    //float brightness = 1; @@todo переделать все нафиг
                    //if( curr == max ){
                        int barWidth = int(curr == max ? get_Width() : floor( get_Width() * (curr) / max ));
                        DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,12,0,0,COLOR_ARGB(int(alpha),int(floor(red*brightness)),int(floor(green*brightness)),int(floor(blue*brightness))));
                    /*} else {
                        uint barWidth = curr == max ? get_Width() : floor( get_Width() * (curr * 1.0) / max );
                        float dred    = red  - ( (red-green) * (curr * 1.0)/max);
                        Message("CYRR"+curr+"/"+max+" "+red);
                        DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,12,0,0,COLOR_ARGB(alpha,floor(dred*brightness),floor(green*brightness),floor(blue*brightness)));
                    }*/
                }
            }
        }
    }

    class AmmoCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 45, -4 );
            SetSize( 50, 18 );
            SetNotHittable( true );
            SetTextFont( FONT_FALLOUT );
            SetTextFlags( FT_CENTERX | FT_CENTERY | FT_BORDERED );
            SetTextColor( COLOR_WHITE );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( item !is null ){
                if(  item.GetType() == ITEM_TYPE_WEAPON ){
                    if( item.Proto.Weapon_MaxAmmoCount > 0 ){
                        SetText( item.AmmoCount+"/"+item.Proto.Weapon_MaxAmmoCount );
                    }else{
                        SetText( 1+"/"+item.GetCount() );
                    }
                }else{
                    SetText( 1+"/"+item.GetCount() );
                }
            }else{
                SetText( "" );
            }
        }
    }

    class BreakTime : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 681, 30 );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            GetChild( 0 ).SetActive( chosen !is null && chosen.IsBusy() );
        }
    }

    class BreakTimeLed : GUIPanel
    {
        bool IsChecked = false;

        void OnConstruct() override
        {
            SetPosition( -54, 27 );
            SetSize( 75, 75 );
            SetBackgroundImage( "art/intrface/test5.png" );
        }
    }

    class ActionBar : GUIPanel
    {
        uint sprite       = 0;
        uint spriteWidth  = 0;
        uint spriteHeight = 0;

        void OnConstruct() override
        {
            SetPosition( 324, 83 );
            SetSize( 304, 26 );
            SetNotHittable( true );
        }

        void OnInit() override
        {
            sprite       = LoadSprite( "ap_bar_seg.png", PT_ART_INTRFACE );
            spriteWidth  = GetSpriteWidth(sprite, -1);
            spriteHeight = GetSpriteHeight(sprite, -1);
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            if(valid(chosen))
            {
                int ap           = ( chosen !is null ? CLAMP(chosen.Param[ ST_CURRENT_AP ],-100,100) : 0 );
                uint barWidth    = floor(get_Width() * ABS( ap ) / 100);
                uint colorOffset = (ap >= 0) ? floor((255 * ABS(ap)) / 100) : 0;
                DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,spriteHeight,0,0,COLOR_ARGB(120, 255 - colorOffset, colorOffset, 0));
            }
        }
    }

    class ActionBarValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 320, 0 );
            SetSize( 40, 25 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY | FT_BORDERED );
            SetTextColor( COLOR_WHITE );
        }

        string@ get_Text() override
        {
            CritterCl@ chosen = GetChosen();
            
            if(chosen is null) return "0";
            
            //uint colorOffset = (chosen.Param[ ST_CURRENT_AP ] >= 0) ? floor((255 * ABS(chosen.Param[ ST_CURRENT_AP ])) / 100) : 0;
            //SetTextColor( COLOR_ARGB(255, 255 - colorOffset, colorOffset, 0) );
            return "" + chosen.Param[ ST_CURRENT_AP ];
        }
    }

    class HungerBar : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 443, 50 );
            SetSize( 120, 17 );
            SetBackgroundImage( "art/intrface/bar-4b.png" );
        }
    }

    class HungerFill : GUIPanel
    {
        uint sprite;
        uint spriteWidth;
        uint red   = 182;
        uint green = 198;
        uint blue  = 65;

        void OnConstruct() override
        {
            SetPosition( 8, 1 );
            SetSize( 102, 15 );
        }

        void OnInit() override
        {
            sprite      = LoadSprite( "ap_bar_small.png", PT_ART_INTRFACE );
            spriteWidth = GetSpriteWidth(sprite, -1) ;
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            if(valid(chosen))
            {
                uint barWidth    = get_Width() - get_Width() * ABS( chosen.Param[ST_HUNGER] ) / 2500; // Hunger counter is inverted
                //uint colorOffset = 255 * ABS( chosen.Param[ST_HUNGER] ) / 2500;
                //DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(200,255-colorOffset,colorOffset,0));
                float brightness = 0.7;
                DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(255,uint(floor(red*brightness)),uint(floor(green*brightness)),uint(floor(blue*brightness))));
            }
        }
    }

    class HungerIcon : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 85, -1 );
            SetSize( 17, 17 );
            SetBackgroundImage( "art/intrface/icon_hunger.png" );
        }
    }

    class ThirstBar : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 443, 29 );
            SetSize( 120, 17 );
            SetBackgroundImage( "art/intrface/bar-4b.png" );
        }
    }

    class ThirstFill : GUIPanel
    {
        uint sprite;
        uint spriteWidth;
        uint red   = 65;
        uint green = 113;
        uint blue  = 198;

        void OnConstruct() override
        {
            SetPosition( 9, 1 );
            SetSize( 102, 15 );
        }

        void OnInit() override
        {
            sprite      = LoadSprite( "ap_bar_small.png", PT_ART_INTRFACE );
            spriteWidth = GetSpriteWidth(sprite, -1) ;
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            if(valid(chosen))
            {
                uint barWidth    = get_Width() - get_Width() * ABS( chosen.Param[ST_THIRST] ) / 2500; // Thirst counter is inverted
                //uint colorOffset = 255 * ABS( chosen.Param[ST_THIRST] ) / 2500;
                //DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(200,255-colorOffset,colorOffset,0));
                float brightness = 0.7;
                DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(255,uint(floor(red*brightness)),uint(floor(green*brightness)),uint(floor(blue*brightness))));
            }
        }
    }

    class ThirstIcon : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 89, 1 );
            SetSize( 9, 13 );
            SetBackgroundImage( "art/intrface/icon_thirst.png" );
        }
    }

    class FatigueBar : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 443, 8 );
            SetSize( 120, 17 );
            SetBackgroundImage( "art/intrface/bar-4b.png" );
        }
    }

    class FatigueFill : GUIPanel
    {
        uint sprite;
        uint spriteWidth;
        uint red    = 198;
        uint green  = 65;
        uint blue   = 65;
        

        void OnConstruct() override
        {
            SetPosition( 9, 1 );
            SetSize( 102, 15 );
        }

        void OnInit() override
        {
            sprite      = LoadSprite( "ap_bar_small.png", PT_ART_INTRFACE );
            spriteWidth = GetSpriteWidth(sprite, -1) ;
            
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            if(valid(chosen))
            {
                uint barWidth    = get_Width() * ABS( chosen.Param[ST_FATIGUE] ) / 2500;
                //uint colorOffset = 255 * ABS( chosen.Param[ST_FATIGUE] ) / 2500;
                //DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(200,255-colorOffset,colorOffset,0));
                float brightness = 0.7;
                DrawSpritePattern(sprite,-1,AbsolutePosX,AbsolutePosY,barWidth,15,0,0,COLOR_ARGB(255,uint(floor(red*brightness)),uint(floor(green*brightness)),uint(floor(blue*brightness))));
            }
        }
    }

    class FatigueIcon : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 87, 0 );
            SetSize( 15, 15 );
            SetBackgroundImage( "art/intrface/icon_fatigue.png" );
        }
    }

    class HideBars : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 270, 88 );
            SetSize( 20, 12 );
        }

        void OnCheckedChanged() override
        {
            if(IsChecked){
                Parent.Find("HungerBar").SetActive(false);
                Parent.Find("ThirstBar").SetActive(false);
                Parent.Find("FatigueBar").SetActive(false);
            }else{
                Parent.Find("HungerBar").SetActive(true);
                Parent.Find("ThirstBar").SetActive(true);
                Parent.Find("FatigueBar").SetActive(true);
            }
        }
    }

    import uint quickItemAddCurrent(uint quick_slot) from "client_quickbar";
    import void quickItemUse(uint quick_slot, bool forced = false) from "client_quickbar";
    import ItemCl@ quickItem(uint quick_slot) from "client_quickbar";

    class Quickbar : GUIPanel
    {
        bool isHold = false;
        int holdX   = 0;
        int holdY   = 0;

        void OnConstruct() override
        {
            SetPosition( 119, 431 );
            SetSize( 50, 387 );
            SetBackgroundImage( "art/intrface/quickbar_vertical.png" );
        }

        void OnInit() override
        {
            SetPosition(5, 25);
            // @@todo сохранение позиции и поворота quickbar между сессиями
        }

        void OnDraw() override
        {
            if(get_Width() > 100){
                SetBackgroundImage("art/intrface/quickbar.png");
            }else{
                SetBackgroundImage("art/intrface/quickbar_vertical.png");
            }
        }

        void OnMouseDown( int button ) override
        {
            if(button == 1){
                isHold = true;
                holdX  = __MouseX;
                holdY  = __MouseY;
            }
        }

        void OnMouseUp( int button, bool lost ) override
        {
            if(button == 1) isHold = false;
        }

        void OnGlobalMouseMove() override
        {
            if(isHold){
                SetPosition(AbsolutePosX + (__MouseX - holdX),AbsolutePosY + (__MouseY - holdY) );
                holdX  = __MouseX;
                holdY  = __MouseY;
            }
        }
    }

    class QuickbarGrid : GUIGrid
    {
        uint scroll_position = 0;

        void OnConstruct() override
        {
            SetPosition( 9, 5 );
            SetCellPrototype( "QuickbarItem" );
            SetGridSize( 11 );
            SetPadding( 4, 4 );
        }
    }

    class QuickbarItem : GUIButton
    {
        int slot_id = 0;
        int item_id = 0;
        int id_offset(){
            return cast< QuickbarGrid >(Parent).scroll_position;
        }

        void OnConstruct() override
        {
            SetPosition( -2, 0 );
            SetSize( 30, 30 );
        }

        void OnDraw() override
        {
            ItemCl@ item = quickItem(slot_id + id_offset());
            uint icon = item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0;
            SetBackgroundImage(icon > 0 ? icon : -1,IMAGE_LAYOUT_ZOOM);
            
            QuickbarLabel@ label = cast<QuickbarLabel> (Find("QuickbarLabel"));
            if(label !is null){
                if(item !is null){
                    int count = item.GetCount();
                    label.SetText(count>1?""+count:"");
                }else{
                    label.SetText("");
                }
            }
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP || button == MOUSE_BUTTON_WHEEL_DOWN )
            {
                QuickbarGrid@ parent = cast <QuickbarGrid>(Parent);
                if(button == MOUSE_BUTTON_WHEEL_UP){
                    if(parent.scroll_position > 0){
                        parent.scroll_position -= 1;
                    }
                }else{
                    if(parent.scroll_position < 1000){
                        parent.scroll_position += 1;
                    }
                }
            }
        }

        void OnMousePressed( int button ) override
        {
            switch(button){
              case 0: // Left click 
                if(IsCtrlDown()){
                    quickItemUse(slot_id + id_offset(),true);
                }else{
                    quickItemUse(slot_id + id_offset());
                }
                break;
              case 1: // Right click
                quickItemAddCurrent(slot_id + id_offset());
                break;
              case 2: // Middle mouse button
                quickItemUse(slot_id + id_offset(),true);
                break;
            }
            PlaySound ("click2.ogg");
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click10.ogg");
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            slot_id = int(cellIndex);
        }
    }

    class QuickbarLabel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 2, 13 );
            SetSize( 32, 18 );
            SetNotHittable( true );
            SetTextFont( FONT_FALLOUT );
            SetTextFlags( FT_BOTTOM | FT_BORDERED );
            SetTextColor( COLOR_ARGB(200,255,255,255) );
        }
    }

    class QuickbarRotate : GUICheckBox
    {
        void OnConstruct() override
        {
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/redDot.png" );
            SetPressedImage( "art/intrface/greenDot.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnCheckedChanged() override
        {
            GUIGrid@ QuickbarGrid = cast< GUIGrid > (Parent.Find("QuickbarGrid"));
            
            if(IsChecked){
                Parent.SetSize(387, 50);
                QuickbarGrid.SetColumns(11);
            }else{
                Parent.SetSize(50, 387);
                QuickbarGrid.SetColumns(1);
            }
            QuickbarGrid.ResizeGrid(11);
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        MessageBoxExtended _MessageBoxExtended();
        _MessageBoxExtended.Init( _Main );
        MessageBoxSpacer _MessageBoxSpacer();
        _MessageBoxSpacer.Init( _MessageBoxExtended );
        MessageBoxText _MessageBoxText();
        _MessageBoxText.Init( _Main );
        SeizeMessageBox _SeizeMessageBox();
        _SeizeMessageBox.Init( _Main );
        Console _Console();
        _Console.Init( _Main );
        ConsoleImage _ConsoleImage();
        _ConsoleImage.Init( _Console );
        ConsoleImageTop _ConsoleImageTop();
        _ConsoleImageTop.Init( _ConsoleImage );
        ConsoleImageMiddle _ConsoleImageMiddle();
        _ConsoleImageMiddle.Init( _ConsoleImage );
        ConsoleImageBottom _ConsoleImageBottom();
        _ConsoleImageBottom.Init( _ConsoleImage );
        ConsoleText _ConsoleText();
        _ConsoleText.Init( _Console );
        Filter1 _Filter1();
        _Filter1.Init( _Main );
        Filter2 _Filter2();
        _Filter2.Init( _Main );
        GameMenu _GameMenu();
        _GameMenu.Init( _Main );
        Inventory _Inventory();
        _Inventory.Init( _Main );
        SwitchItems _SwitchItems();
        _SwitchItems.Init( _Main );
        Skills _Skills();
        _Skills.Init( _Main );
        Map _Map();
        _Map.Init( _Main );
        Character _Character();
        _Character.Init( _Main );
        PipBoy _PipBoy();
        _PipBoy.Init( _Main );
        FixBoy _FixBoy();
        _FixBoy.Init( _Main );
        Combat _Combat();
        _Combat.Init( _Main );
        EndTurn _EndTurn();
        _EndTurn.Init( _Combat );
        EndCombat _EndCombat();
        _EndCombat.Init( _Combat );
        HitPoints _HitPoints();
        _HitPoints.Init( _Main );
        ArmorClass _ArmorClass();
        _ArmorClass.Init( _Main );
        MainItemPlate _MainItemPlate();
        _MainItemPlate.Init( _Main );
        MainItemSlot _MainItemSlot();
        _MainItemSlot.Init( _MainItemPlate );
        MainItemSlotCell _MainItemSlotCell();
        _MainItemSlotCell.Init( _MainItemSlot );
        DeteriorationValue _DeteriorationValue();
        _DeteriorationValue.Init( _MainItemSlotCell );
        UsePic _UsePic();
        _UsePic.Init( _MainItemSlotCell );
        UseLabel _UseLabel();
        _UseLabel.Init( _UsePic );
        ApCost _ApCost();
        _ApCost.Init( _MainItemSlotCell );
        ApCostValue _ApCostValue();
        _ApCostValue.Init( _ApCost );
        AimPic _AimPic();
        _AimPic.Init( _MainItemSlotCell );
        AmmoBar _AmmoBar();
        _AmmoBar.Init( _MainItemSlotCell );
        AmmoCount _AmmoCount();
        _AmmoCount.Init( _AmmoBar );
        BreakTime _BreakTime();
        _BreakTime.Init( _Main );
        BreakTimeLed _BreakTimeLed();
        _BreakTimeLed.Init( _BreakTime );
        ActionBar _ActionBar();
        _ActionBar.Init( _Main );
        ActionBarValue _ActionBarValue();
        _ActionBarValue.Init( _ActionBar );
        HungerBar _HungerBar();
        _HungerBar.Init( _Main );
        HungerFill _HungerFill();
        _HungerFill.Init( _HungerBar );
        HungerIcon _HungerIcon();
        _HungerIcon.Init( _HungerFill );
        ThirstBar _ThirstBar();
        _ThirstBar.Init( _Main );
        ThirstFill _ThirstFill();
        _ThirstFill.Init( _ThirstBar );
        ThirstIcon _ThirstIcon();
        _ThirstIcon.Init( _ThirstFill );
        FatigueBar _FatigueBar();
        _FatigueBar.Init( _Main );
        FatigueFill _FatigueFill();
        _FatigueFill.Init( _FatigueBar );
        FatigueIcon _FatigueIcon();
        _FatigueIcon.Init( _FatigueFill );
        HideBars _HideBars();
        _HideBars.Init( _Main );
        Quickbar _Quickbar();
        _Quickbar.Init( _Screen );
        QuickbarGrid _QuickbarGrid();
        _QuickbarGrid.Init( _Quickbar );
        QuickbarItem _QuickbarItem();
        _QuickbarItem.Init( _QuickbarGrid );
        QuickbarLabel _QuickbarLabel();
        _QuickbarLabel.Init( _QuickbarItem );
        QuickbarRotate _QuickbarRotate();
        _QuickbarRotate.Init( _Quickbar );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Inventory_TLJ
{
    class Inventory : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< int > = { CURSOR_HAND, CURSOR_DEFAULT } );
            SetCanMove( true, false );
            SetSize( 425, 600 );
            SetBackgroundImage( "art/intrface/inv_tlj.png" );
        }
    }

    class InvItems : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 14, 20 );
            SetCellPrototype( "InvItem" );
            SetGridSize( 15 );
            SetColumns( 1 );
            SetUserData( SLOT_INV );
            SetUseSorting( true );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_INV ? int( item.SortValue ) : -1;
        }
    }

    class InvItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 70, 30 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP || button == MOUSE_BUTTON_WHEEL_DOWN )
            {
                GUIItemView@ invItems = cast< GUIItemView >( Parent );
                invItems.SetScroll( invItems.Scroll + ( button == MOUSE_BUTTON_WHEEL_UP ? -1 : 1 ), true );
            }
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
            SetSize( IsDragged ? BackgroundImage.Width : 70, IsDragged ? BackgroundImage.Height : 30 );
        }
    }

    class ItemCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 21, 11 );
            SetTextFlags( FT_CENTERR | FT_BOTTOM );
            SetTextColor( COLOR_WHITE );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 1;
            if( item !is null )
                count = item.GetCount();
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class SlotHand1 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 12, 522 );
            SetSize( 88, 57 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class SlotHand2 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 203, 522 );
            SetSize( 88, 57 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND2 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND2 ? 0 : -1;
        }
    }

    class SlotArmor : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 203, 446 );
            SetSize( 88, 57 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_ARMOR );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_ARMOR ? 0 : -1;
        }
    }

    class SlotItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 203, 522 );
            SetSize( 88, 57 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
        }
    }

    class Chosen : GUIPanel
    {
        int CurDir;
        uint LastDirChangeTick;

        void OnConstruct() override
        {
            SetPosition( 122, 446 );
            SetSize( 61, 98 );
        }

        void OnInit() override
        {
            CurDir            = 0;
            LastDirChangeTick = GetTick();
        }

        void OnDraw() override
        {
            uint curTick = GetTick();
            if( curTick - LastDirChangeTick >= 500 )
            {
                LastDirChangeTick = curTick;
                CurDir++;
                if( CurDir >= ( __MapHexagonal ? 6 : 8 ) )
                    CurDir = 0;
            }
            
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
            {
                if( chosen.IsAnim3d() )
                {
                    float[] chaPosition( 14 );
                    // Position
                    chaPosition[ 0 ] = AbsolutePosX + Width / 2;
                    chaPosition[ 1 ] = AbsolutePosY + Height - 10;
                    // Rotation
                    chaPosition[ 2 ] = __MapCameraAngle;
                    chaPosition[ 3 ] = ( __MapHexagonal ? 150 - CurDir * 60 : 135 - CurDir * 45 );
                    chaPosition[ 4 ] = 0.0;
                    // Scale
                    chaPosition[ 5 ] = 1.0;
                    chaPosition[ 6 ] = 1.0;
                    chaPosition[ 7 ] = 1.0;
                    // Speed
                    chaPosition[ 8 ] = 1.0;
                    // Reserved
                    chaPosition[ 9 ] = 0.0;
                    // Stencil rectangle
                    chaPosition[ 10 ] = AbsolutePosX;
                    chaPosition[ 11 ] = AbsolutePosY;
                    chaPosition[ 12 ] = AbsolutePosX + Width;
                    chaPosition[ 13 ] = AbsolutePosY + Height;
                    DrawCritter3d( 2, chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, chosen.Anim3dLayer, chaPosition, 0 );
                }
                else
                {
                    DrawCritter2d( chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, CurDir,
                        AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
                }
            }
        }
    }

    import string generic_description( int descType, int& offsX, int& offsY ) from "client_main";

    class Description : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 123, 203 );
            SetSize( 170, 220 );
        }

        void OnDraw() override
        {
            string@ text = CustomCall( "InvItemInfo" + ( GetCurrentCursor() != CURSOR_DEFAULT ? " X" : "" ) );
            if( text == "" )
            {
                int ox = 0, oy = 0;
                
                @text = generic_description( DESC_INVENTORY_MAIN, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_SPECIAL, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_STATS, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_RESIST, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
                
                @text = generic_description( DESC_INVENTORY_RESIST_NAMES, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            }
            else
            {
                DrawText( text, AbsolutePosX, AbsolutePosY, Width, Height, COLOR_TEXT, FONT_DEFAULT, 0 );
            }
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 137 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_up_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_up_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll - 1 ) );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll - 1, true );
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 159 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_dn_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_dn_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll + 1 ) );
        }

        void OnMousePressed( int button ) override
        {
            PlaySound ("click22.ogg");
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll + 1, true );
        }
    }

    class Close : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 156, 552 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnMouseClick( int button ) override
        {
            PlaySound ("click4.ogg");
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    void Init( int screenIndex )
    {
        Inventory _Inventory();
        _Inventory.Init( null );
        InvItems _InvItems();
        _InvItems.Init( _Inventory );
        InvItem _InvItem();
        _InvItem.Init( _InvItems );
        ItemCount _ItemCount();
        _ItemCount.Init( _InvItem );
        SlotHand1 _SlotHand1();
        _SlotHand1.Init( _Inventory );
        SlotHand2 _SlotHand2();
        _SlotHand2.Init( _Inventory );
        SlotArmor _SlotArmor();
        _SlotArmor.Init( _Inventory );
        SlotItem _SlotItem();
        _SlotItem.Init( _Inventory );
        Chosen _Chosen();
        _Chosen.Init( _Inventory );
        Description _Description();
        _Description.Init( _Inventory );
        ScrollUp _ScrollUp();
        _ScrollUp.Init( _Inventory );
        ScrollDown _ScrollDown();
        _ScrollDown.Init( _Inventory );
        Close _Close();
        _Close.Init( _Inventory );
        GUI_RegisterScreen( screenIndex, _Inventory );
    }
}

namespace Character_TLJ
{
    int[] ShowBaseStats = {
        ST_AGILITY,
        ST_STRENGTH, 
        ST_PERCEPTION, 
        ST_EDUCATION, 
        ST_CHARISMA, 
        ST_TOUGHNESS
    };
    int[] ShowHealthStats = { 
        ST_MAX_LIFE, 
        DAMAGE_POISONED, 
        DAMAGE_RADIATED, 
        DAMAGE_EYE, 
        DAMAGE_RIGHT_ARM, 
        DAMAGE_LEFT_ARM,    
        DAMAGE_RIGHT_LEG, 
        DAMAGE_LEFT_LEG 
    };
    int[] ShowExtendedStats = { 
        ST_ARMOR_CLASS, 
        ST_ACTION_POINTS,
        ST_APREGEN,
        ST_CARRY_WEIGHT, 
        ST_MELEE_DAMAGE, 
        ST_POISON_RESISTANCE, 
        ST_RADIATION_RESISTANCE, 
        ST_HEALING_RATE,
        ST_SEQUENCE
    };
    int[] ShowSkills = { 
        SK_SMALL_GUNS, 
        SK_ENERGY_WEAPONS, 
        SK_UNARMED, 
        SK_THROWING, 
        SK_DOCTOR, 
        SK_SNEAK, 
        SK_SCIENCE, 
        SK_REPAIR, 
        SK_BARTER, 
        SK_OUTDOORSMAN
    };
    
    int[] ShowInfo(int page = 0){
        int[] result;
        result.resize(0);
        uint count = 0;
        switch(page){
            case 0:
                count = 0;
                result.insertLast(-STR_TRAITS_NAME);
                for(uint i = TRAIT_BEGIN; i <= TRAIT_END; i++) if( GetParam( i ) != 0 ){
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
                count = 0;
                result.insertLast(-STR_PERKS_NAME);
                for(uint i = PERK_BEGIN; i <= PERK_END; i++) if( GetParam( i ) != 0 ){
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
            break;
            case 1:
                count = 0;
                result.insertLast(-STR_KARMA_GEN_GEN_NAME);
                for( uint i = KARMA_BEGIN; i <= KARMA_END; i++ ) if( GetParam( i ) != 0 ){
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
                count = 0;
                result.insertLast(-STR_TOWNREP_TITLE_NAME);
                for( uint i = REPUTATION_BEGIN; i <= REPUTATION_END; i++ ) if( uint(GetParam( i )) != 0x80000000 && GetParam( i ) != 0 ){
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
                count = 0;
                result.insertLast(-STR_ADDICT_TITLE_NAME);
                for( uint i = ADDICTION_BEGIN; i <= ADDICTION_END; i++ ) if( GetParam( i ) != 0 ){
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
            break;
            case 2:
                count = 0;
                result.insertLast(-STR_KILLS_NAME);  
                for( uint i = KILL_BEGIN; i <= KILL_END; i++ ) if( GetParam( i ) != 0 ) {
                    result.insertLast(i);
                    count++;
                }
                if( 0 == count ) result.insertLast(0);
            break;
        }
        return result;
    }
    
    
    int CurTip             = -1;
    int UnspentSkillPoints = 0;
    int[] SkillUp;
    
    int GetParam( int param )
    {
        CritterCl@ chosen = GetChosen();
        return chosen !is null ? chosen.Param[ param ] : 0;
    }
    
    bool IsTagSkill( int param )
    {
        return GetParam( TAG_SKILL1 ) == param ||
            GetParam( TAG_SKILL2 ) == param ||
            GetParam( TAG_SKILL3 ) == param ||
            GetParam( TAG_SKILL4 ) == param;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetPosition( 3, 57 );
            SetSize( 640, 480 );
        }

        void OnShow( dictionary@ params ) override
        {
            UnspentSkillPoints = GetParam( ST_UNSPENT_SKILL_POINTS );
            SkillUp.resize( 0 );
            SkillUp.resize( PARAMS_COUNT );
            if( GetParam( ST_UNSPENT_PERKS ) > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 2, 2 );
            SetSize( 643, 480 );
            SetBackgroundImage( "art/intrface/char_tlj.png" );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 3, 66 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 3, 5 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextFlags( FT_CENTERX );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 55, 4 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERR );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 99, 6 );
            SetSize( 55, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL( GetParam( cast< BaseStat >( Parent ).Param ) ) );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 189, 41 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( 0, 2 );
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 0, 1 );
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            uint color;
            if( param == DAMAGE_RADIATED )
                color = ( GetParam( ST_RADIATION_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else if( param == DAMAGE_POISONED )
                color = ( GetParam( ST_POISONING_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetParam( param ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            if( param == ST_MAX_LIFE )
                return MSG_GAME( STR_INV_HP ) + "  " + GetParam( ST_CURRENT_HP ) + " / " + GetParam( ST_MAX_LIFE );
            return MSG_GAME( STR_PARAM_NAME( param ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 192, 177 );
            SetCellPrototype( "ExtStatsPanel" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtStatsPanel : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( -3, 0 );
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowExtendedStats[ cellIndex ];
        }
    }

    class ExtStatName : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            int param = cast< ExtStatsPanel >( Parent ).Param;
            Text = MSG_GAME( STR_PARAM_NAME_SHORT( param ) );
        }
    }

    class ExtStatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 102, 1 );
            SetSize( 25, 13 );
        }

        string@ get_Text() override
        {
            int param = cast< ExtStatsPanel >( Parent ).Param;
            string text;
            if( param == ST_CARRY_WEIGHT )
                text = "" + ( GetParam( param ) / 1000 );
            else if( param == ST_NORMAL_RESIST || param == ST_NORMAL_RESIST )
                text = "" + GetParam( param ) + "%";
            else if ( param == ST_APREGEN )
                text = "" + float( GetParam ( param ) / 100.0f);
            else
                text = "" + GetParam( param );
            return text;
        }
    }

    //int Voobwe global -= huj;

    class Skills : GUIGrid
    {
        int CurSkill  = 0;
        uint CurIndex = 0;

        void OnConstruct() override
        {
            SetPosition( 346, 29 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }

        void OnInit() override
        {
            CurSkill = SKILL_BEGIN;
        }
    }

    class Skill : GUIPanel
    {
        int Param;
        uint Index = 0;
        

        void OnConstruct() override
        {
            SetPosition( 16, -3 );
            SetSize( 280, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowSkills[ cellIndex ];
            Index = cellIndex;
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 0 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Param ) );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Param ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT ){
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Param;
                cast< Skills >( Parent.Parent ).CurIndex = cast< Skill >( Parent ).Index;
            }
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 215, 0 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        void OnDraw() override
        {
            SetTextColor( IsTagSkill( cast< Skill >( Parent ).Param ) ? 0xFFAAAAAA : COLOR_TEXT );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT ){
                cast< Skills >( Parent.Parent ).CurSkill = cast< Skill >( Parent ).Param;
                cast< Skills >( Parent.Parent ).CurIndex = cast< Skill >( Parent ).Index;
            }
        }

        string@ get_Text() override
        {
            int param = cast< Skill >( Parent ).Param;
            return ( GetParam( param ) + SkillUp[ param ] ) + "%";
        }
    }

    class SkillHeader : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, -32 );
            SetSize( 80, 25 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class SkillSlider : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 239, -11 );
            SetSize( 43, 29 );
            SetBackgroundImage( "art/intrface/slider.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetActive(UnspentSkillPoints > 0);
        }

        void OnDraw() override
        {
            SetPosition( 247, -12 + int( cast< Skills >( Parent ).CurIndex  ) * 13 );
        }
    }

    class SkillIncButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 23, 2 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( UnspentSkillPoints <= 0 ){
                PlaySound ("click10.ogg");
                return;
            }
            PlaySound ("click22.ogg");
            
            int curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            int skillVal = GetParam( curSkill ) + SkillUp[ curSkill ];
            if( skillVal >= MAX_SKILL_VAL )
                return;
            
            int needSP = 1;
            if( skillVal > __SkillModAdd6 )
                needSP = 6;
            else if( skillVal > __SkillModAdd5 )
                needSP = 5;
            else if( skillVal > __SkillModAdd4 )
                needSP = 4;
            else if( skillVal > __SkillModAdd3 )
                needSP = 3;
            else if( skillVal > __SkillModAdd2 )
                needSP = 2;
            
            if( UnspentSkillPoints < needSP )
                return;
            
            UnspentSkillPoints -= needSP;
            SkillUp[ curSkill ]++;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ]++;
        }
    }

    string@ FormatXXX( int value )
    {
        string@ result = "";
        result = "" + ABS(value);
        if(result.length() < 2) result = "0" + result;
        if(result.length() < 3) result = "0" + result;
        if( value < 0 ) result = "-" + result;
        return result;
    }

    class SkillDecButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 23, 14 );
            SetSize( 17, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            int curSkill = cast< Skills >( Parent.Parent ).CurSkill;
            if( SkillUp[ curSkill ] <= 0 ){
                PlaySound ("click10.ogg");
                return;
            }
            
            PlaySound ("click22.ogg");
            
            SkillUp[ curSkill ]--;
            if( IsTagSkill( curSkill ) )
                SkillUp[ curSkill ]--;
            
            int skillVal = GetParam( curSkill ) + SkillUp[ curSkill ];
            if( skillVal > __SkillModAdd6 )
                UnspentSkillPoints += 6;
            else if( skillVal > __SkillModAdd5 )
                UnspentSkillPoints += 5;
            else if( skillVal > __SkillModAdd4 )
                UnspentSkillPoints += 4;
            else if( skillVal > __SkillModAdd3 )
                UnspentSkillPoints += 3;
            else if( skillVal > __SkillModAdd2 )
                UnspentSkillPoints += 2;
            else
                UnspentSkillPoints += 1;
        }
    }

    class SkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 435, 23 );
        }
    }

    class SkillPointsTitle : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -57, 143 );
            SetSize( 120, 26 );
            SetText( MSG_GAME( STR_CHA_UNSPENT_SP ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentSkillpoints : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 88, 142 );
            SetSize( 48, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXXX( UnspentSkillPoints );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 340, 262 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            int param = -1;
            
            #define CHECK_PARAM_PARENT #( className ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = cast< className >( obj.Parent ).Param
            //#define CHECK_PARENT #( className, p ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = p
            
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtStatsPanel );
            CHECK_PARAM_PARENT( Skill );
            
            if(CurTip < -1) param = ABS(CurTip);
            
            if( param != -1 && CurTip != param )
            {
                CurTip = param;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( param ) );
                FindText( "Desc" ).Text = FormatFormulas( MSG_GAME( STR_PARAM_DESC( param ) ) );
                FindText( "Math" ).Text = FormatFormulas( MSG_GAME( STR_PARAM_MATH( param ) ) );
                string@ image =  MSG_GAME( STR_PARAM_PIC( param ) );
                GUIPanel@ uiImage = FindPanel( "Image" );
                if(image != "error"){
                    uint width = uiImage.get_Width();
                    uiImage.SetBackgroundImage(image);
                    uiImage.SetActive(true);
                    if(width<1) uiImage.SetSize(0,0);
                }else{
                    uiImage.SetActive(false);
                }
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 169, 42 );
            SetSize( 120, 135 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 12, 8 );
            SetSize( 230, 25 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_SAND );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 12, 39 );
            SetSize( 158, 138 );
        }
    }

    class Math : GUIText
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 12, 37 );
            SetSize( 158, 140 );
        }
    }

    class Switch : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 250, 14 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/greenDot.png" );
        }

        void OnCheckedChanged() override
        {
            PlaySound ("click22.ogg");
            if( IsChecked ){
                Parent.Find("Desc").SetActive(false);
                Parent.Find("Math").SetActive(true);
            }else{
                Parent.Find("Desc").SetActive(true);
                Parent.Find("Math").SetActive(false);
            }
        }
    }

    class ImgSwitch : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 274, 14 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/yellowDot.png" );
        }

        void OnCheckedChanged() override
        {
            PlaySound ("click22.ogg");
            if( IsChecked ){
                Parent.Find("Desc").SetSize(275, 134);
                Parent.Find("Math").SetSize(275, 134);
                Parent.Find("Image").SetSize(0,0);
            }else{
                Parent.Find("Desc").SetSize(160, 134);
                Parent.Find("Math").SetSize(160, 134);
                Parent.Find("Image").SetSize(120, 135);
            }
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 526, 148 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -180, 302 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 1, 4 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            PlaySound ("click4.ogg");
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 19, 3 );
            SetSize( 80, 20 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -69, 302 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 5 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            if( UnspentSkillPoints < GetParam( ST_UNSPENT_SKILL_POINTS ) )
            {
                int[] skills = {};
                skills.resize(__SkillEnd - __SkillBegin + 1);
                for(uint x = 0; x < skills.length; x++){
                    skills[x] = SkillUp[__SkillBegin + x];
                }
                RunServerScriptUnsafe("parameters@unsafe_changeSkills",0,0,0,"",skills);
                PlaySound ("click10.ogg");
            } else {
                PlaySound ("click4.ogg");
            }
            HideScreen();
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 17, 4 );
            SetSize( 60, 20 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 40, 307 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -12, 0 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
            PlaySound ("click4.ogg");
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, -1 );
            SetSize( 60, 20 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterText : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 3, 1 );
        }
    }

    class CharNameText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 6, 2 );
            SetSize( 250, 22 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __Name;
        }
    }

    class CharAgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 270, 2 );
            SetSize( 32, 22 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetParam( ST_AGE );
        }
    }

    class CharGenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 106, 35 );
            SetSize( 55, 22 );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetParam( ST_GENDER ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class LevelStats : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 24, 281 );
        }
    }

    class TextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 2, -2 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_LEVEL ), "%d", GetParam( ST_LEVEL ) );
        }
    }

    class TextExp : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 2, 10 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_EXPERIENCE ), "%d", GetParam( ST_EXPERIENCE ) );
        }
    }

    class TextNextLevel : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 2, 22 );
        }

        string@ get_Text() override
        {
            return ReplaceText( MSG_GAME( STR_CHA_NEXT_LEVEL ), "%d", NUMERICAL_NUMBER( GetParam( ST_LEVEL ) * 1000 ) );
        }
    }

    int CurSwitch = 0;  // 0 - perks, 1 - karma, 2 - kills

    class Switcher : GUIPanel
    {
        int CurSwitch = 0; // 0 - perks, 1 - karma, 2 - kills
        int[] SwitchScroll = { 0, 0, 0 };

        void OnConstruct() override
        {
            SetPosition( 28, 279 );
        }

        void OnShow( dictionary@ params ) override
        {
            SwitchScroll[ 0 ] = SwitchScroll[ 1 ] = SwitchScroll[ 2 ] = 0;
        }

        void OnDraw() override
        {
            //FindPanel( reflection::typeof< PerksTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 0 );
            //FindPanel( reflection::typeof< KarmaTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 1 );
            //FindPanel( reflection::typeof< KillsTitle >().nameWithoutNamespace ).SetActive( CurSwitch == 2 );
        }
    }

    class Triggers : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -2, 1 );
        }
    }

    class Backgrounds : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class PerksTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -15, 48 );
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_perks.png" );
        }
    }

    class KarmaTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( -15, 48 );
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_karma.png" );
        }
    }

    class KillsTitle : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( -15, 48 );
            SetSize( 318, 33 );
            SetBackgroundImage( "art/intrface/cha_switcher_kills.png" );
        }
    }

    class PerksTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 45, 62 );
            SetText( MSG_GAME( STR_SWITCH_PERKS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KarmaTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 146, 61 );
            SetText( MSG_GAME( STR_SWITCH_KARMA_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class KillsTitleText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 244, 62 );
            SetText( MSG_GAME( STR_SWITCH_KILLS_NAME ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class PerksTitleTrigger : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -13, 47 );
            SetSize( 109, 33 );
        }

        void OnLMousePressed() override
        {
            Parent.FindPanel( "Backgrounds" ).FindPanel ("PerksTitle").SetActive (true);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KarmaTitle").SetActive (false);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KillsTitle").SetActive (false);
            //Parent.FindPanel( "PerksTitle" ).SetActive (false);
            //Parent.FindPanel( "KillsTitle" ).SetSwitch( false );
            //Parent.Parent.FindText ("NormalText").SetText ("Perks supertext.");
            if(CurSwitch != 0 ) PlaySound ("click4.ogg");
            CurSwitch = 0;
            
        }
    }

    class KarmaTitleTrigger : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 96, 47 );
            SetSize( 103, 33 );
        }

        void OnLMousePressed() override
        {
            Parent.FindPanel( "Backgrounds" ).FindPanel ("PerksTitle").SetActive (false);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KillsTitle").SetActive (false);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KarmaTitle").SetActive (true);
            //Parent.FindPanel( "KillsTitle" ).SetSwitch( false );
            //Parent.Parent.FindText ("NormalText").SetText ("Karma supertext.");
            if(CurSwitch != 1) PlaySound ("click4.ogg");
            CurSwitch = 1;
            
        }
    }

    class KillsTriggerButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 199, 47 );
            SetSize( 104, 33 );
        }

        void OnLMousePressed() override
        {
            Parent.FindPanel( "Backgrounds" ).FindPanel ("PerksTitle").SetActive (false);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KarmaTitle").SetActive (false);
            Parent.FindPanel( "Backgrounds" ).FindPanel ("KillsTitle").SetActive (true);
            if(CurSwitch != 2) PlaySound ("click4.ogg");
            CurSwitch = 2;
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 291, 86 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_up_off.png" );
            SetPressedImage( "art/intrface/arrow_up_on.png" );
        }

        void OnLMousePressed() override
        {
            DataList@ list = cast<DataList>(Parent.Find("DataList"));
            if(list.Scroll > 0){ 
                PlaySound ("click22.ogg");
                list.Scroll--;
            }
            //if(list.Scroll < list.Info.length-7) list.Scroll++;
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 291, 99 );
            SetSize( 11, 14 );
            SetBackgroundImage( "art/intrface/arrow_down_off.png" );
            SetPressedImage( "art/intrface/arrow_down_on.png" );
        }

        void OnLMousePressed() override
        {
            DataList@ list = cast<DataList>(Parent.Find("DataList"));
            //if(list.Scroll > 0) list.Scroll--;
            if(list.Scroll < list.Info.length-7){
                list.Scroll++;
                PlaySound ("click22.ogg");
            }
        }
    }

    class DataList : GUIGrid
    {
        int CurInfo = 0;
        int[] Info;
        int Scroll = 0;

        void OnConstruct() override
        {
            SetPosition( -1, 86 );
            SetSize( 287, 100 );
            SetCellPrototype( "DataItem" );
            SetGridSize( 7 );
        }

        void OnShow( dictionary@ params ) override
        {
            Info    = ShowInfo(CurSwitch);
            CurInfo = CurSwitch;
            Scroll  = 0;
        }

        void OnDraw() override
        {
            if(CurInfo != CurSwitch){
                CurInfo = CurSwitch;
                Info    = ShowInfo(CurSwitch);
                Scroll  = 0;
            }
        }
    }

    class DataItem : GUIPanel
    {
        
        int Index = 0;

        void OnConstruct() override
        {
            SetSize( 287, 15 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Index = cellIndex;
        }
    }

    class DataLabel : GUIText
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 287, 15 );
            SetText( "Безымянный" );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            DataList@ list = cast<DataList>(Parent.Parent);
            DataItem@ cell = cast<DataItem>(Parent);
            DataValue@ dvalue = cast<DataValue>(Find("DataValue"));
            uint id = cell.Index + list.Scroll;
            //
            if( list.Info.length > id && id >= 0 ){
                Param = list.Info[id] > 0 ? list.Info[id] : -1;
                if(list.Info[id] > 0){
                    SetText(MSG_GAME( STR_PARAM_NAME( list.Info[id] ) ) );
                    if( list.Info[id] >= REPUTATION_BEGIN && list.Info[id] <= REPUTATION_END ){
                        dvalue.SetText( MSG_GAME( STR_TOWNREP_RATIO_NAME( GetParam( list.Info[id] ) ) )+ " ("+GetParam( list.Info[id] )+")" );
                    }else{
                        int val = GetParam( list.Info[id] );
                        dvalue.SetText( val < 2 ? "" : "("+val+")" );
                    }
                    SetTextFlags( FT_CENTERY /*| FT_BORDERED*/ );
                }else if(list.Info[id] == 0){
                    SetText( MSG_GAME(STR_ITEM_LOOK_NOTHING) ); // 
                    dvalue.SetText("");
                    SetTextFlags( FT_CENTERY /*| FT_BORDERED*/ );
                }else{
                    SetText(MSG_GAME( ABS(list.Info[id]) ) );
                    dvalue.SetText( "" );
                    SetTextFlags( FT_CENTERY | FT_CENTERX /*| FT_BORDERED*/ );
                }
                // For debug purposes: shows #param_id@message_id for missing text entries
                if( Text.length() < 2 || Text == "error" ) SetText( "#"+(list.Info[id] > 0 ? list.Info[id] + "@" + STR_PARAM_NAME( list.Info[id] ) : "@"+ABS(list.Info[id])) );
            }else{
                Param = -1;
                SetText("");
                dvalue.SetText("");
            }
        }

        void OnMouseDown( int button ) override
        {
            DataList@ list = cast<DataList>(Parent.Parent);
            if( MOUSE_BUTTON_WHEEL_UP == button ){
                if(list.Scroll > 0) list.Scroll--;
            }else if( MOUSE_BUTTON_WHEEL_DOWN == button ){
                if(list.Scroll < list.Info.length-7) list.Scroll++;
            }else if( MOUSE_BUTTON_LEFT == button ){
                CurTip = -Param;
            }
        }
    }

    class DataValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 0 );
            SetSize( 200, 15 );
            SetNotHittable( true );
            SetTextFlags( FT_CENTERY | FT_CENTERR );
        }
    }

    void Init( int screenIndex )
    {
        Character _Character();
        _Character.Init( null );
        Main _Main();
        _Main.Init( _Character );
        BaseStats _BaseStats();
        _BaseStats.Init( _Main );
        BaseStat _BaseStat();
        _BaseStat.Init( _BaseStats );
        StatName _StatName();
        _StatName.Init( _BaseStat );
        StatValue _StatValue();
        _StatValue.Init( _BaseStat );
        StatValueDesc _StatValueDesc();
        _StatValueDesc.Init( _BaseStat );
        HealthStats _HealthStats();
        _HealthStats.Init( _Main );
        HealthStat _HealthStat();
        _HealthStat.Init( _HealthStats );
        StatDesc _StatDesc();
        _StatDesc.Init( _HealthStat );
        ExtendedStats _ExtendedStats();
        _ExtendedStats.Init( _Main );
        ExtStatsPanel _ExtStatsPanel();
        _ExtStatsPanel.Init( _ExtendedStats );
        ExtStatName _ExtStatName();
        _ExtStatName.Init( _ExtStatsPanel );
        ExtStatValue _ExtStatValue();
        _ExtStatValue.Init( _ExtStatsPanel );
        Skills _Skills();
        _Skills.Init( _Main );
        Skill _Skill();
        _Skill.Init( _Skills );
        SkillName _SkillName();
        _SkillName.Init( _Skill );
        SkillValue _SkillValue();
        _SkillValue.Init( _Skill );
        SkillHeader _SkillHeader();
        _SkillHeader.Init( _Skills );
        SkillSlider _SkillSlider();
        _SkillSlider.Init( _Skills );
        SkillIncButton _SkillIncButton();
        _SkillIncButton.Init( _SkillSlider );
        SkillDecButton _SkillDecButton();
        _SkillDecButton.Init( _SkillSlider );
        SkillPoints _SkillPoints();
        _SkillPoints.Init( _Main );
        SkillPointsTitle _SkillPointsTitle();
        _SkillPointsTitle.Init( _SkillPoints );
        UnspentSkillpoints _UnspentSkillpoints();
        _UnspentSkillpoints.Init( _SkillPoints );
        Tip _Tip();
        _Tip.Init( _Main );
        Image _Image();
        _Image.Init( _Tip );
        Name _Name();
        _Name.Init( _Tip );
        Desc _Desc();
        _Desc.Init( _Tip );
        Math _Math();
        _Math.Init( _Tip );
        Switch _Switch();
        _Switch.Init( _Tip );
        ImgSwitch _ImgSwitch();
        _ImgSwitch.Init( _Tip );
        Buttons _Buttons();
        _Buttons.Init( _Main );
        Print _Print();
        _Print.Init( _Buttons );
        Button1 _Button1();
        _Button1.Init( _Print );
        Text1 _Text1();
        _Text1.Init( _Print );
        Done _Done();
        _Done.Init( _Buttons );
        Button2 _Button2();
        _Button2.Init( _Done );
        Text2 _Text2();
        _Text2.Init( _Done );
        Back _Back();
        _Back.Init( _Buttons );
        Button3 _Button3();
        _Button3.Init( _Back );
        Text3 _Text3();
        _Text3.Init( _Back );
        CharacterText _CharacterText();
        _CharacterText.Init( _Main );
        CharNameText _CharNameText();
        _CharNameText.Init( _CharacterText );
        CharAgeText _CharAgeText();
        _CharAgeText.Init( _CharacterText );
        CharGenderText _CharGenderText();
        _CharGenderText.Init( _CharacterText );
        LevelStats _LevelStats();
        _LevelStats.Init( _Main );
        TextLevel _TextLevel();
        _TextLevel.Init( _LevelStats );
        TextExp _TextExp();
        _TextExp.Init( _LevelStats );
        TextNextLevel _TextNextLevel();
        _TextNextLevel.Init( _LevelStats );
        Switcher _Switcher();
        _Switcher.Init( _Main );
        Triggers _Triggers();
        _Triggers.Init( _Switcher );
        Backgrounds _Backgrounds();
        _Backgrounds.Init( _Triggers );
        PerksTitle _PerksTitle();
        _PerksTitle.Init( _Backgrounds );
        KarmaTitle _KarmaTitle();
        _KarmaTitle.Init( _Backgrounds );
        KillsTitle _KillsTitle();
        _KillsTitle.Init( _Backgrounds );
        PerksTitleText _PerksTitleText();
        _PerksTitleText.Init( _Backgrounds );
        KarmaTitleText _KarmaTitleText();
        _KarmaTitleText.Init( _Backgrounds );
        KillsTitleText _KillsTitleText();
        _KillsTitleText.Init( _Backgrounds );
        PerksTitleTrigger _PerksTitleTrigger();
        _PerksTitleTrigger.Init( _Triggers );
        KarmaTitleTrigger _KarmaTitleTrigger();
        _KarmaTitleTrigger.Init( _Triggers );
        KillsTriggerButton _KillsTriggerButton();
        _KillsTriggerButton.Init( _Triggers );
        ScrollUp _ScrollUp();
        _ScrollUp.Init( _Switcher );
        ScrollDown _ScrollDown();
        _ScrollDown.Init( _Switcher );
        DataList _DataList();
        _DataList.Init( _Switcher );
        DataItem _DataItem();
        _DataItem.Init( _DataList );
        DataLabel _DataLabel();
        _DataLabel.Init( _DataItem );
        DataValue _DataValue();
        _DataValue.Init( _DataLabel );
        GUI_RegisterScreen( screenIndex, _Character );
    }
}

namespace Cursor
{
    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
        }
    }

    import uint GetActiveItemAttackDistantion( CritterCl& cr ) from "parameters";
    import int to_hit( CritterCl& chosen, CritterCl& target, ProtoItem& weapon, uint8 weaponMode ) from "client_main";

    class Cursor : GUIPanel
    {
        Sprite CursorDefault;
        Sprite CursorHand;
        Sprite CursorWait;
        Sprite CursorAttack;
        Sprite CursorUseItem;
        Sprite CursorUseSkill;
        Sprite[] CursorMoveScreen;

        void OnConstruct() override
        {
        }

        void OnInit() override
        {
            CursorDefault.Load( "art/intrface/cursor_default.png" );
            CursorHand.Load( "art/intrface/cursor_hand.png" );
            CursorWait.Load( "art/intrface/cursor_wait.png" );
            CursorAttack.Load( "art/intrface/cursor_attack.png" );
            CursorUseItem.Load( "art/intrface/cursor_use_item.png" );
            CursorUseSkill.Load( "art/intrface/cursor_use_skill.png" );
            CursorMoveScreen.resize( 8 );
            CursorMoveScreen[ 0 ].Load( "art/intrface/cursor_move_screen_u.png" );
            CursorMoveScreen[ 1 ].Load( "art/intrface/cursor_move_screen_ur.png" );
            CursorMoveScreen[ 2 ].Load( "art/intrface/cursor_move_screen_r.png" );
            CursorMoveScreen[ 3 ].Load( "art/intrface/cursor_move_screen_dr.png" );
            CursorMoveScreen[ 4 ].Load( "art/intrface/cursor_move_screen_d.png" );
            CursorMoveScreen[ 5 ].Load( "art/intrface/cursor_move_screen_dl.png" );
            CursorMoveScreen[ 6 ].Load( "art/intrface/cursor_move_screen_l.png" );
            CursorMoveScreen[ 7 ].Load( "art/intrface/cursor_move_screen_ul.png" );
        }

        void OnDraw() override
        {
            if( __HideCursor )
                return;
            
            // Wait
            int cursor = GetCurrentCursor();
            if( cursor == CURSOR_WAIT )
            {
                CursorWait.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
                return;
            }
            
            // Game scroll
            bool hasMouseScroll = true;
            if( __ScrollMouseLeft && __ScrollMouseUp )
                CursorMoveScreen[ 7 ].Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            else if( __ScrollMouseRight && __ScrollMouseUp )
                CursorMoveScreen[ 1 ].Draw( __MouseX, __MouseY, 0, 0, 1, -1 );
            else if( __ScrollMouseLeft && __ScrollMouseDown )
                CursorMoveScreen[ 5 ].Draw( __MouseX, __MouseY, 0, 0, -1, 1 );
            else if( __ScrollMouseRight && __ScrollMouseDown )
                CursorMoveScreen[ 3 ].Draw( __MouseX, __MouseY, 0, 0, 1, 1 );
            else if( __ScrollMouseLeft )
                CursorMoveScreen[ 6 ].Draw( __MouseX, __MouseY, 0, 0, -1, 0 );
            else if( __ScrollMouseRight )
                CursorMoveScreen[ 2 ].Draw( __MouseX, __MouseY, 0, 0, 1, 0 );
            else if( __ScrollMouseUp )
                CursorMoveScreen[ 0 ].Draw( __MouseX, __MouseY, 0, 0, 0, -1 );
            else if( __ScrollMouseDown )
                CursorMoveScreen[ 4 ].Draw( __MouseX, __MouseY, 0, 0, 0, 1 );
            else
                hasMouseScroll = false;
            if( hasMouseScroll )
                return;
            
            // Other cursors
            if( cursor == CURSOR_USE_WEAPON )
            {
                CursorAttack.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            
                CritterCl@ chosen = GetChosen();
                if( chosen is null )
                    return;
            
                CritterCl@ cr = GetMonitorCritter( __MouseX, __MouseY, false );
                if( cr is null || cr is chosen )
                    return;
            
                uint attackDist = GetActiveItemAttackDistantion( chosen );
                if( attackDist == 0 )
                    return;
            
                bool trace = false;
                CritterCl@[] critters;
                GetCrittersPath( chosen.HexX, chosen.HexY, cr.HexX, cr.HexY, 0.0f, attackDist, FIND_ALL, critters );
                for( uint i = 0; i < critters.length(); i++ )
                {
                    if( critters[ i ].Id == cr.Id )
                    {
                        trace = true;
                        break;
                    }
                }
                if( !trace )
                    return;
            
                uint8 mode = 0;
                int hit = to_hit( chosen, cr, chosen.GetSlotProto( SLOT_HAND1, mode ), mode );
                if( hit == 0 )
                    return;
                
                DrawText( hit + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_RED, FONT_DEFAULT, 0 );
            }
            else if( cursor == CURSOR_USE_ITEM )
            {
                CursorUseItem.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CURSOR_USE_SKILL )
            {
                CursorUseSkill.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CURSOR_MOVE )
            {
                uint16 hx, hy;
                if( !GetMonitorHex( __MouseX, __MouseY, hx, hy, false ) )
                    CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_DEFAULT )
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_HAND )
            {
                CustomCall( "CurDrawHand" );
            }
            else
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
        }
    }

    class LMenu : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlots : GUIGrid
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlot : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Cursor _Cursor();
        _Cursor.Init( _Screen );
        LMenu _LMenu();
        _LMenu.Init( _Screen );
        MenuSlots _MenuSlots();
        _MenuSlots.Init( _LMenu );
        MenuSlot _MenuSlot();
        _MenuSlot.Init( _MenuSlots );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}
