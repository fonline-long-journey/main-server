// GUI scheme name: The Long Journey Original

#include "_macros.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "input_h.fos"
#include "gui_h.fos"
#include "gui_screens_stuff.fos"

void InitializeScreens()
{
    Login_TLJ::Init( CLIENT_MAIN_SCREEN_LOGIN );
    Register_TLJ::Init( CLIENT_MAIN_SCREEN_REGISTRATION );
    Options::Init( CLIENT_MAIN_SCREEN_OPTIONS );
    Game_TLJ::Init( CLIENT_MAIN_SCREEN_GAME );
    Inventory_TLJ::Init( CLIENT_SCREEN_INVENTORY );
    Cursor::Init( CLIENT_SCREEN_CURSOR );
}

namespace Login_TLJ
{
    uint currentLogStrNum = STR_UPDATE_LOG_LATEST;
    void NextLog()
        {
        	if(currentLogStrNum+1 <= STR_UPDATE_LOG_LATEST)
        		currentLogStrNum++;
        }
        		
    void PreviousLog()
        {
            if   (currentLogStrNum-1 >= STR_UPDATE_LOG_BEGIN)
        		currentLogStrNum--;
        }
    

    class Login : GUIScreen
    {
        void OnConstruct() override
        {
            SetPosition( 199, 14 );
            SetSize( 1920, 1080 );
            SetDock( DOCK_FILL );
            SetBackgroundImage( "art/intrface/background.png", IMAGE_LAYOUT_STRETCH );
        }

        void OnInit() override
        {
            SetSize( __ScreenHeight, __ScreenWidth );
        }

        void OnGlobalInput( uint8 key, string@ text ) override
        {
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
        }
    }

    class Menu : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 468, 34 );
            SetSize( 360, 273 );
            SetBackgroundImage( "art/intrface/login_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetPosition( __ScreenHeight/2 - 360/2, __ScreenWidth/2 - 273/2);
        }
    }

    class Play : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 247, 131 );
            SetSize( 82, 46 );
            SetPressedImage( "art/intrface/done.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                CustomCall( "Login\n" + Screen.FindText("InputLogin").Text + "\n" + Screen.FindText("InputPassword").Text, "\n" );
            else
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
        }
    }

    class Registration : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 12, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            if( !__Singleplayer )
                ShowScreen( CLIENT_MAIN_SCREEN_REGISTRATION );
            else
                ShowScreen( CLIENT_SCREEN_SAVE_LOAD );
        }
    }

    class Options : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 128, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_OPTIONS );
            PlaySound ( "pyromother.wav");
        }
    }

    class About : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 243, 186 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_CREDITS );
        }
    }

    class Exit : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 211, 232 );
            SetSize( 49, 25 );
            SetPressedImage( "art/intrface/ok2.png" );
        }

        void OnLMouseClick() override
        {
            PlaySound ("pyromother.wav");
            TryExit();
            
        }
    }

    class InputLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 61, 129 );
            SetSize( 155, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __Name );
        }
    }

    class InputPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 0, 18 );
            SetSize( 155, 18 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
            SetInputPassword( "#" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( CustomCall( "GetPassword" ) );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 13, 9 );
            SetSize( 323, 95 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    class Version : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 10, 5 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
            SetText( MSG_GAME( STR_VERSION_INFO ) );
            SetTextFlags( FT_BORDERED );
            SetTextColor( COLOR_WHITE );
        }
    }

    class UpdateLogPanel : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 377, 477 );
            SetDock( DOCK_RIGHT );
            SetBackgroundImage( "art/intrface/log_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            SetPosition( 0, __ScreenWidth - 477);
        }
    }

    class UpdateLogText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 25 );
            SetSize( 335, 345 );
            SetAnchor( ANCHOR_TOP );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( ( MSG_GAME( STR_UPDATE_LOG_LATEST ) ) );
        }
    }

    class UpdateLogButtonUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -7, 405 );
            SetSize( 35, 34 );
            SetPressedImage( "art/intrface/bigkey_up.png" );
        }

        void OnLMouseClick() override
        {
            NextLog();
            Parent.FindText("UpdateLogText").SetText ( ( MSG_GAME( currentLogStrNum ) ) );
        }
    }

    class UpdateLogButtonDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 30, 405 );
            SetSize( 35, 34 );
            SetPressedImage( "art/intrface/bigkey_down.png" );
        }

        void OnLMouseClick() override
        {
            PreviousLog();
            Parent.FindText("UpdateLogText").SetText ( ( MSG_GAME( currentLogStrNum ) ) );
        }
    }

    void Init( int screenIndex )
    {
        Login _Login();
        _Login.Init( null );
        Menu _Menu();
        _Menu.Init( _Login );
        Play _Play();
        _Play.Init( _Menu );
        Registration _Registration();
        _Registration.Init( _Menu );
        Options _Options();
        _Options.Init( _Menu );
        About _About();
        _About.Init( _Menu );
        Exit _Exit();
        _Exit.Init( _Menu );
        InputLogin _InputLogin();
        _InputLogin.Init( _Menu );
        InputPassword _InputPassword();
        _InputPassword.Init( _InputLogin );
        MessageBox _MessageBox();
        _MessageBox.Init( _Menu );
        Version _Version();
        _Version.Init( _Login );
        UpdateLogPanel _UpdateLogPanel();
        _UpdateLogPanel.Init( _Login );
        UpdateLogText _UpdateLogText();
        _UpdateLogText.Init( _UpdateLogPanel );
        UpdateLogButtonUp _UpdateLogButtonUp();
        _UpdateLogButtonUp.Init( _UpdateLogText );
        UpdateLogButtonDown _UpdateLogButtonDown();
        _UpdateLogButtonDown.Init( _UpdateLogText );
        GUI_RegisterScreen( screenIndex, _Login );
    }
}

namespace Register_TLJ
{
    import void player_data_generate( int[]& params ) from "client_main";
    import bool player_data_check( int[]& params ) from "client_main";
    
    int[] ShowBaseStats = { ST_STRENGTH, ST_PERCEPTION, ST_ENDURANCE, ST_CHARISMA, ST_INTELLECT, ST_AGILITY};
    int[] ShowHealthStats = { ST_MAX_LIFE, DAMAGE_POISONED, DAMAGE_RADIATED, DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
    int[] ShowExtendedStats = { ST_ARMOR_CLASS, ST_ACTION_POINTS, ST_CARRY_WEIGHT, ST_MELEE_DAMAGE, ST_NORMAL_RESIST, ST_POISON_RESISTANCE, ST_RADIATION_RESISTANCE, ST_SEQUENCE, ST_HEALING_RATE, ST_CRITICAL_CHANCE };
    int[] ShowTraitsLeft = { TRAIT_FAST_METABOLISM, TRAIT_BRUISER, TRAIT_SMALL_FRAME, TRAIT_ONE_HANDER, TRAIT_FINESSE, TRAIT_KAMIKAZE, TRAIT_HEAVY_HANDED, TRAIT_FAST_SHOT };
    int[] ShowTraitsRight = { TRAIT_BLOODY_MESS, TRAIT_JINXED, TRAIT_GOOD_NATURED, TRAIT_CHEM_RELIANT, TRAIT_CHEM_RESISTANT, TRAIT_SEX_APPEAL, TRAIT_SKILLED, TRAIT_NIGHT_PERSON };
    int[] ShowSkills = { SK_SMALL_GUNS, SK_BIG_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_MELEE_WEAPONS, SK_THROWING, SK_FIRST_AID, SK_DOCTOR, SK_SNEAK, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SCIENCE, SK_REPAIR, SK_SPEECH, SK_BARTER, SK_GAMBLING, SK_OUTDOORSMAN };
    
    int[] Params( PARAMS_COUNT );
    
    int CurTip = -1;
    
    int GetParam( int param )
    {
        return Params[ param ];
    }
    
    void GenParams()
    {
        player_data_generate( Params );
    }
    
    int GetUnspentStatPoints()
    {
        int unspent = __StartSpecialPoints;
        for( uint i = 0; i < ShowBaseStats.length(); i++ )
            unspent -= __RegParams[ ShowBaseStats[ i ] ];
        return unspent;
    }
    
    string@ FormatXX( int value )
    {
        value = CLAMP( value, 0, 99 );
        return value < 10 ? "0" + value : "" + value;
    }

    class Character : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }

        void OnInit() override
        {
            GenParams();
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 158, 1 );
            SetSize( 640, 597 );
            SetBackgroundImage( "art/intrface/register_tlj_ver2.png" );
        }
    }

    class TLJRegister : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -79, 57 );
        }
    }

    class BaseStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 95, 129 );
            SetCellPrototype( "BaseStat" );
            SetGridSize( ShowBaseStats.length() );
        }
    }

    class BaseStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 155, 33 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowBaseStats[ cellIndex ];
        }
    }

    class StatName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -10, 5 );
            SetSize( 40, 20 );
            SetText( "TXT" );
            SetTextFont( FONT_BIG );
            SetTextFlags( FT_CENTERX );
            SetTextColor( COLOR_SAND );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_INV_SHORT_SPECIAL( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 44, 2 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( cast< BaseStat >( Parent ).Param ) );
        }
    }

    class StatValueDesc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 87, 4 );
            SetSize( 55, 20 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
        }

        string@ get_Text() override
        {
            return MSG_GAME( STR_STAT_LEVEL_ABB( GetParam( cast< BaseStat >( Parent ).Param ) ) );
        }
    }

    class StatInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 146, 3 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/plus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] < 10 && GetUnspentStatPoints() > 0 )
            {
                __RegParams[ param ]++;
                GenParams();
            }
        }
    }

    class StatDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 146, 14 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/minus_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< BaseStat >( Parent ).Param;
            if( Params[ param ] > 1 )
            {
                __RegParams[ param ]--;
                GenParams();
            }
            PlaySound ("pyromother.wav");
        }
    }

    class BaseStatPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 97, 336 );
        }
    }

    class Title1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -4, 4 );
            SetSize( 110, 30 );
            SetText( MSG_GAME( STR_REG_SPECIAL_SUM ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class StatPointsValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 106, 4 );
            SetSize( 34, 30 );
            SetTextFont( FONT_BIG_NUM );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetUnspentStatPoints() );
        }
    }

    class HealthStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 272, 100 );
            SetCellPrototype( "HealthStat" );
            SetGridSize( ShowHealthStats.length() );
        }
    }

    class HealthStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 14 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowHealthStats[ cellIndex ];
        }
    }

    class StatDesc : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 122, 13 );
            SetTextFlags( FT_CENTERY );
        }

        void OnDraw() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            uint color;
            if( param == DAMAGE_RADIATED )
                color = ( GetParam( ST_RADIATION_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else if( param == DAMAGE_POISONED )
                color = ( GetParam( ST_POISONING_LEVEL ) != 0 ? 0 : COLOR_DARK );
            else
                color = ( GetParam( param ) != 0 ? 0: COLOR_DARK );
            SetTextColor( color );
        }

        string@ get_Text() override
        {
            int param = cast< HealthStat >( Parent ).Param;
            if( param == ST_MAX_LIFE )
                return MSG_GAME( STR_INV_HP ) + "  " + GetParam( ST_CURRENT_HP ) + " / " + GetParam( ST_MAX_LIFE );
            return MSG_GAME( STR_PARAM_NAME( param ) );
        }
    }

    class ExtendedStats : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 271, 235 );
            SetCellPrototype( "ExtendedStat" );
            SetGridSize( ShowExtendedStats.length() );
        }
    }

    class ExtendedStat : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 122, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowExtendedStats[ cellIndex ];
        }
    }

    class StatName2 : GUIText
    {
        void OnConstruct() override
        {
            SetSize( 100, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            Text = MSG_GAME( STR_PARAM_NAME_SHORT( param ) );
        }
    }

    class StatValue2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 98, 0 );
            SetSize( 25, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            int param = cast< ExtendedStat >( Parent ).Param;
            string text;
            if( param == ST_CARRY_WEIGHT )
                text = "" + ( GetParam( param ) / 1000 );
            else if( param == ST_NORMAL_RESIST || param == ST_NORMAL_RESIST )
                text = "" + GetParam( param ) + "%";
            else
                text = "" + GetParam( param );
            return text;
        }
    }

    class Traits : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 99, 406 );
        }
    }

    class TraitsLeft : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 4, 6 );
            SetCellPrototype( "TraitLeft" );
            SetGridSize( ShowTraitsLeft.length() );
        }
    }

    class TraitLeft : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( -1, 0 );
            SetSize( 150, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsLeft[ cellIndex ];
        }
    }

    class Switcher1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 0, 1 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/TGSKLON.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitLeft >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName1" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 22, 0 );
            SetSize( 120, 14 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitLeft >( Parent ).Param ) );
        }
    }

    class TraitsRight : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 154, 6 );
            SetCellPrototype( "TraitRight" );
            SetGridSize( ShowTraitsRight.length() );
        }
    }

    class TraitRight : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetPosition( -1, 0 );
            SetSize( 148, 13 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowTraitsRight[ cellIndex ];
        }
    }

    class Switcher2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 125, 1 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/TGSKLON.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< TraitRight >( Parent ).Param;
            if( __RegParams[ param ] == 0 )
            {
                int count = 0;
                for( uint i = TRAIT_BEGIN; i <= TRAIT_END; i++ )
                    if( __RegParams[ i ] != 0 )
                        count++;
                 if( count < 2 )
                     __RegParams[ param ] = 1;
            }
            else
            {
                __RegParams[ param ] = 0;
            }
            
            Parent.FindText( "TraitName2" ).SetTextColor( __RegParams[ param ] != 0 ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class TraitName2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 5, 0 );
            SetSize( 120, 14 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< TraitRight >( Parent ).Param ) );
        }
    }

    class Skills : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 421, 86 );
            SetCellPrototype( "Skill" );
            SetGridSize( ShowSkills.length() );
        }
    }

    class Skill : GUIPanel
    {
        int Param;

        void OnConstruct() override
        {
            SetSize( 280, 11 );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            Param = ShowSkills[ cellIndex ];
        }
    }

    class TagSkill : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -2, 0 );
            SetSize( 17, 11 );
            SetPressedImage( "art/intrface/tag_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            int param = cast< Skill >( Parent ).Param;
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            
            if( __RegParams[ TAG_SKILL1 ] == param )
                __RegParams[ TAG_SKILL1 ] = 0;
            else if( __RegParams[ TAG_SKILL2 ] == param )
                __RegParams[ TAG_SKILL2 ] = 0;
            else if( __RegParams[ TAG_SKILL3 ] == param )
                __RegParams[ TAG_SKILL3 ] = 0;
            else if( __RegParams[ TAG_SKILL4 ] == param )
                __RegParams[ TAG_SKILL4 ] = 0;
            else if( __RegParams[ TAG_SKILL1 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL1 ] = param;
            else if( __RegParams[ TAG_SKILL2 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL2 ] = param;
            else if( __RegParams[ TAG_SKILL3 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL3 ] = param;
            else if( __RegParams[ TAG_SKILL4 ] == 0 && freeTagSkills > 0 )
                __RegParams[ TAG_SKILL4 ] = param;
            
            bool tagged = ( __RegParams[ TAG_SKILL1 ] == param || __RegParams[ TAG_SKILL2 ] == param || __RegParams[ TAG_SKILL3 ] == param || __RegParams[ TAG_SKILL4 ] == param );
            Parent.FindText( "SkillName" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            Parent.FindText( "SkillValue" ).SetTextColor( tagged ? COLOR_LGRAY : 0 );
            
            GenParams();
        }
    }

    class SkillName : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, -1 );
            SetSize( 200, 13 );
            SetText( "TXT" );
            SetTextFlags( FT_CENTERY );
        }

        void OnInit() override
        {
            Text = MSG_GAME( STR_PARAM_NAME( cast< Skill >( Parent ).Param ) );
        }
    }

    class SkillValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 246, -1 );
            SetSize( 40, 13 );
            SetTextFlags( FT_CENTERY );
        }

        string@ get_Text() override
        {
            return GetParam( cast< Skill >( Parent ).Param ) + "%";
        }
    }

    class Title3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 27, -25 );
            SetSize( 150, 22 );
            SetText( MSG_GAME( STR_CHA_SKILLS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentSkillPoints : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 432, 294 );
        }
    }

    class Title2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 1 );
            SetSize( 120, 26 );
            SetText( MSG_GAME( STR_REG_UNSPENT_TAGS ) );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }
    }

    class UnspentValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 171, 1 );
            SetSize( 30, 25 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int freeTagSkills = __StartTagSkillPoints - ( __RegParams[ TAG_SKILL1 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL2 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL3 ] != 0 ? 1 : 0 ) - ( __RegParams[ TAG_SKILL4 ] != 0 ? 1 : 0 );
            return FormatXX( freeTagSkills );
        }
    }

    class Tip : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 416, 318 );
        }

        void OnDraw() override
        {
            GUIObject@ obj = GUI_GetFocusedObject();
            if( obj is null )
                return;
            
            int param = -1;
            
            #define CHECK_PARAM_PARENT #( className ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = cast< className >( obj.Parent ).Param
            //#define CHECK_PARENT #( className, p ) if( param == -1 && cast< className >( obj.Parent ) !is null ) param = p
            
            CHECK_PARAM_PARENT( BaseStat );
            CHECK_PARAM_PARENT( HealthStat );
            CHECK_PARAM_PARENT( ExtendedStat );
            CHECK_PARAM_PARENT( TraitLeft );
            CHECK_PARAM_PARENT( TraitRight );
            CHECK_PARAM_PARENT( Skill );
            
            if( param != -1 && CurTip != param )
            {
                CurTip = param;
                FindText( "Name" ).Text = MSG_GAME( STR_PARAM_NAME( param ) );
                FindText( "Desc" ).Text = MSG_GAME( STR_PARAM_DESC( param ) );
                FindPanel( "Image" ).SetBackgroundImage( GetConstantName( CONSTANTS_PICTURE, param ) );
            }
        }
    }

    class Image : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 157, 46 );
        }
    }

    class Name : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 7 );
            SetSize( 270, 31 );
            SetTextFont( FONT_THIN );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Desc : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 8, 44 );
            SetSize( 285, 138 );
            SetTextColor( COLOR_BLACK );
        }
    }

    class Buttons : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 417, 508 );
        }
    }

    class Print : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 31, 0 );
        }
    }

    class Button1 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -22, 6 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_PRINT ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Done : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 141, 0 );
        }
    }

    class Button2 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -22, 7 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "Register" );
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -2, 5 );
            SetText( MSG_GAME( STR_CHA_OK ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class Back : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 237, 0 );
        }
    }

    class Button3 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, 7 );
            SetSize( 15, 16 );
            SetPressedImage( "art/intrface/smallbutton_on.png" );
        }

        void OnLMouseClick() override
        {
            TryExit();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -1, 5 );
            SetText( MSG_GAME( STR_CHA_CANCEL ) );
            SetTextFont( FONT_FAT );
            SetTextColor( COLOR_SAND );
        }
    }

    class CharacterName : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 104, 91 );
        }
    }

    class Button4 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -21, -29 );
            SetSize( 259, 28 );
            SetPressedImage( "art/intrface/NAMEON.PNG" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( true );
        }
    }

    class CharacterText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 104, -16 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return __RegName;
        }
    }

    class CharacterAge : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 349, 59 );
        }
    }

    class Button5 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( -8, 3 );
            SetSize( 38, 28 );
            SetPressedImage( "art/intrface/AGEOFF.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterAgePopUp" ).SetActive( true );
        }
    }

    class AgeText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 11, 16 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return "" + GetParam( ST_AGE );
        }
    }

    class CharacterGender : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 176, 93 );
        }
    }

    class Button6 : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 2, 0 );
            SetSize( 83, 28 );
            SetPressedImage( "art/intrface/cha_gender_button.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterGenderPopUp" ).SetActive( true );
        }
    }

    class GenderText : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 42, 14 );
            SetNotHittable( true );
            SetTextFont( FONT_FAT );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetTextColor( COLOR_SAND );
        }

        string@ get_Text() override
        {
            return GetParam( ST_GENDER ) == GENDER_MALE ? MSG_GAME( STR_MALE_NAME ) : MSG_GAME( STR_FEMALE_NAME );
        }
    }

    class CharacterNamePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 82, 62 );
            SetSize( 238, 117 );
            SetBackgroundImage( "art/intrface/cha_name_tlj.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                GUI_SetFocusedObject( FindTextInput( "ChaName" ) );
        }
    }

    class ChaName : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 27, 32 );
            SetSize( 180, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegName );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegName = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 27, 64 );
            SetSize( 180, 14 );
            SetTextFlags( FT_CENTERX | FT_CENTERY );
            SetInputLength( __MaxNameLength );
        }

        void OnShow( dictionary@ params ) override
        {
            SetText( __RegPassword );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __RegPassword = Text;
            
            if( key == DIK_RETURN || key == DIK_NUMPADENTER )
                Parent.SetActive( false );
        }
    }

    class ChaTrollButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 40, 91 );
            SetSize( 49, 25 );
            SetPressedImage( "art/intrface/ok2.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterNamePopUp" ).SetActive( false );
            //PlaySound("AMB_Electric_Arc_Large_0" + Random(1, 2) + ".wav");
            PlaySound("pyromother.wav");
        }
    }

    class CharacterAgePopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 206, 65 );
            SetSize( 139, 43 );
            SetBackgroundImage( "art/intrface/cha_age.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class IncAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_inc_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]++;
            if( __RegParams[ ST_AGE ] > AGE_MAX )
                __RegParams[ ST_AGE ] = AGE_MIN;
            GenParams();
        }
    }

    class DecAge : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 11 );
            SetSize( 20, 18 );
            SetPressedImage( "art/intrface/age_dec_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            __RegParams[ ST_AGE ]--;
            if( __RegParams[ ST_AGE ] < AGE_MIN )
                __RegParams[ ST_AGE ] = AGE_MAX;
            GenParams();
        }
    }

    class AgeValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 54, 8 );
            SetSize( 30, 24 );
            SetTextFont( FONT_BIG_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            return FormatXX( GetParam( ST_AGE ) );
        }
    }

    class CharacterGenderPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 288, 65 );
            SetSize( 139, 72 );
            SetBackgroundImage( "art/intrface/cha_sex.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class Male : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 17, 16 );
            SetSize( 45, 43 );
            SetPressedImage( "art/intrface/male_button_down.png" );
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_MALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Female" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_MALE );
        }
    }

    class Female : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 76, 16 );
            SetSize( 45, 42 );
            SetPressedImage( "art/intrface/female_button_down.png" );
        }

        void OnLMouseClick() override
        {
            __RegParams[ ST_GENDER ] = GENDER_FEMALE;
            GenParams();
            SetSwitch( true );
            Parent.FindButton( "Male" ).SetSwitch( false );
        }

        void OnActiveChanged() override
        {
            if( Active )
                SetSwitch( __RegParams[ ST_GENDER ] == GENDER_FEMALE );
        }
    }

    class CharacterSelect : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 45, 62 );
        }
    }

    class CharSelButton : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 328, -1 );
            SetSize( 31, 29 );
            SetPressedImage( "art/intrface/character_select_btn2.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterSelectPopUp" ).SetActive( true );
        }
    }

    class CharacterSelectPopUp : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( -55, 50 );
            SetSize( 135, 175 );
            SetBackgroundImage( "art/intrface/character_select_main.png" );
        }

        void OnShow( dictionary@ params ) override
        {
            if( ActiveSelf )
                SetActive( false );
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( Active && !IsMouseHit() )
                SetActive( false );
        }
    }

    class ChaButtonUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 30 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/character_select_up2.png" );
        }
    }

    class ChaButtonDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 101, 53 );
            SetSize( 22, 23 );
            SetPressedImage( "art/intrface/character_select_dn2.png" );
        }
    }

    class ChaSelClose : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 75, 138 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            Screen.FindPanel( "CharacterSelectPopUp" ).SetActive( false );
        }
    }

    class MessageBox : GUIMessageBox
    {
        void OnConstruct() override
        {
            SetPosition( 10, 9 );
            SetSize( 620, 93 );
            SetAnchor( ANCHOR_LEFT| ANCHOR_TOP );
        }
    }

    void Init( int screenIndex )
    {
        Character _Character();
        _Character.Init( null );
        Main _Main();
        _Main.Init( _Character );
        TLJRegister _TLJRegister();
        _TLJRegister.Init( _Main );
        BaseStats _BaseStats();
        _BaseStats.Init( _TLJRegister );
        BaseStat _BaseStat();
        _BaseStat.Init( _BaseStats );
        StatName _StatName();
        _StatName.Init( _BaseStat );
        StatValue _StatValue();
        _StatValue.Init( _BaseStat );
        StatValueDesc _StatValueDesc();
        _StatValueDesc.Init( _BaseStat );
        StatInc _StatInc();
        _StatInc.Init( _BaseStat );
        StatDec _StatDec();
        _StatDec.Init( _BaseStat );
        BaseStatPoints _BaseStatPoints();
        _BaseStatPoints.Init( _TLJRegister );
        Title1 _Title1();
        _Title1.Init( _BaseStatPoints );
        StatPointsValue _StatPointsValue();
        _StatPointsValue.Init( _BaseStatPoints );
        HealthStats _HealthStats();
        _HealthStats.Init( _TLJRegister );
        HealthStat _HealthStat();
        _HealthStat.Init( _HealthStats );
        StatDesc _StatDesc();
        _StatDesc.Init( _HealthStat );
        ExtendedStats _ExtendedStats();
        _ExtendedStats.Init( _TLJRegister );
        ExtendedStat _ExtendedStat();
        _ExtendedStat.Init( _ExtendedStats );
        StatName2 _StatName2();
        _StatName2.Init( _ExtendedStat );
        StatValue2 _StatValue2();
        _StatValue2.Init( _ExtendedStat );
        Traits _Traits();
        _Traits.Init( _TLJRegister );
        TraitsLeft _TraitsLeft();
        _TraitsLeft.Init( _Traits );
        TraitLeft _TraitLeft();
        _TraitLeft.Init( _TraitsLeft );
        Switcher1 _Switcher1();
        _Switcher1.Init( _TraitLeft );
        TraitName1 _TraitName1();
        _TraitName1.Init( _TraitLeft );
        TraitsRight _TraitsRight();
        _TraitsRight.Init( _Traits );
        TraitRight _TraitRight();
        _TraitRight.Init( _TraitsRight );
        Switcher2 _Switcher2();
        _Switcher2.Init( _TraitRight );
        TraitName2 _TraitName2();
        _TraitName2.Init( _TraitRight );
        Skills _Skills();
        _Skills.Init( _TLJRegister );
        Skill _Skill();
        _Skill.Init( _Skills );
        TagSkill _TagSkill();
        _TagSkill.Init( _Skill );
        SkillName _SkillName();
        _SkillName.Init( _Skill );
        SkillValue _SkillValue();
        _SkillValue.Init( _Skill );
        Title3 _Title3();
        _Title3.Init( _Skills );
        UnspentSkillPoints _UnspentSkillPoints();
        _UnspentSkillPoints.Init( _TLJRegister );
        Title2 _Title2();
        _Title2.Init( _UnspentSkillPoints );
        UnspentValue _UnspentValue();
        _UnspentValue.Init( _UnspentSkillPoints );
        Tip _Tip();
        _Tip.Init( _TLJRegister );
        Image _Image();
        _Image.Init( _Tip );
        Name _Name();
        _Name.Init( _Tip );
        Desc _Desc();
        _Desc.Init( _Tip );
        Buttons _Buttons();
        _Buttons.Init( _TLJRegister );
        Print _Print();
        _Print.Init( _Buttons );
        Button1 _Button1();
        _Button1.Init( _Print );
        Text7 _Text7();
        _Text7.Init( _Print );
        Done _Done();
        _Done.Init( _Buttons );
        Button2 _Button2();
        _Button2.Init( _Done );
        Text8 _Text8();
        _Text8.Init( _Done );
        Back _Back();
        _Back.Init( _Buttons );
        Button3 _Button3();
        _Button3.Init( _Back );
        Text9 _Text9();
        _Text9.Init( _Back );
        CharacterName _CharacterName();
        _CharacterName.Init( _TLJRegister );
        Button4 _Button4();
        _Button4.Init( _CharacterName );
        CharacterText _CharacterText();
        _CharacterText.Init( _CharacterName );
        CharacterAge _CharacterAge();
        _CharacterAge.Init( _TLJRegister );
        Button5 _Button5();
        _Button5.Init( _CharacterAge );
        AgeText _AgeText();
        _AgeText.Init( _CharacterAge );
        CharacterGender _CharacterGender();
        _CharacterGender.Init( _TLJRegister );
        Button6 _Button6();
        _Button6.Init( _CharacterGender );
        GenderText _GenderText();
        _GenderText.Init( _CharacterGender );
        CharacterNamePopUp _CharacterNamePopUp();
        _CharacterNamePopUp.Init( _TLJRegister );
        ChaName _ChaName();
        _ChaName.Init( _CharacterNamePopUp );
        ChaPassword _ChaPassword();
        _ChaPassword.Init( _CharacterNamePopUp );
        ChaTrollButton _ChaTrollButton();
        _ChaTrollButton.Init( _CharacterNamePopUp );
        CharacterAgePopUp _CharacterAgePopUp();
        _CharacterAgePopUp.Init( _TLJRegister );
        IncAge _IncAge();
        _IncAge.Init( _CharacterAgePopUp );
        DecAge _DecAge();
        _DecAge.Init( _CharacterAgePopUp );
        AgeValue _AgeValue();
        _AgeValue.Init( _CharacterAgePopUp );
        CharacterGenderPopUp _CharacterGenderPopUp();
        _CharacterGenderPopUp.Init( _TLJRegister );
        Male _Male();
        _Male.Init( _CharacterGenderPopUp );
        Female _Female();
        _Female.Init( _CharacterGenderPopUp );
        CharacterSelect _CharacterSelect();
        _CharacterSelect.Init( _TLJRegister );
        CharSelButton _CharSelButton();
        _CharSelButton.Init( _CharacterSelect );
        CharacterSelectPopUp _CharacterSelectPopUp();
        _CharacterSelectPopUp.Init( _TLJRegister );
        ChaButtonUp _ChaButtonUp();
        _ChaButtonUp.Init( _CharacterSelectPopUp );
        ChaButtonDown _ChaButtonDown();
        _ChaButtonDown.Init( _CharacterSelectPopUp );
        ChaSelClose _ChaSelClose();
        _ChaSelClose.Init( _CharacterSelectPopUp );
        MessageBox _MessageBox();
        _MessageBox.Init( _Main );
        GUI_RegisterScreen( screenIndex, _Character );
    }
}

namespace Options
{
    void SaveOptions()
    {
        string[] savedOptions =
        {
            "Language", "" + CustomCall( "GetLanguage" ),
            "ScreenWidth", "" + __ScreenWidth,
            "ScreenHeight", "" + __ScreenHeight,
            "FullScreen", "" + __FullScr,
            "AlwaysOnTop", "" + __AlwaysOnTop,
            "MusicVolume", "" + __MusicVolume,
            "SoundVolume", "" + __SoundVolume,
            "AlwaysRun", "" + __AlwaysRun,
            "DefaultCombatMode", "" + __DefaultCombatMode,
            "RemoteHost", "" + __Host,
            "RemotePort", "" + __Port,
            "ProxyType", "" + __ProxyType,
            "ProxyHost", "" + __ProxyHost,
            "ProxyPort", "" + __ProxyPort,
            "ProxyUser", "" + __ProxyUser,
            "ProxyPass", "" + __ProxyPass
        };
        SetUserConfig( savedOptions );
    }

    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetSize( 800, 600 );
            SetDock( DOCK_FILL );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 80, 60 );
            SetSize( 640, 480 );
            SetBackgroundImage( "art/intrface/main_menu_options.png" );
        }
    }

    class Options : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 640, 440 );
        }
    }

    class Game : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, 20 );
        }
    }

    class Language : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 10 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE ) );
        }
    }

    class Russian : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "russ" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage russ" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text1 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_RUSSIAN ) );
        }
    }

    class English : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( CustomCall( "GetLanguage" ) == "engl" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetLanguage engl" );
            GUI_Callback_OnLanguageChanged();
            SaveOptions();
        }
    }

    class Text2 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_LANGUAGE_ENGLISH ) );
        }
    }

    int[] ScreenWidthOpt = { 800, 1024, 1280, 1280, 1366, 1920 };
    int[] ScreenHeightOpt = { 600, 768, 800, 1024, 768, 1080 };

    class Resolution : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 40 );
            SetText( MSG_GAME( STR_OPTIONS_RESOLUTION ) );
        }
    }

    class Resolution1 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 0 ] && __ScreenHeight == ScreenHeightOpt[ 0 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 0 ] + " " + ScreenHeightOpt[ 0 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text14 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 0 ] + "x" + ScreenHeightOpt[ 0 ] );
        }
    }

    class Resolution2 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 240, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 1 ] && __ScreenHeight == ScreenHeightOpt[ 1 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 1 ] + " " + ScreenHeightOpt[ 1 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text15 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 1 ] + "x" + ScreenHeightOpt[ 1 ] );
        }
    }

    class Resolution3 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 300, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 2 ] && __ScreenHeight == ScreenHeightOpt[ 2 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 2 ] + " " + ScreenHeightOpt[ 2 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text16 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 2 ] + "x" + ScreenHeightOpt[ 2 ] );
        }
    }

    class Resolution4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 360, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 3 ] && __ScreenHeight == ScreenHeightOpt[ 3 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 3 ] + " " + ScreenHeightOpt[ 3 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text17 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 3 ] + "x" + ScreenHeightOpt[ 3 ] );
        }
    }

    class Resolution5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 420, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 4 ] && __ScreenHeight == ScreenHeightOpt[ 4 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 4 ] + " " + ScreenHeightOpt[ 4 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text18 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 4 ] + "x" + ScreenHeightOpt[ 4 ] );
        }
    }

    class Resolution6 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ScreenWidth == ScreenWidthOpt[ 5 ] && __ScreenHeight == ScreenHeightOpt[ 5 ] );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SetResolution " + ScreenWidthOpt[ 5 ] + " " + ScreenHeightOpt[ 5 ] );
            GUI_Callback_OnResolutionChanged();
            SaveOptions();
        }
    }

    class Text19 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( ScreenWidthOpt[ 5 ] + "x" + ScreenHeightOpt[ 5 ] );
        }
    }

    class FullScreen : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 70 );
            SetText( MSG_GAME( STR_OPTIONS_FULL_SCREEN ) );
        }
    }

    class CheckBox1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __FullScr );
        }

        void OnLMouseClick() override
        {
            CustomCall( "SwitchFullscreen" );
            SaveOptions();
        }
    }

    class AlwaysOnTop : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 100 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_ON_TOP ) );
        }
    }

    class CheckBox2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysOnTop );
        }

        void OnLMouseClick() override
        {
            __AlwaysOnTop = IsChecked;
            SaveOptions();
        }
    }

    class Music : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 130 );
            SetText( MSG_GAME( STR_OPTIONS_MUSIC ) );
        }
    }

    class MusicDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume > 0 )
            {
                __MusicVolume--;
                 SaveOptions();
            }
        }
    }

    class MusicInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __MusicVolume < 100 )
            {
                __MusicVolume++;
                SaveOptions();
            }
        }
    }

    class MusicValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __MusicVolume;
        }
    }

    class Sound : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 160 );
            SetText( MSG_GAME( STR_OPTIONS_SOUND ) );
        }
    }

    class SoundDec : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume > 0 )
            {
                __SoundVolume--;
                SaveOptions();
            }
        }
    }

    class SoundInc : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMousePressed() override
        {
            if( __SoundVolume < 100 )
            {
                __SoundVolume++;
                SaveOptions();
            }
        }
    }

    class SoundValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 235, 0 );
        }

        string@ get_Text() override
        {
            return "" + __SoundVolume;
        }
    }

    class AlwaysRun : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 190 );
            SetText( MSG_GAME( STR_OPTIONS_ALWAYS_RUN ) );
        }
    }

    class CheckBox3 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __AlwaysRun );
        }

        void OnLMouseClick() override
        {
            __AlwaysRun = IsChecked;
            SaveOptions();
        }
    }

    class CombatMode : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 220 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE ) );
        }
    }

    class Both : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_ANY );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_ANY;
            SaveOptions();
        }
    }

    class Text5 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_BOTH ) );
        }
    }

    class RealTime : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_REAL_TIME );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_REAL_TIME;
            SaveOptions();
        }
    }

    class Text6 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_RT ) );
        }
    }

    class TurnBased : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, -8 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __DefaultCombatMode == COMBAT_MODE_TURN_BASED );
        }

        void OnLMouseClick() override
        {
            __DefaultCombatMode = COMBAT_MODE_TURN_BASED;
            SaveOptions();
        }
    }

    class Text7 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MODE_TB ) );
        }
    }

    class CombatMessages : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 250 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES ) );
        }
    }

    class Verbose : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType == 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 0;
            SaveOptions();
        }
    }

    class Text8 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_FULL ) );
        }
    }

    class Brief : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 330, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __CombatMessagesType != 0 );
        }

        void OnLMouseClick() override
        {
            __CombatMessagesType = 1;
            SaveOptions();
        }
    }

    class Text9 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_COMBAT_MESSAGES_SHORT ) );
        }
    }

    class GameServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 280 );
            SetText( MSG_GAME( STR_OPTIONS_GAME_SERVER ) );
        }
    }

    class Panel1 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel2 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Host : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __Host );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class Port : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __Port );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Port = Text.toInt( __Port );
            Text = "" + __Port;
            SaveOptions();
        }
    }

    class ProxyType : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 310 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE ) );
        }
    }

    class ProxyNone : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 0 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 0;
            SaveOptions();
        }
    }

    class Text10 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_NONE ) );
        }
    }

    class ProxySocks4 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 280, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 1 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 1;
            SaveOptions();
        }
    }

    class Text11 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS4 ) );
        }
    }

    class ProxySocks5 : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 380, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 2 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 2;
            SaveOptions();
        }
    }

    class Text12 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_SOCKS5 ) );
        }
    }

    class ProxyHttp : GUIRadioButton
    {
        void OnConstruct() override
        {
            SetPosition( 480, 0 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
            SetChecked( __ProxyType == 3 );
        }

        void OnLMouseClick() override
        {
            __ProxyType = 3;
            SaveOptions();
        }
    }

    class Text13 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_TYPE_HTTP ) );
        }
    }

    class ProxyServer : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 340 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_SERVER ) );
        }
    }

    class Panel3 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 250, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel4 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 450, -2 );
            SetSize( 50, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyHost : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 250, 12 );
            SetText( __ProxyHost );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __Host = Text;
            SaveOptions();
        }
    }

    class ProxyPort : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 450, 0 );
            SetSize( 50, 12 );
            SetText( "" + __ProxyPort );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPort = Text.toInt( __ProxyPort );
            Text = "" + __ProxyPort;
            SaveOptions();
        }
    }

    class ProxyAccess : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 50, 370 );
            SetText( MSG_GAME( STR_OPTIONS_PROXY_ACCESS ) );
        }
    }

    class Panel5 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 180, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class Panel6 : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 350, -2 );
            SetSize( 150, 12 );
            SetBackgroundImage( "art/intrface/black_pixel.png", IMAGE_LAYOUT_STRETCH );
        }
    }

    class ProxyLogin : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 180, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyUser );
            SetTextFlags( FT_CENTERX );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyUser = Text;
            SaveOptions();
        }
    }

    class ProxyPassword : GUITextInput
    {
        void OnConstruct() override
        {
            SetPosition( 350, 0 );
            SetSize( 150, 12 );
            SetText( __ProxyPass );
            SetTextFlags( FT_CENTERX );
            SetInputPassword( "#" );
        }

        void OnInput( uint8 key, string@ text ) override
        {
            __ProxyPass = Text;
            SaveOptions();
        }
    }

    class Back : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 460, 450 );
            SetSize( 17, 11 );
            SetBackgroundImage( "art/intrface/opt_button_up.png" );
            SetPressedImage( "art/intrface/opt_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_MAIN_SCREEN_LOGIN );
        }
    }

    class Text3 : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 25, 0 );
            SetText( MSG_GAME( STR_OPTIONS_BACK ) );
            SetTextFont( FONT_FAT );
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        Options _Options();
        _Options.Init( _Main );
        Game _Game();
        _Game.Init( _Options );
        Language _Language();
        _Language.Init( _Game );
        Russian _Russian();
        _Russian.Init( _Language );
        Text1 _Text1();
        _Text1.Init( _Russian );
        English _English();
        _English.Init( _Language );
        Text2 _Text2();
        _Text2.Init( _English );
        Resolution _Resolution();
        _Resolution.Init( _Game );
        Resolution1 _Resolution1();
        _Resolution1.Init( _Resolution );
        Text14 _Text14();
        _Text14.Init( _Resolution1 );
        Resolution2 _Resolution2();
        _Resolution2.Init( _Resolution );
        Text15 _Text15();
        _Text15.Init( _Resolution2 );
        Resolution3 _Resolution3();
        _Resolution3.Init( _Resolution );
        Text16 _Text16();
        _Text16.Init( _Resolution3 );
        Resolution4 _Resolution4();
        _Resolution4.Init( _Resolution );
        Text17 _Text17();
        _Text17.Init( _Resolution4 );
        Resolution5 _Resolution5();
        _Resolution5.Init( _Resolution );
        Text18 _Text18();
        _Text18.Init( _Resolution5 );
        Resolution6 _Resolution6();
        _Resolution6.Init( _Resolution );
        Text19 _Text19();
        _Text19.Init( _Resolution6 );
        FullScreen _FullScreen();
        _FullScreen.Init( _Game );
        CheckBox1 _CheckBox1();
        _CheckBox1.Init( _FullScreen );
        AlwaysOnTop _AlwaysOnTop();
        _AlwaysOnTop.Init( _Game );
        CheckBox2 _CheckBox2();
        _CheckBox2.Init( _AlwaysOnTop );
        Music _Music();
        _Music.Init( _Game );
        MusicDec _MusicDec();
        _MusicDec.Init( _Music );
        MusicInc _MusicInc();
        _MusicInc.Init( _Music );
        MusicValue _MusicValue();
        _MusicValue.Init( _Music );
        Sound _Sound();
        _Sound.Init( _Game );
        SoundDec _SoundDec();
        _SoundDec.Init( _Sound );
        SoundInc _SoundInc();
        _SoundInc.Init( _Sound );
        SoundValue _SoundValue();
        _SoundValue.Init( _Sound );
        AlwaysRun _AlwaysRun();
        _AlwaysRun.Init( _Game );
        CheckBox3 _CheckBox3();
        _CheckBox3.Init( _AlwaysRun );
        CombatMode _CombatMode();
        _CombatMode.Init( _Game );
        Both _Both();
        _Both.Init( _CombatMode );
        Text5 _Text5();
        _Text5.Init( _Both );
        RealTime _RealTime();
        _RealTime.Init( _CombatMode );
        Text6 _Text6();
        _Text6.Init( _RealTime );
        TurnBased _TurnBased();
        _TurnBased.Init( _CombatMode );
        Text7 _Text7();
        _Text7.Init( _TurnBased );
        CombatMessages _CombatMessages();
        _CombatMessages.Init( _Game );
        Verbose _Verbose();
        _Verbose.Init( _CombatMessages );
        Text8 _Text8();
        _Text8.Init( _Verbose );
        Brief _Brief();
        _Brief.Init( _CombatMessages );
        Text9 _Text9();
        _Text9.Init( _Brief );
        GameServer _GameServer();
        _GameServer.Init( _Game );
        Panel1 _Panel1();
        _Panel1.Init( _GameServer );
        Panel2 _Panel2();
        _Panel2.Init( _GameServer );
        Host _Host();
        _Host.Init( _GameServer );
        Port _Port();
        _Port.Init( _GameServer );
        ProxyType _ProxyType();
        _ProxyType.Init( _Game );
        ProxyNone _ProxyNone();
        _ProxyNone.Init( _ProxyType );
        Text10 _Text10();
        _Text10.Init( _ProxyNone );
        ProxySocks4 _ProxySocks4();
        _ProxySocks4.Init( _ProxyType );
        Text11 _Text11();
        _Text11.Init( _ProxySocks4 );
        ProxySocks5 _ProxySocks5();
        _ProxySocks5.Init( _ProxyType );
        Text12 _Text12();
        _Text12.Init( _ProxySocks5 );
        ProxyHttp _ProxyHttp();
        _ProxyHttp.Init( _ProxyType );
        Text13 _Text13();
        _Text13.Init( _ProxyHttp );
        ProxyServer _ProxyServer();
        _ProxyServer.Init( _Game );
        Panel3 _Panel3();
        _Panel3.Init( _ProxyServer );
        Panel4 _Panel4();
        _Panel4.Init( _ProxyServer );
        ProxyHost _ProxyHost();
        _ProxyHost.Init( _ProxyServer );
        ProxyPort _ProxyPort();
        _ProxyPort.Init( _ProxyServer );
        ProxyAccess _ProxyAccess();
        _ProxyAccess.Init( _Game );
        Panel5 _Panel5();
        _Panel5.Init( _ProxyAccess );
        Panel6 _Panel6();
        _Panel6.Init( _ProxyAccess );
        ProxyLogin _ProxyLogin();
        _ProxyLogin.Init( _ProxyAccess );
        ProxyPassword _ProxyPassword();
        _ProxyPassword.Init( _ProxyAccess );
        Back _Back();
        _Back.Init( _Main );
        Text3 _Text3();
        _Text3.Init( _Back );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Game_TLJ
{
    string@ FormatXXX( int value )
    {
        string@ result = "";
        int offs = 0;
        if( value >= 0 )
        {
            result += EncodeUTF8( '9' + 4 );
        }
        else
        {
            offs = 0x20;
            result += EncodeUTF8( '9' + offs + 3 );
            value = -value;
        }
    
        value = CLAMP( value, 0, 999 );
    
        result += EncodeUTF8( '0' + offs + value / 100 );
        result += EncodeUTF8( '0' + offs + value / 10 % 10 );
        result += EncodeUTF8( '0' + offs + value % 10 );
    
        return result;
    }

    class Screen : GUIScreen
    {
        bool isHitIfaceOnMouseDown;

        void OnConstruct() override
        {
            SetModal( true );
            SetCanMove( true, false );
            SetDock( DOCK_FILL );
            SetNotHittable( true );
        }

        void OnInit() override
        {
            SetSize(__ScreenWidth, __ScreenHeight);
        }

        void OnGlobalMouseDown( int button ) override
        {
            if( __MapZooming && __SpritesZoomMin != __SpritesZoomMax )
            {
                if( button == MOUSE_BUTTON_WHEEL_UP )
                    ChangeZoom( __SpritesZoom - 0.01 );
                else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                    ChangeZoom( __SpritesZoom + 0.01 );
                else if( button == MOUSE_BUTTON_MIDDLE )
                    ChangeZoom( 1.0 );
            }
            
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseDown" );
                else if( button == MOUSE_BUTTON_RIGHT )
                    isHitIfaceOnMouseDown = ( FindMouseHit() !is null );
            }
        }

        void OnGlobalMouseUp( int button ) override
        {
            if( GetChild( 0 ).FindMouseHit() is null )
            {
                if( button == MOUSE_BUTTON_LEFT )
                    CustomCall( "GameLMouseUp" );
                else if( button == MOUSE_BUTTON_RIGHT && !isHitIfaceOnMouseDown )
                    NextCursor();
            }
        }

        void OnGlobalMouseMove() override
        {
            CustomCall( "ProcessMouseScroll" );
        }
    }

    class Main : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -1, 313 );
            SetSize( 1024, 101 );
            SetCheckTransparentOnHit( true );
            SetBackgroundImage( "art/intrface/iface_tlj_main.png" );
        }

        void OnInit() override
        {
            //SetSize(1024, 101);
            SetPosition((__ScreenWidth - get_Width()) / 2, __ScreenHeight - _BaseHeight);
            //Log("Pyromother!" + get_Parent().get_Width() + "" + get_Parent().get_Height());
        }
    }

    class Console : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 0, -37 );
        }
    }

    class ConsoleImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetSize( 760, 38 );
            SetBackgroundImage( "art/intrface/console.png" );
        }
    }

    class ConsoleText : GUIConsole
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 13, 14 );
            SetNotHittable( true );
        }

        void OnActiveChanged() override
        {
            Parent.Find( "ConsoleImage" ).SetActive( ActiveSelf ); 
        }
    }

    class MessageBoxExtended : GUIPanel
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 2, -111 );
            SetSize( 292, 123 );
            SetBackgroundImage( "art/intrface/iface_add_msg.png" );
        }
    }

    class MessageBoxText : GUIMessageBox
    {
        void FiltersChanged()
        {
            int[] messageTypes;
            if( cast< GUICheckBox >( Parent.Find( "Filter1" ) ).IsChecked )
                messageTypes.insertLast( FOMB_TALK );
            if( cast< GUICheckBox >( Parent.Find( "Filter2" ) ).IsChecked )
                messageTypes.insertLast( FOMB_COMBAT_RESULT );
        
            if( messageTypes.length() == 0 )
                messageTypes.insertLast( FOMB_ALL );
        
            SetDisplayedMessages( messageTypes );
        }

        void OnConstruct() override
        {
            SetPosition( 11, 12 );
            SetSize( 275, 56 );
            SetAnchor( ANCHOR_TOP );
        }
    }

    class ExtendMessageBox : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 254, 80 );
            SetSize( 16, 12 );
            SetPressedImage( "art/intrface/yellowDot.png" );
        }

        void OnCheckedChanged() override
        {
            GUIObject@ messageBoxText = Parent.Find( "MessageBoxText" );
            GUIObject@ messageBoxExtended = Parent.Find( "MessageBoxExtended" );
            GUIObject@ console = Parent.Find( "Console" );
            
            messageBoxText.SetSize( messageBoxText.Width, IsChecked ? 170 : 54 );
            messageBoxText.SetPosition( messageBoxText.PosX, IsChecked ? -104 : 12 );
            messageBoxExtended.SetActive( IsChecked );
            console.SetPosition( 0, IsChecked ? -122 : -22 );
        }
    }

    class Filter1 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 12, 79 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class Filter2 : GUICheckBox
    {
        void OnConstruct() override
        {
            SetPosition( 12, 87 );
            SetSize( 11, 6 );
            SetPressedImage( "art/intrface/iface_small_btn.png" );
        }

        void OnCheckedChanged() override
        {
            cast< MessageBoxText >( Parent.Find( "MessageBoxText" ) ).FiltersChanged();
        }
    }

    class GameMenu : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 742, 71 );
            SetSize( 19, 28 );
            SetPressedImage( "art/intrface/menu.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MENU );
        }
    }

    class Inventory : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 210, 79 );
            SetSize( 36, 15 );
            SetPressedImage( "art/intrface/inv.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_INVENTORY );
        }
    }

    class SwitchItems : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 921, 6 );
            SetSize( 20, 20 );
            SetPressedImage( "art/intrface/btn_skill.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "ChangeSlot" );
        }
    }

    class Skills : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 956, 6 );
            SetSize( 20, 20 );
            SetPressedImage( "art/intrface/btn_skill.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_SKILLBOX );
        }
    }

    class Map : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 163, 78 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/map.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_MINIMAP );
        }
    }

    class Character : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 25, 79 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/cha.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_CHARACTER );
            CritterCl@ chosen = GetChosen();
            if( chosen !is null && chosen.ParamBase[ ST_UNSPENT_PERKS ] > 0 )
                ShowScreen( CLIENT_SCREEN_PERK );
        }
    }

    class PipBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 118, 78 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/pip.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_PIP_BOY );
        }
    }

    class FixBoy : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 72, 78 );
            SetSize( 38, 17 );
            SetPressedImage( "art/intrface/fix.png" );
        }

        void OnLMouseClick() override
        {
            ShowScreen( CLIENT_SCREEN_FIX_BOY );
        }
    }

    class Combat : GUIPanel
    {
        bool CombatActive;

        void OnConstruct() override
        {
            SetPosition( 963, 41 );
            SetBackgroundImage( "art/intrface/combat.fofrm" );
        }

        void OnInit() override
        {
            BackgroundImage.SetFirstFrame();
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            bool combatActive = ( chosen !is null && chosen.Param[ TO_BATTLE ] != 0 );
            if( combatActive != CombatActive )
            {
                CombatActive = combatActive;
                BackgroundImage.PlayAnimation( false, !combatActive );
                PlaySound( "ICIBOXX1" );
            }
            
            GetChild( 0 ).SetActive( CombatActive && CustomCall( "IsTurnBasedMyTurn" ) == "true" );
            GetChild( 1 ).SetActive( CombatActive && IsTurnBased() );
        }
    }

    class EndTurn : GUIButton
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 5 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_turn_button_dn.png" );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndTurn" );
        }
    }

    class EndCombat : GUICheckBox
    {
        void OnConstruct() override
        {
            SetActive( false );
            SetPosition( 10, 27 );
            SetSize( 38, 22 );
            SetPressedImage( "art/intrface/end_combat_button_dn.png" );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            SetChecked( IsTurnBased() && chosen !is null && chosen.ParamBase[ MODE_END_COMBAT ] != 0 );
        }

        void OnLMouseClick() override
        {
            CustomCall( "EndCombat" );
        }
    }

    class ActionPoints : GUIGrid
    {
        void OnConstruct() override
        {
            SetPosition( 475, 40 );
            SetCellPrototype( "Led" );
            SetGridSize( 10 );
            SetColumns( 10 );
            SetPadding( 9, 0 );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            int ap = ( chosen !is null ? chosen.Param[ ST_CURRENT_AP ] : 0 );
            uint moveAp = ( IsTurnBased() && chosen !is null ? chosen.Param[ ST_MOVE_AP ] : 0 );
            for( uint i = 0; i < Cells.length(); i++ )
            {
                uint absAp = uint( ABS( ap ) );
                bool active = ( i < absAp + moveAp );
                Cells[ i ].SetActive( active );
                if( active )
                {
                    Cells[ i ].GetChild( 0 ).SetActive( ap >= 0 && i < absAp ); // Green
                    Cells[ i ].GetChild( 1 ).SetActive( ap < 0 && i < absAp ); // Red
                    Cells[ i ].GetChild( 2 ).SetActive( i >= absAp ); // Yellow
                }
            }
        }
    }

    class Led : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class LedGreen : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -167, 39 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/greenDot.png" );
        }
    }

    class LedRed : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -167, 15 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/redDot.png" );
        }
    }

    class LedYellow : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -167, 27 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/yellowDot.png" );
        }
    }

    class BreakTime : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 571, 40 );
        }

        void OnDraw() override
        {
            CritterCl@ chosen = GetChosen();
            GetChild( 0 ).SetActive( chosen !is null && chosen.IsBusy() );
        }
    }

    class BreakTimeLed : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 32, 38 );
            SetSize( 16, 12 );
            SetBackgroundImage( "art/intrface/redDot.png" );
        }
    }

    class HitPoints : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 614, 14 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_IFACE );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Param[ ST_CURRENT_HP ];
            return FormatXXX( result );
        }
    }

    class ArmorClass : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 301, 14 );
            SetTextFont( FONT_NUM );
            SetTextColor( COLOR_GRAY );
        }

        string@ get_Text() override
        {
            int result = 0;
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
                result = chosen.Param[ ST_ARMOR_CLASS ];
            return FormatXXX( result );
        }
    }

    class MainItemPlate : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 765, 34 );
            SetSize( 184, 67 );
            SetPressedImage( "art/intrface/iface_hand.png" );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT || button == MOUSE_BUTTON_RIGHT )
                GetChild( 0 ).SetPosition( 0, -2 );
        }

        void OnMouseUp( int button, bool lost ) override
        {
            GetChild( 0 ).SetPosition( 0, 0 );
        }

        void OnMouseClick( int button ) override
        {
            if( button == MOUSE_BUTTON_LEFT )
                CustomCall( "UseMainItem" );
            else if( button == MOUSE_BUTTON_RIGHT )
                CustomCall( "NextItemMode" );
            else if( button == MOUSE_BUTTON_WHEEL_UP )
                CustomCall( "NextItemMode Prev" );
            else if( button == MOUSE_BUTTON_WHEEL_DOWN )
                CustomCall( "NextItemMode" );
        }
    }

    class MainItemSlot : GUIItemView
    {
        void OnConstruct() override
        {
            SetNotHittable( true );
            SetCellPrototype( "MainItemSlotCell" );
            SetGridSize( 1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class MainItemSlotCell : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 188, 67 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint picInv = 0;
            if( item !is null )
                picInv = ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv );
            SetBackgroundImage( picInv, IMAGE_LAYOUT_ZOOM );
        }
    }

    class AmmoCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 38 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.GetType() == ITEM_TYPE_WEAPON ? "" + item.AmmoCount : "" );
        }
    }

    class DeteriorationValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 7, 52 );
            SetNotHittable( true );
            SetTextFont( FONT_SPECIAL );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetText( item !is null && item.IsDeteriorable() ? item.Deterioration + "%" : "" );
        }
    }

    class UsePic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 159, 4 );
            SetSize( 17, 12 );
            SetAnchor( ANCHOR_RIGHT| ANCHOR_TOP );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint usePic = 0;
            
            CritterCl@ chosen = GetChosen();
            uint8 mode;
            const ProtoItem@ proto;
            uint flags;
            if( item !is null )
            {
                mode = item.Mode;
                @proto = item.Proto;
                flags = item.Flags;
            }
            else if( chosen !is null )
            {
                @proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                flags = proto.Flags;
            }
            
            if( item !is null || chosen !is null )
            {
                int use = _WeaponModeUse( mode );
                if( proto.Type == ITEM_TYPE_WEAPON )
                {
                    if( use == USE_RELOAD )
                        usePic = GetStrHash( "art\\intrface\\reload.frm" );
                    else if( use == USE_USE )
                        usePic = GetStrHash( "art\\intrface\\useon.frm" );
                    else if( use < MAX_USES )
                        usePic = _WeaponPicUse( proto, use );
                }
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE_ON_SMTH ) )
                    usePic = GetStrHash( "art\\intrface\\useon.frm" );
                if( usePic == 0 && FLAG( item.Flags, ITEM_CAN_USE ) )
                    usePic = GetStrHash( "art\\intrface\\uset.frm" );
            }
            
            BackgroundImage.Load( usePic );
            SetPosition( 180 - BackgroundImage.Width, PosY );
        }
    }

    import uint GetItemUseApCost( CritterCl& cr, ItemCl& item, uint8 mode ) from "parameters";
    import uint GetProtoItemUseApCost( CritterCl& cr, ProtoItem& proto, uint8 mode ) from "parameters";

    class ApCost : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 29, -110 );
            SetNotHittable( true );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint apCost = 0;
            if( item !is null && item.Accessory == ACCESSORY_CRITTER )
            {
                apCost = GetItemUseApCost( GetCritter( item.CritId ), item, item.Mode );
            }
            else if( item is null )
            {
                CritterCl@ chosen = GetChosen();
                if( chosen !is null )
                {
                    uint8 mode = 0;
                    ProtoItem@ proto = chosen.GetSlotProto( SLOT_HAND1, mode );
                    apCost = GetProtoItemUseApCost( chosen, proto, mode );
                }
            }
            
            SetActive( apCost > 0 );
            if( apCost > 0 )
                FindText( "ApCostValue" ).SetText( "" + apCost );
        }
    }

    class ApCostImage : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( -13, 115 );
            SetSize( 17, 12 );
            SetBackgroundImage( "art/intrface/ap_pic.png" );
        }
    }

    class ApCostValue : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( -22, 120 );
            SetTextFont( FONT_SAND_NUM );
            SetTextColor( COLOR_IFACE );
        }
    }

    class AimPic : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 161, 46 );
            SetSize( 18, 18 );
            SetNotHittable( true );
            SetBackgroundImage( "art/intrface/aim_pic.png" );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            CritterCl@ chosen = GetChosen();
            uint8 mode = 0;
            if( item !is null )
                mode = item.Mode;
            else if( chosen !is null )
                chosen.GetSlotProto( SLOT_HAND1, mode );
            
            BackgroundImage.Hidden = ( _WeaponModeAim( mode ) == HIT_LOCATION_NONE );
        }
    }

    class Indicators : GUIPanel
    {
        #define INDICATOR_LINES          ( 0 )
        #define INDICATOR_NUMBERS        ( 1 )
        #define INDICATOR_BOTH           ( 2 )
        #define INDICATOR_CHANGE_TICK    ( 35 )
        
        void DrawIndicator( int[] rect, int[]& points, uint color, int cur, int max, uint& tick, bool isVertical, bool fromTopOrLeft )
        {
            int percent = 0;
            if( max != 0 )
            {
                percent = cur * 100 / max;
                percent = CLAMP( percent, 0, 100 );
            }
        
            if( GetTick() >= tick )
            {
                uint pointsCount = ( isVertical ? rect[ 3 ] : rect[ 2 ] ) / 2 * percent / 100;
                if( pointsCount == 0 && percent > 0 )
                    pointsCount = 1;
        
                if( points.length() / 3 != pointsCount )
                {
                    if( pointsCount > points.length() / 3 )
                        pointsCount = points.length() / 3 + 1;
                    else
                        pointsCount = points.length() / 3 - 1;
        
                    points.resize( pointsCount * 3 );
                    for( uint i = 0; i < pointsCount; i++ )
                    {
                        int x, y;
                        if( isVertical )
                        {
                            x = rect[ 0 ];
                            if( fromTopOrLeft )
                                y = rect[ 1 ] + i * 2;
                            else
                                y = rect[ 1 ] + rect[ 3 ] - i * 2;
                        }
                        else
                        {
                            y = rect[ 1 ];
                            if( fromTopOrLeft )
                                x = rect[ 0 ] + i * 2;
                            else
                                x = rect[ 0 ] + rect[ 2 ] - i * 2;
                        }
                        points[ i * 3 + 0 ] = x;
                        points[ i * 3 + 1 ] = y;
                        points[ i * 3 + 2 ] = color;
                    }
                }
                tick = GetTick() + INDICATOR_CHANGE_TICK;
            }
        
            if( points.length() > 0 )
                DrawPrimitive( DRAW_PRIMITIVE_POINTLIST, points );
        }

        void OnConstruct() override
        {
            SetPosition( 177, -7 );
        }
    }

    class AmmoLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetPosition( 3, 2 );
            SetSize( 1, 70 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null )
            {
                if( item.GetType() == ITEM_TYPE_WEAPON && item.Proto.Weapon_MaxAmmoCount > 0 )
                {
                    indicatorMax = item.Proto.Weapon_MaxAmmoCount;
                    indicatorCur = item.AmmoCount;
                }
                else
                {
                    indicatorMax = item.Proto.IndicatorMax;
                    indicatorCur = item.Indicator;
                }
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_GREEN, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    class DeteriorationLine : GUIPanel
    {
        int[] Points;
        uint CurTick;

        void OnConstruct() override
        {
            SetPosition( 5, 2 );
            SetSize( 1, 70 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            if( __IndicatorType != INDICATOR_LINES && __IndicatorType != INDICATOR_BOTH )
                return;
            
            int indicatorMax = 0;
            int indicatorCur = 0;
            
            if( item !is null && item.IsDeteriorable() )
            {
                indicatorMax = MAX_DETERIORATION;
                indicatorCur = item.Deterioration;
            }
            
            int[] rect = { AbsolutePosX, AbsolutePosY, Width, Height };
            cast< Indicators >( Parent ).DrawIndicator( rect, Points, COLOR_RED, indicatorCur, indicatorMax, CurTick, true, false );
        }
    }

    class Quickbar : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 396, 363 );
            SetSize( 50, 387 );
            SetBackgroundImage( "art/intrface/quickbar_vertical.png" );
        }

        void OnInit() override
        {
            SetPosition(__ScreenWidth-50, 5);
            
        }
    }

    class QuickSlotRH : GUIItemView
    {
        uint SLOT = SLOT_HAND2;

        void OnConstruct() override
        {
            SetPosition( 9, 6 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            Message(" "+button);
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot1 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_1;

        void OnConstruct() override
        {
            SetPosition( 9, 40 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot2 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_2;

        void OnConstruct() override
        {
            SetPosition( 9, 74 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot3 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_3;

        void OnConstruct() override
        {
            SetPosition( 9, 74 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot4 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_4;

        void OnConstruct() override
        {
            SetPosition( 8, 107 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot5 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_5;

        void OnConstruct() override
        {
            SetPosition( 8, 142 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot6 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_6;

        void OnConstruct() override
        {
            SetPosition( 8, 175 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot7 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_7;

        void OnConstruct() override
        {
            SetPosition( 8, 210 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot8 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_8;

        void OnConstruct() override
        {
            SetPosition( 8, 244 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot9 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_9;

        void OnConstruct() override
        {
            SetPosition( 8, 278 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot10 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_10;

        void OnConstruct() override
        {
            SetPosition( 8, 312 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class QuickSlot11 : GUIItemView
    {
        uint SLOT = SLOT_QUICK_11;

        void OnConstruct() override
        {
            SetPosition( 8, 346 );
            SetSize( 30, 30 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT );
        }

        void OnMouseDown( int button ) override
        {
            RunServerScriptUnsafe( "critter_item_movement@unsafe_MoveItem", int(SLOT), int(SLOT_HAND1), button, "", null );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT ? 0 : -1;
        }
    }

    class SlotItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 9, 6 );
            SetSize( 30, 30 );
            SetDraggable( true );
            SetNotHittable( true );
            SetBackgroundImage( "art/items/mine.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Main _Main();
        _Main.Init( _Screen );
        Console _Console();
        _Console.Init( _Main );
        ConsoleImage _ConsoleImage();
        _ConsoleImage.Init( _Console );
        ConsoleText _ConsoleText();
        _ConsoleText.Init( _Console );
        MessageBoxExtended _MessageBoxExtended();
        _MessageBoxExtended.Init( _Main );
        MessageBoxText _MessageBoxText();
        _MessageBoxText.Init( _Main );
        ExtendMessageBox _ExtendMessageBox();
        _ExtendMessageBox.Init( _Main );
        Filter1 _Filter1();
        _Filter1.Init( _Main );
        Filter2 _Filter2();
        _Filter2.Init( _Main );
        GameMenu _GameMenu();
        _GameMenu.Init( _Main );
        Inventory _Inventory();
        _Inventory.Init( _Main );
        SwitchItems _SwitchItems();
        _SwitchItems.Init( _Main );
        Skills _Skills();
        _Skills.Init( _Main );
        Map _Map();
        _Map.Init( _Main );
        Character _Character();
        _Character.Init( _Main );
        PipBoy _PipBoy();
        _PipBoy.Init( _Main );
        FixBoy _FixBoy();
        _FixBoy.Init( _Main );
        Combat _Combat();
        _Combat.Init( _Main );
        EndTurn _EndTurn();
        _EndTurn.Init( _Combat );
        EndCombat _EndCombat();
        _EndCombat.Init( _Combat );
        ActionPoints _ActionPoints();
        _ActionPoints.Init( _Main );
        Led _Led();
        _Led.Init( _ActionPoints );
        LedGreen _LedGreen();
        _LedGreen.Init( _Led );
        LedRed _LedRed();
        _LedRed.Init( _Led );
        LedYellow _LedYellow();
        _LedYellow.Init( _Led );
        BreakTime _BreakTime();
        _BreakTime.Init( _Main );
        BreakTimeLed _BreakTimeLed();
        _BreakTimeLed.Init( _BreakTime );
        HitPoints _HitPoints();
        _HitPoints.Init( _Main );
        ArmorClass _ArmorClass();
        _ArmorClass.Init( _Main );
        MainItemPlate _MainItemPlate();
        _MainItemPlate.Init( _Main );
        MainItemSlot _MainItemSlot();
        _MainItemSlot.Init( _MainItemPlate );
        MainItemSlotCell _MainItemSlotCell();
        _MainItemSlotCell.Init( _MainItemSlot );
        AmmoCount _AmmoCount();
        _AmmoCount.Init( _MainItemSlotCell );
        DeteriorationValue _DeteriorationValue();
        _DeteriorationValue.Init( _MainItemSlotCell );
        UsePic _UsePic();
        _UsePic.Init( _MainItemSlotCell );
        ApCost _ApCost();
        _ApCost.Init( _MainItemSlotCell );
        ApCostImage _ApCostImage();
        _ApCostImage.Init( _ApCost );
        ApCostValue _ApCostValue();
        _ApCostValue.Init( _ApCost );
        AimPic _AimPic();
        _AimPic.Init( _MainItemSlotCell );
        Indicators _Indicators();
        _Indicators.Init( _MainItemSlotCell );
        AmmoLine _AmmoLine();
        _AmmoLine.Init( _Indicators );
        DeteriorationLine _DeteriorationLine();
        _DeteriorationLine.Init( _Indicators );
        Quickbar _Quickbar();
        _Quickbar.Init( _Screen );
        QuickSlotRH _QuickSlotRH();
        _QuickSlotRH.Init( _Quickbar );
        QuickSlot1 _QuickSlot1();
        _QuickSlot1.Init( _Quickbar );
        QuickSlot2 _QuickSlot2();
        _QuickSlot2.Init( _Quickbar );
        QuickSlot3 _QuickSlot3();
        _QuickSlot3.Init( _Quickbar );
        QuickSlot4 _QuickSlot4();
        _QuickSlot4.Init( _Quickbar );
        QuickSlot5 _QuickSlot5();
        _QuickSlot5.Init( _Quickbar );
        QuickSlot6 _QuickSlot6();
        _QuickSlot6.Init( _Quickbar );
        QuickSlot7 _QuickSlot7();
        _QuickSlot7.Init( _Quickbar );
        QuickSlot8 _QuickSlot8();
        _QuickSlot8.Init( _Quickbar );
        QuickSlot9 _QuickSlot9();
        _QuickSlot9.Init( _Quickbar );
        QuickSlot10 _QuickSlot10();
        _QuickSlot10.Init( _Quickbar );
        QuickSlot11 _QuickSlot11();
        _QuickSlot11.Init( _Quickbar );
        SlotItem _SlotItem();
        _SlotItem.Init( _Quickbar );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}

namespace Inventory_TLJ
{
    class Inventory : GUIScreen
    {
        void OnConstruct() override
        {
            SetModal( true );
            SetAvailableCursors( array< int > = { CURSOR_HAND, CURSOR_DEFAULT } );
            SetCanMove( true, false );
            SetSize( 425, 600 );
            SetBackgroundImage( "art/intrface/inv_tlj.png" );
        }
    }

    class InvItems : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 14, 20 );
            SetCellPrototype( "InvItem" );
            SetGridSize( 10 );
            SetColumns( 1 );
            SetUserData( SLOT_INV );
            SetUseSorting( true );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_INV ? int( item.SortValue ) : -1;
        }
    }

    class InvItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetSize( 70, 30 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnMouseDown( int button ) override
        {
            if( button == MOUSE_BUTTON_WHEEL_UP || button == MOUSE_BUTTON_WHEEL_DOWN )
            {
                GUIItemView@ invItems = cast< GUIItemView >( Parent );
                invItems.SetScroll( invItems.Scroll + ( button == MOUSE_BUTTON_WHEEL_UP ? -1 : 1 ), true );
            }
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
            SetSize( IsDragged ? BackgroundImage.Width : 70, IsDragged ? BackgroundImage.Height : 30 );
        }
    }

    class ItemCount : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 2, 27 );
            SetTextFlags( FT_CENTERR | FT_BOTTOM );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            uint count = 1;
            if( item !is null )
                count = item.GetCount();
            SetText( count > 1 && !IsDragged ? "x" + count : "" );
        }
    }

    class SlotHand1 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 10, 520 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND1 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND1 ? 0 : -1;
        }
    }

    class SlotHand2 : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 199, 520 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_HAND2 );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_HAND2 ? 0 : -1;
        }
    }

    class SlotArmor : GUIItemView
    {
        void OnConstruct() override
        {
            SetPosition( 197, 444 );
            SetCellPrototype( ".SlotItem" );
            SetGridSize( 1 );
            SetUserData( SLOT_ARMOR );
        }

        int OnCheckItem( ItemCl@ item ) override
        {
            return item.CritSlot == SLOT_ARMOR ? 0 : -1;
        }
    }

    class SlotItem : GUIPanel
    {
        void OnConstruct() override
        {
            SetPosition( 173, 131 );
            SetSize( 100, 75 );
            SetDraggable( true );
            SetBackgroundImage( "art/intrface/dummy.png", IMAGE_LAYOUT_ZOOM );
        }

        void OnResizeGrid( GUIObject@ cell, uint cellIndex ) override
        {
            SetPosition( 0, 0 );
        }

        void OnDrawItem( ItemCl@ item, GUIObject@ cell, uint cellIndex ) override
        {
            SetDraggable( item !is null );
            BackgroundImage.Load( item !is null ? ( item.PicInv != 0 ? item.PicInv : item.Proto.PicInv ) : 0 );
        }
    }

    class Chosen : GUIPanel
    {
        int CurDir;
        uint LastDirChangeTick;

        void OnConstruct() override
        {
            SetPosition( 122, 446 );
            SetSize( 61, 98 );
        }

        void OnInit() override
        {
            CurDir            = 0;
            LastDirChangeTick = GetTick();
        }

        void OnDraw() override
        {
            uint curTick = GetTick();
            if( curTick - LastDirChangeTick >= 500 )
            {
                LastDirChangeTick = curTick;
                CurDir++;
                if( CurDir >= ( __MapHexagonal ? 6 : 8 ) )
                    CurDir = 0;
            }
            
            CritterCl@ chosen = GetChosen();
            if( chosen !is null )
            {
                if( chosen.IsAnim3d() )
                {
                    float[] chaPosition( 14 );
                    // Position
                    chaPosition[ 0 ] = AbsolutePosX + Width / 2;
                    chaPosition[ 1 ] = AbsolutePosY + Height - 10;
                    // Rotation
                    chaPosition[ 2 ] = __MapCameraAngle;
                    chaPosition[ 3 ] = ( __MapHexagonal ? 150 - CurDir * 60 : 135 - CurDir * 45 );
                    chaPosition[ 4 ] = 0.0;
                    // Scale
                    chaPosition[ 5 ] = 1.0;
                    chaPosition[ 6 ] = 1.0;
                    chaPosition[ 7 ] = 1.0;
                    // Speed
                    chaPosition[ 8 ] = 1.0;
                    // Reserved
                    chaPosition[ 9 ] = 0.0;
                    // Stencil rectangle
                    chaPosition[ 10 ] = AbsolutePosX;
                    chaPosition[ 11 ] = AbsolutePosY;
                    chaPosition[ 12 ] = AbsolutePosX + Width;
                    chaPosition[ 13 ] = AbsolutePosY + Height;
                    DrawCritter3d( 2, chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, chosen.Anim3dLayer, chaPosition, 0 );
                }
                else
                {
                    DrawCritter2d( chosen.CrType, chosen.GetAnim1(), ANIM2_IDLE, CurDir,
                        AbsolutePosX, AbsolutePosY, AbsolutePosX + Width, AbsolutePosY + Height, false, true, 0 );
                }
            }
        }
    }

    import string generic_description( int descType, int& offsX, int& offsY ) from "client_main";

    class Description : GUIText
    {
        void OnConstruct() override
        {
            SetPosition( 123, 203 );
            SetSize( 170, 220 );
        }

        void OnDraw() override
        {
            string@ text = CustomCall( "InvItemInfo" + ( GetCurrentCursor() != CURSOR_DEFAULT ? " X" : "" ) );
            if( text == "" )
            {
                int ox = 0, oy = 0;
                
                @text = generic_description( DESC_INVENTORY_MAIN, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_SPECIAL, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_STATS, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            
                @text = generic_description( DESC_INVENTORY_RESIST, ox, oy );
                DrawText( text, AbsolutePosX + ox, AbsolutePosY + oy, Width, Height, COLOR_TEXT, FONT_DEFAULT, FT_NOBREAK_LINE );
            }
            else
            {
                DrawText( text, AbsolutePosX, AbsolutePosY, Width, Height, COLOR_TEXT, FONT_DEFAULT, 0 );
            }
        }
    }

    class ScrollUp : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 137 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_up_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_up_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_up_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll - 1 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll - 1, true );
        }
    }

    class ScrollDown : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 104, 159 );
            SetSize( 22, 23 );
            SetBackgroundImage( "art/intrface/inv_scr_dn_normal.png" );
            SetPressedImage( "art/intrface/inv_scr_dn_pressed.png" );
            SetDisabledImage( "art/intrface/inv_scr_dn_disabled.png" );
        }

        void OnDraw() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            SetCondition( invItems.CheckScrollAvailability( invItems.Scroll + 1 ) );
        }

        void OnLMousePressed() override
        {
            GUIItemView@ invItems = cast< GUIItemView >( Parent.Find( "InvItems", false ) );
            invItems.SetScroll( invItems.Scroll + 1, true );
        }
    }

    class Close : GUIButton
    {
        void OnConstruct() override
        {
            SetPosition( 156, 552 );
            SetSize( 26, 26 );
            SetPressedImage( "art/intrface/MENUDOWN.png" );
        }

        void OnLMouseClick() override
        {
            HideScreen();
        }
    }

    void Init( int screenIndex )
    {
        Inventory _Inventory();
        _Inventory.Init( null );
        InvItems _InvItems();
        _InvItems.Init( _Inventory );
        InvItem _InvItem();
        _InvItem.Init( _InvItems );
        ItemCount _ItemCount();
        _ItemCount.Init( _InvItem );
        SlotHand1 _SlotHand1();
        _SlotHand1.Init( _Inventory );
        SlotHand2 _SlotHand2();
        _SlotHand2.Init( _Inventory );
        SlotArmor _SlotArmor();
        _SlotArmor.Init( _Inventory );
        SlotItem _SlotItem();
        _SlotItem.Init( _Inventory );
        Chosen _Chosen();
        _Chosen.Init( _Inventory );
        Description _Description();
        _Description.Init( _Inventory );
        ScrollUp _ScrollUp();
        _ScrollUp.Init( _Inventory );
        ScrollDown _ScrollDown();
        _ScrollDown.Init( _Inventory );
        Close _Close();
        _Close.Init( _Inventory );
        GUI_RegisterScreen( screenIndex, _Inventory );
    }
}

namespace Cursor
{
    class Screen : GUIScreen
    {
        void OnConstruct() override
        {
            SetCanMove( true, false );
        }
    }

    import uint GetActiveItemAttackDistantion( CritterCl& cr ) from "parameters";
    import int to_hit( CritterCl& chosen, CritterCl& target, ProtoItem& weapon, uint8 weaponMode ) from "client_main";

    class Cursor : GUIPanel
    {
        Sprite CursorDefault;
        Sprite CursorHand;
        Sprite CursorWait;
        Sprite CursorAttack;
        Sprite CursorUseItem;
        Sprite CursorUseSkill;
        Sprite[] CursorMoveScreen;

        void OnConstruct() override
        {
        }

        void OnInit() override
        {
            CursorDefault.Load( "art/intrface/cursor_default.png" );
            CursorHand.Load( "art/intrface/cursor_hand.png" );
            CursorWait.Load( "art/intrface/cursor_wait.png" );
            CursorAttack.Load( "art/intrface/cursor_attack.png" );
            CursorUseItem.Load( "art/intrface/cursor_use_item.png" );
            CursorUseSkill.Load( "art/intrface/cursor_use_skill.png" );
            CursorMoveScreen.resize( 8 );
            CursorMoveScreen[ 0 ].Load( "art/intrface/cursor_move_screen_u.png" );
            CursorMoveScreen[ 1 ].Load( "art/intrface/cursor_move_screen_ur.png" );
            CursorMoveScreen[ 2 ].Load( "art/intrface/cursor_move_screen_r.png" );
            CursorMoveScreen[ 3 ].Load( "art/intrface/cursor_move_screen_dr.png" );
            CursorMoveScreen[ 4 ].Load( "art/intrface/cursor_move_screen_d.png" );
            CursorMoveScreen[ 5 ].Load( "art/intrface/cursor_move_screen_dl.png" );
            CursorMoveScreen[ 6 ].Load( "art/intrface/cursor_move_screen_l.png" );
            CursorMoveScreen[ 7 ].Load( "art/intrface/cursor_move_screen_ul.png" );
        }

        void OnDraw() override
        {
            if( __HideCursor )
                return;
            
            // Wait
            int cursor = GetCurrentCursor();
            if( cursor == CURSOR_WAIT )
            {
                CursorWait.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
                return;
            }
            
            // Game scroll
            bool hasMouseScroll = true;
            if( __ScrollMouseLeft && __ScrollMouseUp )
                CursorMoveScreen[ 7 ].Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            else if( __ScrollMouseRight && __ScrollMouseUp )
                CursorMoveScreen[ 1 ].Draw( __MouseX, __MouseY, 0, 0, 1, -1 );
            else if( __ScrollMouseLeft && __ScrollMouseDown )
                CursorMoveScreen[ 5 ].Draw( __MouseX, __MouseY, 0, 0, -1, 1 );
            else if( __ScrollMouseRight && __ScrollMouseDown )
                CursorMoveScreen[ 3 ].Draw( __MouseX, __MouseY, 0, 0, 1, 1 );
            else if( __ScrollMouseLeft )
                CursorMoveScreen[ 6 ].Draw( __MouseX, __MouseY, 0, 0, -1, 0 );
            else if( __ScrollMouseRight )
                CursorMoveScreen[ 2 ].Draw( __MouseX, __MouseY, 0, 0, 1, 0 );
            else if( __ScrollMouseUp )
                CursorMoveScreen[ 0 ].Draw( __MouseX, __MouseY, 0, 0, 0, -1 );
            else if( __ScrollMouseDown )
                CursorMoveScreen[ 4 ].Draw( __MouseX, __MouseY, 0, 0, 0, 1 );
            else
                hasMouseScroll = false;
            if( hasMouseScroll )
                return;
            
            // Other cursors
            if( cursor == CURSOR_USE_WEAPON )
            {
                CursorAttack.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            
                CritterCl@ chosen = GetChosen();
                if( chosen is null )
                    return;
            
                CritterCl@ cr = GetMonitorCritter( __MouseX, __MouseY, false );
                if( cr is null || cr is chosen )
                    return;
            
                uint attackDist = GetActiveItemAttackDistantion( chosen );
                if( attackDist == 0 )
                    return;
            
                bool trace = false;
                CritterCl@[] critters;
                GetCrittersPath( chosen.HexX, chosen.HexY, cr.HexX, cr.HexY, 0.0f, attackDist, FIND_ALL, critters );
                for( uint i = 0; i < critters.length(); i++ )
                {
                    if( critters[ i ].Id == cr.Id )
                    {
                        trace = true;
                        break;
                    }
                }
                if( !trace )
                    return;
            
                uint8 mode = 0;
                int hit = to_hit( chosen, cr, chosen.GetSlotProto( SLOT_HAND1, mode ), mode );
                if( hit == 0 )
                    return;
                
                DrawText( hit + "%", __MouseX + 6, __MouseY + 6, 100, 100, COLOR_RED, FONT_DEFAULT, 0 );
            }
            else if( cursor == CURSOR_USE_ITEM )
            {
                CursorUseItem.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CURSOR_USE_SKILL )
            {
                CursorUseSkill.Draw( __MouseX, __MouseY, 0, 0, 0, 0 );
            }
            else if( cursor == CURSOR_MOVE )
            {
                uint16 hx, hy;
                if( !GetMonitorHex( __MouseX, __MouseY, hx, hy, false ) )
                    CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_DEFAULT )
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
            else if( cursor == CURSOR_HAND )
            {
                CustomCall( "CurDrawHand" );
            }
            else
            {
                CursorDefault.Draw( __MouseX, __MouseY, 0, 0, -1, -1 );
            }
        }
    }

    class LMenu : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlots : GUIGrid
    {
        void OnConstruct() override
        {
        }
    }

    class MenuSlot : GUIPanel
    {
        void OnConstruct() override
        {
        }
    }

    void Init( int screenIndex )
    {
        Screen _Screen();
        _Screen.Init( null );
        Cursor _Cursor();
        _Cursor.Init( _Screen );
        LMenu _LMenu();
        _LMenu.Init( _Screen );
        MenuSlots _MenuSlots();
        _MenuSlots.Init( _LMenu );
        MenuSlot _MenuSlot();
        _MenuSlot.Init( _MenuSlots );
        GUI_RegisterScreen( screenIndex, _Screen );
    }
}
