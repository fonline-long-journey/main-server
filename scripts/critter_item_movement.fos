// Author: cvet
#include "_macros.fos"
#include "wait_time_h.fos"

#ifdef __CLIENT
# define Critter    CritterCl
# define Item       ItemCl
#endif

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
    uint8 fromSlot = item.CritSlot;

    // Quickbar item movement @erandelax 22/08/2018
    if(toSlot >= SLOT_QUICK_1 && toSlot <= SLOT_QUICK_12) return true;

    // Drop
    if( toSlot == SLOT_GROUND )
        return true;

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( valid( itemSwap ) && !handsSwap )
        return false;

    // Weapon animation
    if( toSlot == SLOT_HAND1 )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
            return false;
    }

    // Armor animation
uint armorstr =	( cr.Param[ ST_STRENGTH ] );
if ( cr.Perk[PE_MILITARIST] != 0 )
	armorstr += 10;
if ( cr.Perk[PE_KARMA_BEACON] != 0 )
	armorstr += 2;
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
            return false;
        if( item.Proto.Slot != SLOT_INV )
            return false;
        if( !IsCritterCanArmor( cr.CrType ) )
            return false;
		if( item.Proto.Weapon_MinStrength > armorstr )
			{
				#ifdef __CLIENT
				Message( GetMsgStr( TEXTMSG_GAME, 2 ) );
				#endif
				return false;
			}
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER
// Quickbar item movement @erandelax 22/08/2018
void unsafe_MoveItem(Critter& player, int slot_src, int slot_dst, int mode, string@ param2, int[]@ param3){
    // mode: 0 - LMB, 1 - RMB, 2 - MMB
    // Receive items from source slot
    Item@[] srcItems;
    int srcItemsCount = player.GetItems( slot_src, srcItems );
    // Receive items from destination slot
    Item@[] dstItems;
    int dstItemsCount = player.GetItems( slot_dst, dstItems );
    // If there is actually item you are trying to use
    if(srcItemsCount > 0){       
        if(0 == mode){
            if( (srcItems[0].Flags & ITEM_CAN_USE) > 0 ){
                // Run client script to use item
                int[] use = {CHOSEN_USE_ITEM, srcItems[0].Id, 0, 0, 0, ITEM_MODE_USE, 0};
                player.RunClientScript("client_main@__MakeChosenDo",0,0,0,"",use);
            }else{
                // Drop to the ground item in destination slot
                if( dstItemsCount > 0 ){
                    player.MoveItem(dstItems[0].Id,uint(dstItemsCount),uint(SLOT_GROUND));
                }
                // Equip item from quick slot
                player.MoveItem(srcItems[0].Id,uint(srcItemsCount),uint(slot_dst));
                // If it was fast-equipped weapon, turn on ATTACK mode
                if( dstItems[0].GetType() == ITEM_TYPE_WEAPON ){ 
                    player.RunClientScript("client_main@__ChangeCursor",CURSOR_USE_WEAPON,0,0,"",null);
                }
            }
        }else{
            // Move equipped item to inventory
            if(dstItemsCount > 0){
                player.MoveItem(dstItems[0].Id,uint(dstItemsCount),uint(SLOT_INV));
            }
            // Equip item from source slot
            player.MoveItem(srcItems[0].Id,uint(srcItemsCount),uint(slot_dst));
            player.Animate( 0, ANIM2_SWITCH_ITEMS, null, true, true );
            // Move inventory item to source slot
            if(dstItemsCount > 0){
                player.MoveItem(dstItems[0].Id,uint(dstItemsCount),uint(slot_src));
            }
            // If mode 2 is used and object can be used on someone, turn on USE ON mode
            if( (srcItems[0].Flags & ITEM_CAN_USE_ON_SMTH) > 0 ){
                player.RunClientScript("client_main@__ChangeCursor",CURSOR_USE_ITEM,0,0,"",null);
            }
        }
    } else {
        // Just fill the source slot with destination items if there is no source
        if(dstItemsCount > 0){
            player.MoveItem(dstItems[0].Id,uint(dstItemsCount),uint(slot_src));
            player.Animate( 0, ANIM2_SWITCH_ITEMS, null, true, true );
        }
    }
}


// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
    uint8 toSlot = item.CritSlot;
    cr.Wait(GetActionTime(ACTION_MOVE_ITEM, cr));
	
	
    // Armor changing
    if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
    {

        if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
        {
            // Default dude
            bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
            uint crType = cr.Stat[ ST_BASE_CRTYPE ];
            if( crType == 0 )
                crType = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
            if( toSlot == SLOT_ARMOR )
                crType = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );

            if( crType != 104 && crType != 111 && crType != 112 && crType != 3 && crType != 10 && crType != 71 && crType != 1 && crType != 2 && crType != 122 && crType != 84 && crType != 113 && crType != 114 && crType != 135 && crType != 136 && crType != 137 && crType != 138 )
            {
                uint[] NoArmorSkins =
                {
                    9,
                    28,
                    33,
                    34,
                    35,
                    36,
                    37,
                    39,
                    42,
                    45,
                    48,
                    57,
                    72,
                    73,
                    79,
                    89,
                    91,
                    92,
                    93,
                    95,
                    99,
                    121,
                    128,
                    129,
                    134
                };
                if( NoArmorSkins.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
                    crType = cr.Stat[ ST_BASE_CRTYPE ];
            }

            // Long hair dude redirects
            if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_TRIBAL || cr.Stat[ ST_BASE_CRTYPE ] == 131 ) && isMale )
            {
                crType = CRTYPE_LHD_JUMPSUIT;
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_LHD_LEATHER_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = CRTYPE_LHD_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_LHD_METAL_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = CRTYPE_LHD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_LHD_JUMPSUIT;
                }
            }
            else if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL ) && isMale )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_BLD_LEATHER_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = CRTYPE_BLD_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_BLD_METAL_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHERBLUE_M )
                        crType = CRTYPE_BLD_LEATHERBLUE;
                    else if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_BLD_JUMPSUIT;
                }
            }

            if( cr.CrType != crType )
                cr.ChangeCrType( crType );
        }

        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );
        switch( item.Proto.Armor_Perk )
        {
        case ARMOR_PERK_POWERED:         // +3 strength, +30 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
            break;
        case ARMOR_PERK_COMBAT:         // +20 radiation resist
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
            break;
        case ARMOR_PERK_ADVANCED_I:     // +4 strength, +60 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
            break;
        case ARMOR_PERK_ADVANCED_II:         // +4 strength, +75 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
            break;
        case ARMOR_PERK_CHARISMA:         // +1 charisma
            cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
            break;
        case ARMOR_PERK_HP1:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 4 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 4 * sign;
            break;
        case ARMOR_PERK_HP2:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 6 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 6 * sign;
            break;
        case ARMOR_PERK_HP3:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 8 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 8 * sign;
            break;
        case ARMOR_PERK_HP4:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 10 * sign;
			if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
				cr.StatBase[ ST_CURRENT_HP ] += 10 * sign;
            break;
        default:
            break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }

    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}
#endif
