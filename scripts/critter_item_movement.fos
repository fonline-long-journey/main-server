// Author: cvet
#include "_macros.fos"
#include "wait_time_h.fos"

#ifdef __CLIENT
# define Critter    CritterCl
# define Item       ItemCl
#endif

#ifdef __SERVER
import void updateCurrentAc( Critter& cr) from "parameters";
#endif

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on something critter want move item from one slot to another.
// Return true to allow transaction, false to disallow.
// Function must exist on server and client side.
bool critter_check_move_item( Critter& cr, Item& item, uint8 toSlot, Item@ itemSwap )
{
    uint8 fromSlot = item.CritSlot;

    // Drop
    if( toSlot == SLOT_GROUND )
        return true;

    // If busy, then allow only hands item swapping
    bool handsSwap = ( ( fromSlot == SLOT_HAND1 && toSlot == SLOT_HAND2 ) || ( fromSlot == SLOT_HAND2 && toSlot == SLOT_HAND1 ) );
    if( valid( itemSwap ) && !handsSwap )
        return false;

    // Weapon animation
    if( toSlot == SLOT_HAND1 )
    {
        if( item.GetType() == ITEM_TYPE_WEAPON && !IsCritterAnim1( cr.CrType, item.Proto.Weapon_Anim1 ) )
            return false;
    }

    // Armor animation
uint armorstr =	( cr.Param[ ST_STRENGTH ] );
if ( cr.Perk[PE_MILITARIST] != 0 )
	armorstr += 10;
if ( cr.Perk[PE_KARMA_BEACON] != 0 )
	armorstr += 2;
    if( toSlot == SLOT_ARMOR )
    {
        if( item.GetType() != ITEM_TYPE_ARMOR )
            return false;
        if( item.Proto.Slot != SLOT_INV )
            return false;
        if( !IsCritterCanArmor( cr.CrType ) )
            return false;
		if( item.Proto.Weapon_MinStrength > armorstr )
			{
				#ifdef __CLIENT
				Message( GetMsgStr( TEXTMSG_GAME, 2 ) );
				#endif
				return false;
			}
    }

    // Custom slot checks
    if( toSlot > SLOT_ARMOR )
    {
        if( toSlot != item.Proto.Slot )
            return false;
    }

    // Allow moving
    return true;
}

#ifdef __SERVER

// Quickbar item movement @erandelax 22/08/2018
// Instantly drops equipped item to ground (no cost, no animation)
void unsafe_DropCurrentItem(Critter& player, int equipItemId, int param1, int param2, string@ param3, int[]@ param4){
    Item@[] items;
    uint count = player.GetItems( SLOT_HAND1, items);
    if(count > 0){
        // Pack carried items to inventory and "drop" part of them in hurry
        if(items[0].GetCount() < 3){
            player.MoveItem(items[0].Id,0,SLOT_GROUND);
        }else{
            player.MoveItem(items[0].Id,0,SLOT_INV);
            player.MoveItem(items[0].Id,Random(1,items[0].GetCount()),SLOT_GROUND);
        }
    }
    if(equipItemId > 0){ // "Equip instead" callback if present
        Item@ item = player.GetItemById(equipItemId);
        if(item !is null){
            player.MoveItem(equipItemId,count,SLOT_HAND1);    
            if(ITEM_TYPE_WEAPON == item.GetType()){
                player.Animate( 0, ANIM2_SHOW_WEAPON, item, true, true );
            } else {
                player.Animate( 0, ANIM2_USE, item, true, true );
            }
            item.Update();
        }
    }
    // Update info about thrown out items
    if(count > 0) for(uint pos = 0; pos < count; pos++) items[pos].Update();
}

// //////////////////////////////////////////////////////////////////////////////////////////////////
// Call on critter item moved.
void critter_move_item( Critter& cr, Item& item, uint8 fromSlot )
{
    uint8 toSlot = item.CritSlot;
    cr.Wait(GetActionTime(ACTION_MOVE_ITEM, cr));
	
	
    // Armor changing
    if( item.GetType() == ITEM_TYPE_ARMOR && ( fromSlot == SLOT_ARMOR || toSlot == SLOT_ARMOR ) )
    {
	
        if( GetCritterAnimType( cr.CrType ) != ANIM_TYPE_3D )
        {
            // Default dude
            bool isMale = ( cr.Stat[ ST_GENDER ] == GENDER_MALE );
			bool isFemale = ( cr.Stat[ ST_GENDER ] == GENDER_FEMALE );
			uint crType = cr.Stat[ ST_BASE_CRTYPE ];
            if( crType == 0 )
                crType = ( isMale ? CRTYPE_DEFAULT_M : CRTYPE_DEFAULT_F );
            if( toSlot == SLOT_ARMOR )
                crType = ( isMale ? item.Proto.Armor_CrTypeMale : item.Proto.Armor_CrTypeFemale );

            if( crType != 104 && crType != 111 && crType != 112 && crType != 3 && crType != 10 && crType != 71 && crType != 1 && crType != 2 && crType != 122 && crType != 84 && crType != 113 && crType != 114 && crType != 135 && crType != 136 && crType != 137 && crType != 138 )
            {
                uint[] NoArmorSkins =
                {
                    9,
                    28,
                    33,
                    34,
                    35,
                    36,
                    37,
                    39,
                    42,
                    45,
                    48,
                    57,
                    72,
                    73,
                    79,
                    89,
                    91,
                    92,
                    93,
                    95,
                    99
                };
                if( NoArmorSkins.find( cr.Stat[ ST_BASE_CRTYPE ] ) != -1 )
                    crType = cr.Stat[ ST_BASE_CRTYPE ];
            }
			// Armor AC Display
				updateCurrentAc(cr);
				
            // Long Hair Dude Redirects
             if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_TRIBAL || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_KHAN ) && isMale )
             {
                 crType = cr.Stat[ ST_BASE_CRTYPE ];
                 if( toSlot == SLOT_ARMOR )
                 {
                    crType = item.Proto.Armor_CrTypeMale;
                    if( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_LHD_JUMPSUIT; 
                    else if( item.Proto.ProtoId == PID_LEATHER_JACKET )
                        crType = CRTYPE_LHD_LEATHER_JACKET;
					else if(( item.Proto.ProtoId  == PID_CURED_LEATHER_ARMOR))
						crType = CRTYPE_LHD_COMBAT_LEATHER_JACKET;
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_LHD_LEATHER_ARMOR;	
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_MK2_M)
                        crType = CRTYPE_LHD_LEATHER_ARMOR_MK2;	
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_M )
                        crType = CRTYPE_LHD_LEATHER_ARMOR_BLUE;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_M )
                        // crType = CRTYPE_LHD_LEATHER_ARMOR_RED;						
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_M )
						crType = CRTYPE_LHD_LEATHER_ARMOR_GREY;
					else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_LHD_METAL_ARMOR;
					else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_M )
                        crType = CRTYPE_LHD_METAL_ARMOR_MK2;
					else if( crType == CRTYPE_DW_METAL_ARMOR_TESLA_M )
                        crType = CRTYPE_LHD_METAL_ARMOR_TESLA;
                 }
             }
			
			// Long Hair Blonde Dude Redirects
            // if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BLONDE_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BLONDE_TRIBAL || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BLONDE_KHAN ) && isMale )
            // {
                // crType = CRTYPE_LHD_BLONDE_JUMPSUIT;
                // if( toSlot == SLOT_ARMOR )
                // {
                    // crType = item.Proto.Armor_CrTypeMale;
                    // if( crType == CRTYPE_DW_JUMPSUIT_M )
                        // crType = CRTYPE_LHD_BLONDE_JUMPSUIT; 
                    // else if( item.Proto.ProtoId == PID_LEATHER_JACKET )
                        // crType = CRTYPE_LHD_BLONDE_LEATHER_JACKET;
					// else if(( item.Proto.ProtoId  == PID_CURED_LEATHER_ARMOR))
						// crType = CRTYPE_LHD_BLONDE_COMBAT_LEATHER_JACKET;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        // crType = CRTYPE_LHD_BLONDE_LEATHER_ARMOR;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_MK2_M)
                        // crType = CRTYPE_LHD_BLONDE_LEATHER_ARMOR_MK2;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_M )
                        // crType = CRTYPE_LHD_BLONDE_LEATHER_ARMOR_BLUE;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_M )
                        // crType = CRTYPE_LHD_BLONDE_LEATHER_ARMOR_RED;						
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_M )
						// crType = CRTYPE_LHD_BLONDE_LEATHER_ARMOR_GREY;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        // crType = CRTYPE_LHD_BLONDE_METAL_ARMOR;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_M )
                        // crType = CRTYPE_LHD_BLONDE_METAL_ARMOR_MK2;
                // }
            // }
			
			// Long Hair Brunette Dude Redirects
            // if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BRUNETTE_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BRUNETTE_TRIBAL || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_BRUNETTE_KHAN ) && isMale )
            // {
                // crType = CRTYPE_LHD_BRUNETTE_JUMPSUIT;
                // if( toSlot == SLOT_ARMOR )
                // {
                    // crType = item.Proto.Armor_CrTypeMale;
                    // if( crType == CRTYPE_DW_JUMPSUIT_M )
                        // crType = CRTYPE_LHD_BRUNETTE_JUMPSUIT; 
                    // else if( item.Proto.ProtoId == PID_LEATHER_JACKET )
                        // crType = CRTYPE_LHD_BRUNETTE_LEATHER_JACKET;
					// else if(( item.Proto.ProtoId  == PID_CURED_LEATHER_ARMOR))
						// crType = CRTYPE_LHD_BRUNETTE_COMBAT_LEATHER_JACKET;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        // crType = CRTYPE_LHD_BRUNETTE_LEATHER_ARMOR;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_MK2_M)
                        // crType = CRTYPE_LHD_BRUNETTE_LEATHER_ARMOR_MK2;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_M )
                        // crType = CRTYPE_LHD_BRUNETTE_LEATHER_ARMOR_BLUE;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_M )
                        // crType = CRTYPE_LHD_BRUNETTE_LEATHER_ARMOR_RED;						
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_M )
						// crType = CRTYPE_LHD_BRUNETTE_LEATHER_ARMOR_GREY;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        // crType = CRTYPE_LHD_BRUNETTE_METAL_ARMOR;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_M )
                        // crType = CRTYPE_LHD_BRUNETTE_METAL_ARMOR_MK2;
                // }
            // }
			
			// Long Hair Logan Dude Redirects
            // if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_LOGAN_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_LOGAN_TRIBAL || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_LHD_LOGAN_KHAN ) && isMale )
            // {
                // crType = CRTYPE_LHD_LOGAN_JUMPSUIT;
                // if( toSlot == SLOT_ARMOR )
                // {
                    // crType = item.Proto.Armor_CrTypeMale;
                    // if( crType == CRTYPE_DW_JUMPSUIT_M )
                        // crType = CRTYPE_LHD_LOGAN_JUMPSUIT; 
                    // else if( item.Proto.ProtoId == PID_LEATHER_JACKET )
                        // crType = CRTYPE_LHD_LOGAN_LEATHER_JACKET;
					// else if(( item.Proto.ProtoId  == PID_CURED_LEATHER_ARMOR))
						// crType = CRTYPE_LHD_LOGAN_COMBAT_LEATHER_JACKET;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        // crType = CRTYPE_LHD_LOGAN_LEATHER_ARMOR;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_MK2_M)
                        // crType = CRTYPE_LHD_LOGAN_LEATHER_ARMOR_MK2;	
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_M )
                        // crType = CRTYPE_LHD_LOGAN_LEATHER_ARMOR_BLUE;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_M )
                        // crType = CRTYPE_LHD_LOGAN_LEATHER_ARMOR_RED;						
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_M )
						// crType = CRTYPE_LHD_LOGAN_LEATHER_ARMOR_GREY;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        // crType = CRTYPE_LHD_LOGAN_METAL_ARMOR;
					// else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_M )
                        // crType = CRTYPE_LHD_LOGAN_METAL_ARMOR_MK2;
                // }
            // }
			
			// Bald Dude Redirects			
            if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_BLD_TRIBAL ) && isMale )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeMale;
					if ( crType == CRTYPE_DW_JUMPSUIT_M )
                        crType = CRTYPE_BLD_JUMPSUIT;
					else if( crType == CRTYPE_DW_LEATHER_JACKET_M )
                        crType = CRTYPE_BLD_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_M )
                        crType = CRTYPE_BLD_LEATHER_ARMOR;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_M )
                        crType = CRTYPE_BLD_LEATHER_ARMOR_BLUE;
					// else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_M )
                        // crType = CRTYPE_BLD_LEATHER_ARMOR_BLUE;
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_M )
						crType = CRTYPE_BLD_LEATHER_ARMOR_GREY;
					else if( crType == CRTYPE_DW_METAL_ARMOR_M )
                        crType = CRTYPE_BLD_METAL_ARMOR;
					else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_M )
                        crType = CRTYPE_BLD_METAL_ARMOR_MK2;
					else if( crType == CRTYPE_DW_METAL_ARMOR_TESLA_M )
                        crType = CRTYPE_BLD_METAL_ARMOR_TESLA;
                }
            }
			
			// Punk Girl Redirects	
			else if( ( cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_PNK_JUMPSUIT || cr.Stat[ ST_BASE_CRTYPE ] == CRTYPE_PNK_TRIBAL ) && isFemale )
            {
                crType = cr.Stat[ ST_BASE_CRTYPE ];
                if( toSlot == SLOT_ARMOR )
                {
                    crType = item.Proto.Armor_CrTypeFemale;
					if( crType == CRTYPE_DW_JUMPSUIT_F )
                        crType = CRTYPE_PNK_JUMPSUIT;
					else if( crType == CRTYPE_DW_LEATHER_JACKET_F )
                        crType = CRTYPE_PNK_LEATHER_JACKET;
                    else if( crType == CRTYPE_DW_LEATHER_ARMOR_F )
                        crType = CRTYPE_PNK_LEATHER_ARMOR;
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_MK2_F )
                        crType = CRTYPE_PNK_LEATHER_ARMOR; // TODO Create MK2 Variation
                     else if( crType == CRTYPE_DW_LEATHER_ARMOR_BLUE_F )
                         crType = CRTYPE_PNK_LEATHER_ARMOR_BLUE;
                     // else if( crType == CRTYPE_DW_LEATHER_ARMOR_RED_F )
                         // crType = CRTYPE_PNK_LEATHER_ARMOR_RED;
					else if( crType == CRTYPE_DW_LEATHER_ARMOR_GREY_F )
						crType = CRTYPE_PNK_LEATHER_ARMOR_GREY;
					else if( crType == CRTYPE_DW_METAL_ARMOR_F )
                        crType = CRTYPE_PNK_METAL_ARMOR;
					else if( crType == CRTYPE_DW_METAL_ARMOR_MK2_F )
                        crType = CRTYPE_PNK_METAL_ARMOR_MK2;
					else if( crType == CRTYPE_DW_METAL_ARMOR_TESLA_F )
                        crType = CRTYPE_PNK_METAL_ARMOR_MK2;  // TODO Create TESLA Variation
                }
            }
			
			if( cr.CrType != crType )
			cr.ChangeCrType( crType );
		}
  
        // Armor modifiers
        // Also look Armor perk validation in critter_init
        int sign = ( toSlot == SLOT_ARMOR ? int(1) : -1 );
        switch( item.Proto.Armor_Perk )
        {
        case ARMOR_PERK_POWERED:         // +3 strength, +30 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 3 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 30 * sign;
            break;
        case ARMOR_PERK_COMBAT:         // +20 radiation resist
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 20 * sign;
            break;
        case ARMOR_PERK_ADVANCED_I:     // +4 strength, +60 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 60 * sign;
            break;
        case ARMOR_PERK_ADVANCED_II:         // +4 strength, +75 radiation resist
            cr.StatBase[ ST_STRENGTH_EXT ] += 4 * sign;
            cr.StatBase[ ST_RADIATION_RESISTANCE_EXT ] += 75 * sign;
            break;
        case ARMOR_PERK_CHARISMA:         // +1 charisma
            cr.StatBase[ ST_CHARISMA_EXT ] += 1 * sign;
            break;
        case ARMOR_PERK_HP1:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 4 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 4 * sign;
            break;
        case ARMOR_PERK_HP2:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 6 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 6 * sign;
            break;
        case ARMOR_PERK_HP3:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 8 * sign;
            if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
                cr.StatBase[ ST_CURRENT_HP ] += 8 * sign;
            break;
        case ARMOR_PERK_HP4:
            cr.StatBase[ ST_MAX_LIFE_EXT ] += 10 * sign;
			if( cr.Stat[ ST_CURRENT_HP ] > cr.Stat[ ST_MAX_LIFE ] )
				cr.StatBase[ ST_CURRENT_HP ] += 10 * sign;
            break;
        default:
            break;
        }
        cr.StatBase[ ST_CURRENT_ARMOR_PERK ] = ( toSlot == SLOT_ARMOR ? item.Proto.Armor_Perk : 0 );
    }

    // Slot modifiers
    // SLOT_PERK_MIRROR_SHADES // +1 charisma
    // SLOT_PERK_COSMETIC_CASE // +1 charisma to female
    // SLOT_PERK_MOTION_SENSOR // +20 outdoorsman
    // SLOT_PERK_STEALTH_BOY   // +20 sneak
}
#endif
