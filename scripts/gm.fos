// GM commands for FOrp by PigBoss

#include "_macros.fos"
#include "_animation.fos"
#include "_defines.fos"
#include "_colors.fos"
#include "map_central_town.fos"

import string ElectronicLockerCode( int varNum ) from "electronic_lock";
import void   logger( Critter& cr, int type, string@ message ) from "logger";
import bool   AddAttackPlane( Critter& npc, uint priority, Critter& target, bool run ) from "npc_planes";
import bool   AddWalkPlane( Critter& npc, uint priority, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint cut ) from "npc_planes";
import int NextLevelNeedExp( Critter& cr ) from "parameters";	

//ErlKing spawn menu
import void GM_MobInit( Critter& npc, int type) from "mob";

// Mio import
import void AffectRadiation( Critter& cr, int value ) from "radiation";
import void AffectPoison( Critter& cr, int value ) from "poison";
import void FlushScreen( Critter& cr, uint fromColor, uint toColor, uint timeMs ) from "effects";



void tb( Critter& player, int param0, int param1, int param2 )
{
    Map@ map = player.GetMap();
    if( map.IsTurnBased() )
        map.EndTurnBased();
    else
        map.BeginTurnBased( player );
}

void gmlock( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ arr )
{
    Item@ door = player.GetMap().GetItem( param0 );
    door.LockerId = Random( 90, 7000 );
    door.LockerComplexity = 1000;
	Item @ key = player.AddItem( PID_KEY, 1 );
	SETFLAG( door.LockerCondition, LOCKER_LOCKED );
    key.LockerId = door.LockerId;
    key.Update();
	door.Update();
    player.Say( SAY_NETMSG, "Door locked" );
}

void light( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ arr )
{
    Item@ lamp = player.GetMap().GetItem( param0 );
    lamp.LightIntensity = arr[ 0 ];
    lamp.LightDistance = arr[ 1 ];
    lamp.LightColor = arr[ 2 ];
	if(!FLAG(lamp.Flags, ITEM_LIGHT))
		SETFLAG(lamp.Flags, ITEM_LIGHT);
	else
		UNSETFLAG(lamp.Flags, ITEM_LIGHT);
	lamp.Update();
    player.Say( SAY_NETMSG, "Light set" );
}

void immaterium( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( param0 );
    if( valid( target ) )
        target.TransitToMap( GetMapByPid( MAP_immaterium, 0 ).Id, 0 );
    player.Say( SAY_NETMSG, target.Name + " is send to warp" );
}


void pootisguard( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( param0 );
    if( valid( target ) )
        target.SetScript( "_GuardInit" );
    player.Say( SAY_NETMSG, target.Name + " готов убивать!" );
}

void clearlex( Critter& player, int param0, int param1, int param2, string@ msg, int[] @ param4 )
{
	Critter@ target = GetCritter( param0 );
    if( valid( target ) )
        target.SetLexems( "" );
	player.Say( SAY_NETMSG, "Lexem cleared!" );
}

void SetCodeDoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Item@ door = player.GetMap().GetItem( param0 );
    if( valid( door ) )
    {
        door.Val0 = 0;
        door.Val1 = 0;
        door.Val2 = 5;
        door.Val3 = 0;
        int i = 0;
        for( i = 0; i < 6; ++i )
        {
            if( GetGlobalVar( 9009 + i ) == door.Id )
            {
                GetGlobalVar( 9009 + i ) = 0;
                player.Say( SAY_NETMSG, "Замок освобожден." );
                door.EventFinish( true );
                return;
            }
            if( GetGlobalVar( 9009 + i ) == 0 )
                break;
            if( i == 5 )
            {
                player.Say( SAY_NETMSG, "Все замки заняты." );
                return;
            }
        }
        door.Val4 = 9009 + i;
        door.SetScript( "electronic_lock@_LockedInit" );
        player.Say( SAY_NETMSG, "Код от двери - " + ElectronicLockerCode( door.Val4 ) );
    }
}

void deleteloc( Critter& player, int id, int, int )
{
    DeleteLocation( id );
    player.Say( SAY_NETMSG, "Done." );
}


void refreshnames(Critter& player){
	Critter@[] crs;
	GetAllPlayers(crs);
	
	if(!valid(crs))
		return;
		
	for(uint i = 0; i < crs.length(); ++i)
		player.RunClientScript( "rp_client@__setname", crs[i].Id, 0, 0, GetPlayerName(crs[i].Id) + " |0xFFFF0000 " + crs[i].Id, null);
}

void _say2all( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@[] crs;
    GetAllPlayers( crs );
    string str = "|0xFFFF0000 ### |0xFFBB33CC " + param3 + " |0xFFFF0000 ###";
    int    acc = player.GetAccess();

    for( int i = 0, j = crs.length(); i < j; i++ )
    {
        if( crs[ i ] is null || crs[ i ].IsNpc() )
            continue;

        if( crs[ i ].GetAccess() >= acc )
            crs[ i ].Say( SAY_NETMSG, "|0xFFFF0000 <|0xFFFFFF00 " + GetPlayerName( player.Id ) + "|0xFFFF0000 >" + str );
        else
            crs[ i ].Say( SAY_NETMSG, str );
    }
    player.Say( SAY_NETMSG, "Message send" );
}

void _erasedoor( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@  map = player.GetMap();
    Item@ item = map.GetItem( param0 );
    item.LockerId = 0;
    item.LockerComplexity = 0;
    if( FLAG( item.LockerCondition, LOCKER_LOCKED ) )
        UNSETFLAG( item.LockerCondition, LOCKER_LOCKED );
    item.Val9 = 0;
    player.Say( SAY_NETMSG, "Door cleared" );
}

void setrain( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    int rain = 0;
    if( StrToInt( param3, rain ) )
        player.GetMap().SetRain( rain );
    player.Say( SAY_NETMSG, "Rain set to - " + rain );
}

void ItemLexer( Critter& cr, uint answerI, string& answerS )
{
    if( valid( _CritGetItemHand( cr ) ) )
    {
        _CritGetItemHand( cr ).SetLexems( answerS );
    }
    cr.Say( SAY_NETMSG, "Lexem set" );
}

void _gmpm( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    cr.Say( SAY_FLASH_WINDOW, "" );
    cr.Say( SAY_NETMSG, "|0xFFFF0000 <|0xFFFFFF00 " + "gm" + "|0xFFFF0000 > |0xFFCC33AA " + param3 );
    player.Say( SAY_NETMSG, "Сообщение отправлено." );
    cr.ParamBase[ LAST_ADMIN ] = player.Id;
}

void toitem( Critter& cr, int pid, int, int )
{
    Map@ map = cr.GetMap();
    Item@[] items;
    map.GetItems( pid, items );
    for( uint i = 0; i < items.length(); ++i )
        cr.Say( SAY_NETMSG, "Item(" + pid + ") on x-" + items[ i ].HexX + " y-" + items[ i ].HexY );
}



void GM_say( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    player.ShowScreen( SCREEN_SAY, 0, "GMsay" );
    player.ParamBase[ ST_VAR5 ] = param0;
}

void _lvlup( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    cr.ParamBase[ ST_EXPERIENCE ] += NextLevelNeedExp(cr) - cr.ParamBase[ ST_EXPERIENCE ] ;
    player.Say( SAY_NETMSG, cr.ParamBase[ ST_LEVEL ] + " level to " + cr.Name );
}

void _AddExp( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    int      exp = 0;
    if( StrToInt( param3, exp ) )
        cr.ParamBase[ ST_EXPERIENCE ] += exp;
    player.Say( SAY_NETMSG, "+ " + exp + " exp, to " + cr.Name );
}

void _gmsay( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( param3 == ":3" || param3 == ":3" )
    {
        player.Say( SAY_NETMSG, "Азаза, смайлики от лица неписей." );
        return;
    }
    if( substring( param3, 0, 2 ) == ".э" )
    {
        GetCritter( param0 ).Say( SAY_EMOTE, substring( param3, 2, param3.length() ) );
        return;
    }
    if( substring( param3, 0, 2 ) == ".к" )
    {
        GetCritter( param0 ).Say( SAY_SHOUT, substring( param3, 2, param3.length() ) );
        return;
    }
    if( substring( param3, 0, 2 ) == ".ш" )
    {
        GetCritter( param0 ).Say( SAY_WHISP, substring( param3, 2, param3.length() ) );
        return;
    }
    GetCritter( param0 ).Say( SAY_NORM, param3 );
}

void GMsay( Critter& cr, uint answerI, string& answerS )
{
    // GmLog( cr, 0, 0, 0, "GmHot say " + answerS, null );
    if( substring( answerS, 0, 2 ) == ".э" )
    {
        GetCritter( cr.ParamBase[ ST_VAR5 ] ).Say( SAY_EMOTE, substring( answerS, 2, answerS.length() ) );
        cr.ParamBase[ ST_VAR5 ] = 0;
        return;
    }
    if( substring( answerS, 0, 2 ) == ".к" )
    {
        GetCritter( cr.ParamBase[ ST_VAR5 ] ).Say( SAY_SHOUT, substring( answerS, 2, answerS.length() ) );
        cr.ParamBase[ ST_VAR5 ] = 0;
        return;
    }
    if( substring( answerS, 0, 2 ) == ".ш" )
    {
        GetCritter( cr.ParamBase[ ST_VAR5 ] ).Say( SAY_WHISP, substring( answerS, 2, answerS.length() ) );
        cr.ParamBase[ ST_VAR5 ] = 0;
        return;
    }
    GetCritter( cr.ParamBase[ ST_VAR5 ] ).Say( SAY_NORM, answerS );
    logger( cr, GMLOG, answerS );
    cr.ParamBase[ ST_VAR5 ] = 0;
    return;
}

void _spawncar( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    uint16 protoCar = PID_HIGHWAYMAN_GT;
    Map@   map = player.GetMap();
    uint16 x = 0, y = 0;
    map.GetEntireCoords( 243, 0, x, y );
    Item@  car = map.AddItem( x, y, protoCar, 1 );
    if( valid( car ) )
    {
        car.LockerId = 1337;
        car.Charge = car.Proto.Car_TankVolume;
        car.Deterioration = 0;
        _CarSetBioEngine( car );
        _CarSetNoLockpick( car );
        car.Update();
        Item@ key = player.AddItem( PID_KEY, 1 );
        if( valid( key ) )
        {
            key.LockerId = 1337;
            key.Update();
        }
        Item@ bag = car.GetChild( 0 );
        if( valid( bag ) )
        {
            bag.LockerId = 1337;
            bag.LockerComplexity =  300;
            bag.Update();
        }
        key.SetLexems( "Ключ от тачки" );
    }
}


void _ctd( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( param0 );

    if( not valid( target ) )
        return;

    Map@ map = player.GetMap();

    if( not valid( map ) )
        return;
    if( not map.IsHexPassed( player.HexX + 1, player.HexY ) )
        return;

    target.TransitToMap( map.Id, player.HexX + 1, player.HexY, 0 );
    player.Say( SAY_NETMSG, target.Name + " summoned" );
}

void _dct( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( param0 );
    if( not valid( target ) )
        return;
    Map@ map = target.GetMap();
    if( valid( map ) )
    {
        player.TransitToMap( map.Id, target.HexX + 1, target.HexY, 0 );
        player.Say( SAY_NETMSG, "Done." );
    }
    else
        player.Say( SAY_NETMSG, "Target probably on global map." );
}

void _GiveAll( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    Item@[] items;
    if( param1 == 0 )
    {
        cr.GetItems( SLOT_HAND1, items );
        MoveItems( items, player );
    }
    else if( param1 == 1 )
    {
        cr.GetItems( SLOT_HAND2, items );
        MoveItems( items, player );
    }
    else if( param1 == 2 )
    {
        cr.GetItems( SLOT_ARMOR, items );
        MoveItems( items, player );
    }
    player.Say( SAY_NETMSG, "Done." );
}

void _Clone( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( valid( cr ) )
    {
        for( uint i = 0; i <= 80; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 200; i <= 207; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 209; i <= 217; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }

        for( uint i = 260; i <= 278; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 300; i <= 439; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 470; i <= 476; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 480; i <= 498; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        for( uint i = 550; i <= 565; i++ )
        {
            player.ParamBase[ i ] = cr.ParamBase[ i ];
        }
        player.Say( SAY_NETMSG, "Вам присвоенны параметры персонажа " + cr.Id );
        player.Say( SAY_NETMSG, "Сник цели равен " + cr.ParamBase[ 208 ] );
    }
}

void _god( Critter& player, int pid, int dlg, int targety, string@ param3, int[] @ param4 )
{
    player.ModeBase[ MODE_INVULNERABLE ] = 1;
    player.PerkBase[ PE_SHARPSHOOTER ] = 100;
    player.PerkBase[ PE_AWARENESS ] = 2;
    player.PerkBase[ PE_SILENT_RUNNING ] = 1;
    player.SkillBase[ SK_SNEAK ] = 300;
    player.Say( SAY_NETMSG, "God mode enabled" );
}

void _opendoor( Critter& player, int pid, int dlg, int targety, string@ param3, int[] @ param4 )
{
    Map@  map = player.GetMap();
    Item@ door = map.GetItem( pid );
    if( _LockerIsOpen( door ) )
        door.LockerClose();
    else
        door.LockerOpen();
}

void _info( Critter& player, int id, int dlg, int targety, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( id );
    if( valid( target ) && target.IsPlayer() )
        player.Say( SAY_NETMSG, "Name - " + GetPlayerName( target.Id )  + ". Id -  " + target.Id );
}

void _AddNpc( Critter& cr, int pid, int dlg, int targety, string@ param3, int[] @ param4 )
{
    if( pid <= 0 )
    {
        cr.Say( SAY_NETMSG, "Fail" );
        return;
    }
    cr.GetMap().AddNpc( pid, cr.HexX - 3, cr.HexY - 2, 0, null, null, null ).StatBase[ ST_DIALOG_ID ] = dlg;
    cr.Say( SAY_NETMSG, "Npc with Pid - " + pid + " and dialog - " + dlg + " spawned" );
    return;
}

void _RemoveNpc( Critter& cr, int pid, int dlg, int targety, string@ param3, int[] @ param4 )
{
    Critter@ npc = GetCritter( pid );
    if( npc.IsNpc() )
    {
        DeleteNpc( npc );
        cr.Say( SAY_NETMSG, "Npc removed." );
    }

}
void _body( Critter& player, int id, int pid, int targety, string@ param3, int[] @ param4 )
{
    Critter@ target = GetCritter( id );
    if( not valid( target ) )
        return;
    target.ParamBase[ ST_BASE_CRTYPE ] = pid;
    target.ChangeCrType( pid );
    player.Say( SAY_NETMSG, "BT changed" );
}

void _teletoHex( Critter& player, int id, int targetx, int targety, string@ param3, int[] @ param4 )
{
    player.TransitToHex( targetx, targety, player.Dir );
    player.RefreshVisible();
}

void _GetCritParam(  Critter& player, int pid, int count, int param2, string@ param3, int[] @ param4 )
{
    Critter @ cr = GetCritter( param2 );
    if( valid( cr ) )
    {
        player.Say( SAY_NETMSG, "Param #" + pid + " val= " + cr.Param[ pid ] );
        player.Say( SAY_NETMSG, "ParamBase #" + pid + " val= " + cr.ParamBase[ pid ] );
    }
}

void _greytext( Critter& player, int x, int y, int param2, string@ param3, int[] @ param4 )
{
    Map@ map = player.GetMap();
    map.SetText( x, y, COLOR_GRAY, param3 );
    player.Say( SAY_NETMSG, "Grey text:" + param3 );
}

void _deleteitem( Critter& cr, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@ map = cr.GetMap();
    Item@[] item;
    map.GetItems( param1, param2, item );
    DeleteItems( item );
    cr.Say( SAY_NETMSG, "Items deleted" );
}

void _itemlex( Critter& cr, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@  map = cr.GetMap();
    Item@ item = map.GetItem( param0 );
    item.SetLexems( param3 );
    cr.Say( SAY_NETMSG, "Lexem set" );
}

void _GmLex( Critter& player, int id, int param1, int param2, string@ desc, int[] @ nothing )
{
    Critter@ cr = GetCritter( id );
	
    cr.SetLexems( desc);
    player.Say( SAY_NETMSG, "Player lexems: " + desc + "." );
}
void god( Critter& player, int, int, int, string@ desc, int[] @ nothing )
{
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
        player.StatBase[ i ] = 10;
    for( uint i = ST_NORMAL_ABSORB; i <= ST_EXPLODE_ABSORB; i++ )
        player.StatBase[ i ] = 100;
    for( uint i = ST_NORMAL_RESIST; i <= ST_POISON_RESISTANCE; i++ )
        player.StatBase[ i ] = 100;
    for( uint i = SK_SMALL_GUNS; i <= SK_OUTDOORSMAN; i++ )
        player.SkillBase[ i ] = 300;
    player.StatBase[ ST_MELEE_DAMAGE ] = 999;
    player.StatBase[ ST_ARMOR_CLASS ] = 100;
    player.StatBase[ ST_CURRENT_HP ] = 9999;
    player.StatBase[ ST_MAX_LIFE ] = 9999;
}
void _checkinv( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    player.ShowContainer( ( GetCritter( param1 ) ), null, TRANSFER_FAR_CRIT );
}
void controlMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    player.RunClientScript( "client_gui@_SetControlCritters", param0, 0, 0, null, null );
    Critter@ target = GetCritter( param0 );
    if( valid( target ) )
        target.ParamBase[ MERC_MASTER_ID ] = player.Id;
}

void moveMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = 10 + param0 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );

        if( valid( player ) && valid( controlled ) && controlled.IsNpc() )
        {
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.ErasePlane( -1, true );
            AddWalkPlane( controlled, 1, param1, param2, GetDirection( controlled.HexX, controlled.HexY, param1, param2 ), valid( param3 ), 0 );
            if( param0 == 0 )
                controlled.ClearEnemyStack();
        }
    }
}
void attackMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    Critter@ target = GetCritter( param0 );

    for( uint i = param2 * 10, ii = 10 + param2 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );
        if( valid( player ) && valid( controlled ) && valid( target ) && controlled.IsNpc() )
        {
            controlled.ModeBase[ MODE_NO_HOME ] = 1;
            controlled.ErasePlane( -1, true );
            AddAttackPlane( controlled, 0, target, __RunOnCombat );
            controlled.AddEnemyInStack( target.Id );
        }
    }
}
void stopMob( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ vals )
{
    for( uint i = param0 * 10, ii = 10 + param0 * 10; i < ii; i++ )
    {
        Critter@ controlled = GetCritter( vals[ i ] );

        if( valid( player ) && valid( controlled ) && !controlled.IsPlayer() )
        {
            controlled.ErasePlane( -1, true );
            controlled.ClearEnemyStack();
            controlled.EraseTimeEvents( 9 );
            controlled.SetDir( GetDirection( controlled.HexX, controlled.HexY, param1, param2 ) );
        }
    }
}


void _gmcont( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Map@ map = player.GetMap();
    if( !valid( map ) )
    {
        player.Say( SAY_NETMSG, "NOT ON GLOBAL YOU MORON" );
        return;
    }
    if( param0 == 0 ) // armor
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 0, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_LEATHER_JACKET, 1, 0 );
        cont.AddItem( PID_LEATHER_ARMOR, 1, 0 );
        cont.AddItem( PID_LEATHER_ARMOR_MK_II, 1, 0 );
        cont.AddItem( PID_CURED_LEATHER_ARMOR, 1, 0 );
        cont.AddItem( PID_SANDROBE, 1, 0 );
        cont.AddItem( PID_BLUE_LEATHER_ARMOR, 1, 0 );
        cont.AddItem( PID_METAL_ARMOR, 1, 0 );
        cont.AddItem( PID_METAL_ARMOR_MK_II, 1, 0 );
        cont.AddItem( PID_TESLA_ARMOR, 1, 0 );
        cont.AddItem( PID_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_COMBAT_ARMOR_MK_II, 1, 0 );
        cont.AddItem( PID_BROTHERHOOD_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_BLACK_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_CHITIN_ARMOR, 1, 0 );
        cont.AddItem( PID_CHITIN_ARMOR_MK_II, 1, 0 );
        cont.AddItem( PID_BLUE_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_DESERT_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_BROWN_COMBAT_ARMOR, 1, 0 );
        cont.AddItem( PID_PURPLE_ROBE, 1, 0 );
        cont.AddItem( PID_BLACK_ROBE, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 1 ) // pistols
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 1, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_ZIP_GUN, 1, 0 );
        cont.AddItem( PID_9MM_MAUSER, 1, 0 );
        cont.AddItem( PID_10MM_PISTOL, 1, 0 );
        cont.AddItem( PID_14MM_PISTOL, 1, 0 );
        cont.AddItem( PID_DESERT_EAGLE, 1, 0 );
        cont.AddItem( PID_DESERT_EAGLE_EXT_MAG, 1, 0 );
        cont.AddItem( PID_223_PISTOL, 1, 0 );
        cont.AddItem( PID_44_MAGNUM_REVOLVER, 1, 0 );
        cont.AddItem( PID_44_MAGNUM_SPEEDLOADER, 1, 0 );
        cont.AddItem( PID_NEEDLER_PISTOL, 1, 0 );
        cont.AddItem( PID_PK12_GAUSS_PISTOL, 1, 0 );
        cont.AddItem( PID_MULTI_BARREL_GUN, 1, 0 );
        cont.AddItem( PID_MAUSER_SILENCE, 1, 0 );
        cont.AddItem( PID_ANACONDA, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 2 ) // rifles
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 2, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_HUNTING_RIFLE, 1, 0 );
        cont.AddItem( PID_SCOPED_HUNTING_RIFLE, 1, 0 );
        cont.AddItem( PID_SPRINGER_RIFLE, 1, 0 );
        cont.AddItem( PID_ASSAULT_RIFLE, 1, 0 );
        cont.AddItem( PID_ASSAULT_RIFLE_EXT_MAG, 1, 0 );
        cont.AddItem( PID_SNIPER_RIFLE, 1, 0 );
        cont.AddItem( PID_FN_FAL, 1, 0 );
        cont.AddItem( PID_FN_FAL_NIGHT_SCOPE, 1, 0 );
        cont.AddItem( PID_FN_FAL_HPFA, 1, 0 );
        cont.AddItem( PID_RED_RYDER_BB_GUN, 1, 0 );
        cont.AddItem( PID_RED_RYDER_LE_BB_GUN, 1, 0 );
        cont.AddItem( PID_JONNY_BB_GUN, 1, 0 );
        cont.AddItem( PID_INDEPENDENT, 1, 0 );
        cont.AddItem( PID_M72_GAUSS_RIFLE, 1, 0 );
        cont.AddItem( PID_ELEPHANT_GUN, 1, 0 );
        cont.AddItem( PID_SHOTGUN, 1, 0 );
        cont.AddItem( PID_SAWED_OFF_SHOTGUN, 1, 0 );
        cont.AddItem( PID_COMBAT_SHOTGUN, 1, 0 );
        cont.AddItem( PID_HK_CAWS, 1, 0 );
        cont.AddItem( PID_PANCOR_JACKHAMMER, 1, 0 );
        cont.AddItem( PID_10MM_SMG, 1, 0 );
        cont.AddItem( PID_HK_P90C, 1, 0 );
        cont.AddItem( PID_TOMMY_GUN, 1, 0 );
        cont.AddItem( PID_HK_G11, 1, 0 );
        cont.AddItem( PID_HK_G11E, 1, 0 );
        cont.AddItem( PID_GREASE_GUN, 1, 0 );
        cont.AddItem( PID_MAUSER_SMG, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 3 ) // bigguns
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 3, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_FLAMER, 1, 0 );
        cont.AddItem( PID_IMPROVED_FLAMETHROWER, 1, 0 );
        cont.AddItem( PID_ROCKET_LAUNCHER, 1, 0 );
        cont.AddItem( PID_MINIGUN, 1, 0 );
        cont.AddItem( PID_AVENGER_MINIGUN, 1, 0 );
        cont.AddItem( PID_VINDICATOR_MINIGUN, 1, 0 );
        cont.AddItem( PID_BOZAR, 1, 0 );
        cont.AddItem( PID_LIGHT_SUPPORT_WEAPON, 1, 0 );
        cont.AddItem( PID_M60, 1, 0 );
        cont.AddItem( PID_METAL_STORM, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 4 ) // energo
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 4, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_LASER_PISTOL, 1, 0 );
        cont.AddItem( PID_MAGNETO_LASER_PISTOL, 1, 0 );
        cont.AddItem( PID_SOLAR_SCORCHER, 1, 0 );
        cont.AddItem( PID_LASER_RIFLE, 1, 0 );
        cont.AddItem( PID_LASER_RIFLE_EXT_CAP, 1, 0 );
        cont.AddItem( PID_GATLING_LASER, 1, 0 );
        cont.AddItem( PID_ALIEN_LASER_PISTOL, 1, 0 );
        cont.AddItem( PID_PLASMA_PISTOL, 1, 0 );
        cont.AddItem( PID_PLASMA_PISTOL_EXT_CART, 1, 0 );
        cont.AddItem( PID_PLASMA_RIFLE, 1, 0 );
        cont.AddItem( PID_TURBO_PLASMA_RIFLE, 1, 0 );
        cont.AddItem( PID_YK32_PULSE_PISTOL, 1, 0 );
        cont.AddItem( PID_YK42B_PULSE_RIFLE, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 5 ) // throwing
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 5, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_MOLOTOV_COCKTAIL, 50, 0 );
        cont.AddItem( PID_FRAG_GRENADE, 50, 0 );
        cont.AddItem( PID_PLASMA_GRENADE, 50, 0 );
        cont.AddItem( PID_PULSE_GRENADE, 50, 0 );
        cont.AddItem( PID_DOG_GRENADE, 50, 0 );
        cont.AddItem( PID_SMOKE_GRENADE, 50, 0 );
        cont.AddItem( PID_MUSTARD_GAS_GRENADE, 50, 0 );
        cont.AddItem( PID_FLARE, 50, 0 );
        cont.AddItem( PID_PLANT_SPIKE, 50, 0 );
        cont.AddItem( PID_THROWING_KNIFE, 50, 0 );
        cont.AddItem( PID_ROCK, 50, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 6 ) // melee
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 6, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_KNIFE, 1, 0 );
        cont.AddItem( PID_COMBAT_KNIFE, 1, 0 );
        cont.AddItem( PID_LIL_JESUS_WEAPON, 1, 0 );
        cont.AddItem( PID_SHIV, 1, 0 );
        cont.AddItem( PID_SWITCHBLADE, 1, 0 );
        cont.AddItem( PID_WAKIZASHI_BLADE, 1, 0 );
        cont.AddItem( PID_ELI_KNIFE, 1, 0 );
        cont.AddItem( PID_SPEAR, 1, 0 );
        cont.AddItem( PID_SHARP_SPEAR, 1, 0 );
        cont.AddItem( PID_SHARPENED_POLE, 1, 0 );
        cont.AddItem( PID_CLUB, 1, 0 );
        cont.AddItem( PID_CROWBAR, 1, 0 );
        cont.AddItem( PID_WRENCH, 1, 0 );
        cont.AddItem( PID_SLEDGEHAMMER, 1, 0 );
        cont.AddItem( PID_LOUISVILLE_SLUGGER, 1, 0 );
        cont.AddItem( PID_SUPER_SLEDGE, 1, 0 );
        cont.AddItem( PID_CATTLE_PROD, 1, 0 );
        cont.AddItem( PID_SUPER_CATTLE_PROD, 1, 0 );
        cont.AddItem( PID_RIPPER, 1, 0 );
        cont.AddItem( PID_BOXING_GLOVES, 1, 0 );
        cont.AddItem( PID_PLATED_BOXING_GLOVES, 1, 0 );
        cont.AddItem( PID_RING_BOXING_GLOVES, 1, 0 );
        cont.AddItem( PID_RING_PLATED_BOXING_GLOVES, 1, 0 );
        cont.AddItem( PID_POWER_FIST, 1, 0 );
        cont.AddItem( PID_BRASS_KNUCKLES, 1, 0 );
        cont.AddItem( PID_SPIKED_KNUCKLES, 1, 0 );
        cont.AddItem( PID_MEGA_POWER_FIST, 1, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 7 ) // ammo
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 7, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_4_7MM_CASELESS, 200, 0 );
        cont.AddItem( PID_5MM_JHP, 200, 0 );
        cont.AddItem( PID_5MM_AP, 200, 0 );
        cont.AddItem( PID_7_62MM_AMMO, 200, 0 );
        cont.AddItem( PID_9MM_AMMO, 200, 0 );
        cont.AddItem( PID_9MM_BALL, 200, 0 );
        cont.AddItem( PID_10MM_JHP, 200, 0 );
        cont.AddItem( PID_10MM_AP, 200, 0 );
        cont.AddItem( PID_14MM_AP, 200, 0 );
        cont.AddItem( PID_44_MAGNUM_JHP, 200, 0 );
        cont.AddItem( PID_44_FMJ_MAGNUM, 200, 0 );
        cont.AddItem( PID_45_CALIBER_AMMO, 200, 0 );
        cont.AddItem( PID_223_FMJ, 200, 0 );
        cont.AddItem( PID_SHOTGUN_SHELLS, 200, 0 );
        cont.AddItem( PID_2MM_EC_AMMO, 200, 0 );
        cont.AddItem( PID_700_NITRO_EXPRESS, 200, 0 );
        cont.AddItem( PID_EXPLOSIVE_ROCKET, 200, 0 );
        cont.AddItem( PID_ROCKET_AP, 200, 0 );
        cont.AddItem( PID_FLAMETHROWER_FUEL, 200, 0 );
        cont.AddItem( PID_FLAMETHROWER_FUEL_MK_II, 200, 0 );
        cont.AddItem( PID_SMALL_ENERGY_CELL, 200, 0 );
        cont.AddItem( PID_MICRO_FUSION_CELL, 200, 0 );
        cont.AddItem( PID_BBS, 200, 0 );
        cont.AddItem( PID_HN_NEEDLER_CARTRIDGE, 200, 0 );
        cont.AddItem( PID_HN_AP_NEEDLER_CARTRIDGE, 200, 0 );
        cont.AddItem( PID_EMP_ROCKET, 200, 0 );
        cont.AddItem( 10023, 200, 0 );
        cont.AddItem( 10030, 200, 0 );
        cont.AddItem( 10031, 200, 0 );
        cont.AddItem( 10032, 200, 0 );
        cont.AddItem( 10033, 200, 0 );
        cont.AddItem( 10034, 200, 0 );
        cont.AddItem( 10035, 200, 0 );
        cont.AddItem( 10036, 200, 0 );
        cont.AddItem( 10037, 200, 0 );
        cont.AddItem( 10038, 200, 0 );
        cont.AddItem( 10039, 200, 0 );
        cont.AddItem( 10040, 200, 0 );
        cont.AddItem( 10041, 200, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 8 ) // drugs
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 8, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_STIMPAK, 200, 0 );
        cont.AddItem( PID_RADAWAY, 200, 0 );
        cont.AddItem( PID_ANTIDOTE, 200, 0 );
        cont.AddItem( PID_RAD_X, 200, 0 );
        cont.AddItem( PID_SUPER_STIMPAK, 200, 0 );
        cont.AddItem( PID_JET_ANTIDOTE, 200, 0 );
        cont.AddItem( PID_HEALING_POWDER, 200, 0 );
        cont.AddItem( PID_HYPO, 200, 0 );
        cont.AddItem( PID_NUKA_COLA, 200, 0 );
        cont.AddItem( PID_BEER, 200, 0 );
        cont.AddItem( PID_BOOZE, 200, 0 );
        cont.AddItem( PID_GAMMA_GULP_BEER, 200, 0 );
        cont.AddItem( PID_ROENTGEN_RUM, 200, 0 );
        cont.AddItem( PID_ROT_GUT, 200, 0 );
        cont.AddItem( PID_MENTATS, 200, 0 );
        cont.AddItem( PID_BUFFOUT, 200, 0 );
        cont.AddItem( PID_PSYCHO, 200, 0 );
        cont.AddItem( PID_JET, 200, 0 );
        cont.AddItem( PID_MUTATED_FRUIT, 200, 0 );
        cont.AddItem( PID_IGUANA_ON_A_STICK, 200, 0 );
        cont.AddItem( PID_MEAT_ON_A_STICK, 200, 0 );
        cont.AddItem( PID_COOKIE, 200, 0 );
        cont.AddItem( PID_BOX_OF_DOUGHNUTS, 200, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
    if( param0 == 9 ) // misc
    {
        Item@ cont = map.AddItem( 1, 1, PID_HIDDEN_CONTAINER, 1 );
        if( !valid( cont ) )
        {
            Item@ contnew = map.GetItem( 1, 1, PID_HIDDEN_CONTAINER );
            if( !valid( contnew ) )
                return;
            DeleteItem( contnew );
            _gmcont( player, 9, 0, 0, null, null );
            return;
        }
        cont.AddItem( PID_BOTTLE_CAPS, 10000, 0 );
        cont.AddItem( PID_MORNING_STAR_MINE, 200, 0 );
        cont.AddItem( PID_KOKOWEEF_MINE_SCRIP, 200, 0 );
        cont.AddItem( PID_REAL_BOTTLE_CAPS, 200, 0 );
        cont.AddItem( PID_PUMP_PARTS, 200, 0 );
        cont.AddItem( PID_SCORPION_TAIL, 200, 0 );
        cont.AddItem( PID_ROPE, 200, 0 );
        cont.AddItem( PID_BROC_FLOWER, 200, 0 );
        cont.AddItem( PID_XANDER_ROOT, 200, 0 );
        cont.AddItem( PID_GECKO_PELT, 200, 0 );
        cont.AddItem( PID_GOLDEN_GECKO_PELT, 200, 0 );
        cont.AddItem( PID_FLINT, 200, 0 );
        cont.AddItem( PID_MEAT_JERKY, 200, 0 );
        cont.AddItem( PID_FIREWOOD, 200, 0 );
        cont.AddItem( PID_HYPODERMIC_NEEDLE, 200, 0 );
        cont.AddItem( PID_METAL_TRASH, 200, 0 );
        cont.AddItem( PID_GUNPOWDER, 200, 0 );
        cont.AddItem( PID_METAL_ORE, 200, 0 );
        cont.AddItem( PID_MINERAL, 200, 0 );
        cont.AddItem( PID_TUBE, 200, 0 );
        cont.AddItem( PID_STEEL, 200, 0 );
        cont.AddItem( PID_BRAHMIN_SKIN, 200, 0 );
        cont.AddItem( PID_MEAT, 200, 0 );
        cont.AddItem( PID_CIGARETTES, 200, 0 );
        cont.AddItem( PID_RAGS, 200, 0 );
        cont.AddItem( PID_NITROGLYCERIN, 200, 0 );
        cont.AddItem( PID_CHEMICALS, 200, 0 );
        cont.AddItem( PID_TNT, 200, 0 );
        cont.AddItem( PID_HEXOGEN, 200, 0 );
        cont.AddItem( PID_PLASTIC_EXPLOSIVES_DULL, 200, 0 );
        cont.AddItem( PID_MULTI_TOOL, 200, 0 );
        cont.AddItem( PID_SUPER_TOOL_KIT, 200, 0 );
        cont.AddItem( PID_OIL_CAN, 200, 0 );
        cont.AddItem( PID_LOCKPICKS, 200, 0 );
        cont.AddItem( PID_EXP_LOCKPICK_SET, 200, 0 );
        cont.AddItem( PID_ELECTRONIC_LOCKPICKS, 200, 0 );
        cont.AddItem( PID_ELEC_LOCKPICK_MKII, 200, 0 );
        cont.AddItem( PID_FIRST_AID_KIT, 200, 0 );
        cont.AddItem( PID_FIELD_MEDIC_KIT, 200, 0 );
        cont.AddItem( PID_DOCTORS_BAG, 200, 0 );
        cont.AddItem( PID_PARAMEDICS_BAG, 200, 0 );
        cont.AddItem( PID_MEDICAL_SUPPLIES, 200, 0 );
        cont.AddItem( PID_SHOVEL, 200, 0 );
        cont.AddItem( PID_PLANK, 200, 0 );
        cont.AddItem( PID_AXE, 200, 0 );
        cont.AddItem( PID_WELDING, 200, 0 );
        cont.AddItem( PID_LIGHTER, 200, 0 );
        cont.AddItem( PID_FLOWER, 200, 0 );
        cont.AddItem( PID_WATER_FLASK, 200, 0 );
        cont.AddItem( PID_BOX_OF_NOODLES, 200, 0 );
        cont.AddItem( PID_FROZEN_DINNER, 200, 0 );
        cont.AddItem( PID_RUBBER_BOOTS, 200, 0 );
        cont.AddItem( PID_CHEEZY_POOFS, 200, 0 );
        cont.AddItem( PID_BLUE_CONDOM, 200, 0 );
        cont.AddItem( PID_GREEN_CONDOM, 200, 0 );
        cont.AddItem( PID_RED_CONDOM, 200, 0 );
        cont.AddItem( PID_COSMETIC_CASE, 200, 0 );
        cont.AddItem( PID_DICE, 200, 0 );
        cont.AddItem( PID_LOADED_DICE, 200, 0 );
        cont.AddItem( PID_DECK_OF_CARDS, 200, 0 );
        cont.AddItem( PID_MARKED_DECK_OF_CARDS, 200, 0 );
        cont.AddItem( PID_DOG_TAGS, 200, 0 );
        cont.AddItem( PID_ELECTRONIC_BUG, 200, 0 );
        cont.AddItem( PID_CHITIN_ARMOR_RECIPE, 200, 0 );
        cont.AddItem( PID_WATCH, 200, 0 );
        cont.AddItem( PID_DEFIB, 200, 0 );
        cont.AddItem( PID_HANDCUFFS, 5, 0 );
        cont.AddItem( PID_FIRE_GECKO_PELT, 200, 0 );
        cont.AddItem( 10010, 2, 0 );
        cont.AddItem( 10009, 2, 0 );
        cont.AddItem( 10008, 2, 0 );
        cont.AddItem( 10007, 2, 0 );
        cont.AddItem( PID_RADIO, 5, 0 );
        cont.Update();
        player.ShowContainer( null, cont, TRANSFER_FAR_CONT );
    }
}



// ================================================== Няшные обработчики ==================================================

void MenuMaker( Critter& player, string[] List, string@ Pointer, string@ Headline )
{
	player.ShowScreen( SCREEN_DIALOGBOX, List.length(), Pointer );
	player.Say( SAY_DIALOGBOX_TEXT, Headline );
	for( uint i = 0, l = List.length(); i < l; i++ ) { player.Say( SAY_DIALOGBOX_BUTTON( i ), List[ i ] ); }
}
void MenuMakerCheck( Critter& player, string[] List, string@ Pointer, string@ Headline, int[] ListX, uint8 Type )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( Type < 2 && targetCr is null ) { return; }

	string[] Sign = { "- ", "+ " };
	player.ShowScreen( SCREEN_DIALOGBOX, List.length()+1, Pointer );
	player.Say( SAY_DIALOGBOX_TEXT, Headline );
	if( Type == 0 || Type == 2 ) { for( uint i = 0, l = List.length(); i < l; i++ ) { player.Say( SAY_DIALOGBOX_BUTTON( i ), Sign[ ListX[ i ] ] + List[ i ] ); } }
	else
	{
		int[] ModeX;
		for( uint i = 0, l = List.length(); i < l; i++ )
		{
			ModeX.resize( ModeX.length() + 1 );
			if( Type == 1 ) { ModeX[ ModeX.length() - 1 ] = targetCr.ParamBase[ ListX[ i ] ]; }
			if( Type == 3 ) { ModeX[ ModeX.length() - 1 ] = _CritCountItem( targetCr, ListX[ i ] ); }
		}
		for( uint i = 0, l = List.length(); i < l; i++ ) { player.Say( SAY_DIALOGBOX_BUTTON( i ), ModeX[ i ] +" "+ List[ i ] ); }
	}
	player.Say( SAY_DIALOGBOX_BUTTON( List.length() ), "Назад" );
}
void MenuInputMaker( Critter& player, string@ Pointer, string@ Headline )
{
	player.ShowScreen( SCREEN_SAY, 0, Pointer );
	player.Say( SAY_SAY_TITLE, Headline );
}



// ####################################################################################################
// #                                         Mio GM Menu ^_^                                          #
// ####################################################################################################

void unsafe_GM_PANNEL_SELF( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.GetAccess() >= ACCESS_MODER ) // Меню - Основное меню.
	{
		string[] List = { "Склад", "Действие по ID", "Паучье зрение" };
		MenuMaker( player, List, "answer_GM_PANNEL_SELF", "ГМ панель" );
	}
}

// ================================================== Основное меню ==================================================

void answer_GM_PANNEL_SELF( Critter& player, uint answerI, string& answerS )
{
	if( answerI == 0 ) // Меню - Склад.
	{
		string[] List = { "Броня", "Пистолеты", "Винтовки", "Пушки", "Энерго", "Метание", "Мили", "Патроны", "Нарк", "Разное", "Назад" };
		MenuMaker( player, List, "answer_GM_PANNEL_SELF_VAULT", "Склад:" );
	}
	if( answerI == 1 ) // Меню - Действие по ID.
	{
		MenuInputMaker( player, "InputID", "ID" );
	}
	if( answerI == 2 ) // Меню - Паучье зрение.
	{
		sinf( player, 0, 5, 0 );
	}
}

void answer_GM_PANNEL_SELF_VAULT( Critter& player, uint answerI, string& answerS )
{
	if( answerI >= 9 ) { unsafe_GM_PANNEL_SELF( player, 0, 0, 0, null, null ); } else { _gmcont( player, answerI, 0, 0, null, null); }
}
void InputID( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr;
	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );

		@ targetCr = GetCritter( number );
		if( !valid( targetCr ) ) { return; }
		GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
	}
}
void __sinfsc( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	sinf( player, 0, 0, 0 );
}
void sinf( Critter& player, int param0, int param1, int param2 )
{
	if( player.ParamBase[ ST_MODER ] == 0 )
	{
		player.ParamBase[ ST_MODER ] = 1;
		player.Say( SAY_NETMSG, "|0xFFFF00 Режим паука активирован." );
	}
	else
	{
		player.ParamBase[ ST_MODER ] = 0;
		player.Say( SAY_NETMSG, "|0xFF6060 Режим паука деактивирован." );
	}
	Critter@[] crs;
	GetAllPlayers( crs );
	for( uint i = 0; i < crs.length(); ++i )
	{ player.RunClientScript( "rp_client@__setname", crs[ i ].Id, 0, 0, GetPlayerName( crs[ i ].Id ) + " |0xFFFF0000 " + crs[ i ].Id + "\n", null ); }
}

// ************************************************** Дичь и адовый говнокод **************************************************



// ####################################################################################################
// #                                       Mio Critter Menu ^_^                                       #
// ####################################################################################################

void GM_PANNEL_CRITTER_PLAYER( Critter& player, int crId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.GetAccess() >= ACCESS_MODER )
	{
		Critter@ targetCr = GetCritter( crId );
		if( targetCr is null ) { return; }

		string Str;
		string Invis;

		//if( targetCr.Param[ QST_INVIS ] != 0 ) { Invis = " *"; }
		string Who = "Персонаж";
		if( !targetCr.IsPlayer() ) { Who = "НПЦ"; }
		player.StatBase[ ST_VAR0 ] = targetCr.Id;
		if( targetCr.IsPlayer() )
		{
			string[] ListAccess = { "Игрок", "Терпила", "ГМ", "Админ" };
			string Access = " ["+ListAccess[ targetCr.GetAccess() ]+"]";
			string ID = "ID: "+targetCr.Id;
			string Name = " "+GetPlayerName( targetCr.Id );
			string lvl80 = "Уровень: "+targetCr.Param[ ST_LEVEL ];
			Str = ID +Name +Access +Invis +"\n"+lvl80;
		}
		else
		{
			int AI_type = targetCr.ParamBase[ MERC_TYPE ];
			string AI_string = "Не спавн";
			string[] AI_List = { "Контроль", "Болванка", "Манекен", "Монстр", "Рейдер", "Охрана", "Мутант", "Респавн", "Зерг раш" };
			if( AI_type >= 10 && AI_type <= 18 ) { AI_string = AI_List[ AI_type-10 ]; }
			Str = "PID: "+targetCr.GetProtoId() + "\nAI: "+AI_string + "\nДиалог: "+targetCr.ParamBase[ ST_DIALOG_ID ] + "\nTeam: "+targetCr.ParamBase[ ST_TEAM_ID ];
		}

		string[] List = { "Инвентарь", "Варп прыжок", "РП ситуации", "Параметры", Who };
		MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER", Str );
	}
}

// ================================================== Основное меню ==================================================

void answer_GM_PANNEL_CRITTER_PLAYER( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string Str;
	string Invis;

	//if( targetCr.Param[ QST_INVIS ] != 0 ) { Invis = " *"; }
	if( targetCr.IsPlayer() )
	{
		string[] ListAccess = { "Игрок", "Терпила", "ГМ", "Админ" };
		string Access = " ["+ListAccess[ targetCr.GetAccess() ]+"]";
		string ID = "ID: "+targetCr.Id;
		string Name = " "+GetPlayerName( targetCr.Id );
		string lvl80 = "Уровень: "+targetCr.Param[ ST_LEVEL ];
		Str = ID +Name +Access +Invis +"\n"+lvl80;
	}
	else
	{
		int AI_type = targetCr.ParamBase[ MERC_TYPE ];
		string AI_string = "Не спавн";
		string[] AI_List = { "Контроль", "Болванка", "Манекен", "Монстр", "Рейдер", "Охрана", "Мутант", "Респавн", "Зерг раш" };
		if( AI_type >= 10 && AI_type <= 18 ) { AI_string = AI_List[ AI_type-10 ]; }
		Str = "PID: "+targetCr.GetProtoId() + "\nAI: "+AI_string + "\nДиалог: "+targetCr.ParamBase[ ST_DIALOG_ID ] + "\nTeam: "+targetCr.ParamBase[ ST_TEAM_ID ];
	}

	if( answerI == 0 ) // Меню криттера - Инвентарь.
	{
		player.ShowContainer( targetCr, null, TRANSFER_FAR_CRIT );
	}
	if( answerI == 1 ) // Меню криттера - Варп прыжок.
	{
		WarpPoint( player );
	}
	if( answerI == 2 ) // Меню криттера - РП ситуации.
	{
		string[] List = { "Опыт", "Баллы навыков", "Карма", "Здоровье", "Кнокаут", "Мрак", "Травмы", "Изничтожить", "Исцеление", "Назад" };
		MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_GIFT", "Влияние на ситуацию:" );
	}
	if( answerI == 3 ) // Меню криттера - Параметры.
	{
		string[] List = { "ASPECT", "Навыки", "Поднавыки", "Бонусы", "Особенности", "Образ", "Моды", "Лексема", "Назад" };
		MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_STATS", "Параметры:" );
	}
	if( answerI == 4 ) // Меню криттера - Персонаж/НПЦ.
	{
		if( targetCr.IsPlayer() )
		{
			/*string[] ListX = { "* Ошибка *", "* Душа *", "* Подлизнувший *", "* Выживалец *", "* Скотина *", "* Подопытный *" };
			uint8 Num = 0;
			switch( targetCr.ParamBase[ QST_GAMEMODE ] )
			{
				case GAME_START: Num = 1; break;
				case GAME_ADVENTURE: Num = 2; break;
				case GAME_SURVIVAL: Num = 3; break;
				case GAME_ARCADE: Num = 4; break;
				case GAME_TEST: Num = 5; break;
			}
			string[] List = { "(Х) Активировать", ListX[ Num ], "Назад" };
			MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_MENU", Str );*/
			player.Say( SAY_NETMSG, "В стадии разработки." );
		}
		else
		{
			string[] List = { "Поведение", "Хозяин", "Диалог", "NPC ROLE", "TEAM_ID", "Назад" };
			MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_NPC_STATS", Str );
		}
	}
}

// ================================================== Варп прыжок ==================================================

void WarpPoint( Critter& player )
{
	string[] List = { "Уоллбридж", "Назад" };
	MenuMaker( player, List, "Warp", "Забросить:" );
}

void Warp( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( not valid( targetCr ) ) { return; }
	if( answerI == 1 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	int[][] Pointer = { { 1 },
						{ 0 } };

	Location@ loc = GetLocationByPid( Pointer[ 0 ][ answerI ], 0 );
	if( not valid( loc ) ) { player.Say( SAY_NETMSG, "Локация отсутствует!" ); return; }

	Map@ map = loc.GetMapByIndex( Pointer[ 1 ][ answerI ] );
	if( not valid( map ) )
	{
		player.Say( SAY_NETMSG, "Карта отсутствует!" );
		@map = loc.GetMapByIndex( 0 );
		if( not valid( map ) ) { return; }
	}

	targetCr.TransitToMap( map.Id, 0 );
}

// ================================================== РП ситуации ==================================================

void answer_GM_PANNEL_CRITTER_PLAYER_GIFT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 9 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Опыт", "Баллы навыков", "Карма", "Здоровье" };
	int[] ListX = { ST_EXPERIENCE, ST_UNSPENT_SKILL_POINTS, ST_KARMA, ST_CURRENT_HP };
	if( answerI < List.length() ) { player.ParamBase[ ST_VAR1 ] = ListX[ answerI ]; MenuInputMaker( player, "ask_GM_PANNEL_CRITTER_PLAYER_GIFT_ADD", List[ answerI ] ); }
	if( answerI == 4 ) { MenuInputMaker( player, "answer_CRITTER_KNOCK", "- ОД" ); }
	if( answerI == 5 ) { MenuInputMaker( player, "answer_CRITTER_DARK", "Секунд" ); }
	if( answerI == 6 ) { answer_CRITTER_DAMAGES( player ); }
	if( answerI == 7 ) { answer_CRITTER_DEATH( player ); }
	if( answerI == 8 ) { answer_CRITTER_HEAL( player ); }
}

void ask_GM_PANNEL_CRITTER_PLAYER_GIFT_ADD( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( !valid( targetCr ) ) { return; }

	int parameter = player.Stat[ ST_VAR1 ];

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		targetCr.ParamBase[ parameter ] += number;
		player.Say( SAY_NETMSG, "Изменён параметр "+parameter +" на "+number +" у ID: "+targetCr.Id );
	}
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// -------------------------------------------------- Кнокаут --------------------------------------------------

void answer_CRITTER_KNOCK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( !valid( targetCr ) ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );

		if( !targetCr.IsDead() ) { targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random(0, 1) == 0 ) ), number, targetCr.HexX, targetCr.HexY ); return; }
	}
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// -------------------------------------------------- Мрак --------------------------------------------------

void answer_CRITTER_DARK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( !valid( targetCr ) ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );

		FlushScreen( targetCr, COLOR_BLACK, COLOR_BLACK, number*1000 );
		return;
	}
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// -------------------------------------------------- Травмы --------------------------------------------------

void answer_CRITTER_DAMAGES( Critter& player )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string[] List = { "Травма глаз", "Правая рука", "Левая рука", "Правая нога", "Левая нога" };
	int[] Mode = { targetCr.ParamBase[ DAMAGE_EYE ], targetCr.ParamBase[ DAMAGE_RIGHT_ARM ], targetCr.ParamBase[ DAMAGE_LEFT_ARM ], targetCr.ParamBase[ DAMAGE_RIGHT_LEG ], targetCr.ParamBase[ DAMAGE_LEFT_LEG ] };
	MenuMakerCheck( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_STATS_DAMAGES", "Травмы:", Mode, 0 );
}

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_DAMAGES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 5 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	int[] ListX = { DAMAGE_EYE, DAMAGE_RIGHT_ARM, DAMAGE_LEFT_ARM, DAMAGE_RIGHT_LEG, DAMAGE_LEFT_LEG };
	if( targetCr.ParamBase[ ListX[ answerI ] ] == 0 ) { targetCr.ParamBase[ ListX[ answerI ] ] = 1; } else { targetCr.ParamBase[ ListX[ answerI ] ] = 0; }

	answer_CRITTER_DAMAGES( player );
}

// -------------------------------------------------- Изничтожить --------------------------------------------------

void answer_CRITTER_DEATH( Critter& player )
{
	string[] List = { "Инфаркт", "Вырвать бок", "Разрыв очередью", "Очередью", "Электрошок", "В порошок", "Поделить на два", "В соплю", "На куски", "Поджарить", "Танец огня", "Назад" };
	MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_KILL", "Карать жалкое смертное:" );
}

void answer_GM_PANNEL_CRITTER_PLAYER_KILL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 11 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	killbytype( player, answerI, 0, 0, null, null );
}
void killbytype( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { player.Say( SAY_NETMSG, "Неверный криттер!" ); return; }

	uint16 deadType = 0;
	if( param0 > 0 && param0 < 11 ) { deadType = ANIM2_DEAD_BLOODY_SINGLE - 1 + param0; } else { deadType = ( Random( 0, 1 ) > 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK ); }
	targetCr.ToDead( deadType, null );

	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// -------------------------------------------------- Исцеление --------------------------------------------------

void answer_CRITTER_HEAL( Critter& player )
{
	string[] List = { "Воскресить", "Восполнить ОЗ", "Травмы", "Эффекты рад-яд", "Полное лечение", "Назад" };
	MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_HEAL", "Отыгрывать сына божьего:" );
}

void answer_GM_PANNEL_CRITTER_PLAYER_HEAL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 5 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	CRITTER_HEALX( player, answerI );
}
void CRITTER_HEALX( Critter& player, uint answerI )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	if( answerI == 0 || answerI == 4 )
	{
		targetCr.ParamBase[ ST_CURRENT_HP ] = targetCr.Param[ ST_MAX_LIFE ];
		if( answerI != 4 ) { answer_CRITTER_HEAL( player ); }
	}
	if( answerI == 1 || answerI == 4 )
	{
		if( targetCr.IsDead() )
		{
			targetCr.ToLife();
			targetCr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( Random( 0, 1 ) == 0 ? true : false ), 10, targetCr.HexX, targetCr.HexY );
		}
		if( answerI != 4 ) { answer_CRITTER_HEAL( player ); }
	}
	if( answerI == 2 || answerI == 4 )
	{
		targetCr.DamageBase[ DAMAGE_EYE ] = 0;
		targetCr.DamageBase[ DAMAGE_RIGHT_ARM ] = 0;
		targetCr.DamageBase[ DAMAGE_LEFT_ARM ] = 0;
		targetCr.DamageBase[ DAMAGE_RIGHT_LEG ] = 0;
		targetCr.DamageBase[ DAMAGE_LEFT_LEG ] = 0;
		if( answerI != 4 ) { answer_CRITTER_HEAL( player ); }
	}
	if( answerI == 3 || answerI == 4 )
	{
		targetCr.ParamBase[ ST_POISONING_LEVEL ] = 0;
		targetCr.ParamBase[ ST_RADIATION_LEVEL ] = 0;
		if( answerI != 4 ) { answer_CRITTER_HEAL( player ); }
	}
	answer_CRITTER_HEAL( player );
}

// ================================================== Параметры ==================================================

void answer_GM_PANNEL_CRITTER_PLAYER_STATS( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 8 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	if( answerI == 0 ) // Меню криттера - Параметры - ASPECT.
	{
		answer_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL( player );
	}
	if( answerI == 1 ) // Меню криттера - Параметры - Навыки.
	{
		answer_GM_PANNEL_CRITTER_PLAYER_STATS_SKILLS( player );
	}
	if( answerI == 2 ) // Меню криттера - Параметры - Поднавыки.
	{
		answer_GM_PANNEL_CRITTER_PLAYER_STATS_SKILLS2( player );
	}
	if( answerI == 3 )
	{
		player.ParamBase[ ST_VAR1 ] = PERK_BEGIN;
		player.ParamBase[ ST_VAR2 ] = 0;
		player.ShowScreen( SCREEN_DIALOGBOX, 15, "answer_GM_PANNEL_CRITTER_PLAYER_GIFT_PERK" );
		player.Say( SAY_DIALOGBOX_TEXT, "Выбор перка:" );
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "-Вернуться" );
		for( uint i = 0; i < 10; i++ ) { player.SayMsg( SAY_DIALOGBOX_BUTTON( i+1 ), TEXTMSG_GAME, ( 10000+player.ParamBase[ ST_VAR1 ]+i )*10+1 ); }
		player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "+Далее" );
		player.Say( SAY_DIALOGBOX_BUTTON( 12 ), ":Вывод списка:" );
		player.Say( SAY_DIALOGBOX_BUTTON( 13 ), player.Param[ ST_VAR2 ] == 0 ? "Действие: +++" : "Действие: - - -" );
		player.Say( SAY_DIALOGBOX_BUTTON( 14 ), "Назад" );
	}
	if( answerI == 4 )
	{
		player.ParamBase[ ST_VAR1 ] = TRAIT_BEGIN;
		player.ParamBase[ ST_VAR2 ] = 0;
		player.ShowScreen( SCREEN_DIALOGBOX, 15, "answer_GM_PANNEL_CRITTER_PLAYER_GIFT_TRAIT" );
		player.Say( SAY_DIALOGBOX_TEXT, "Выбор трейта:" );
		player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "-Вернуться" );
		for( uint i = 0; i < 10; i++ ) { player.SayMsg( SAY_DIALOGBOX_BUTTON( i+1 ), TEXTMSG_GAME, ( 10000+player.ParamBase[ ST_VAR1 ]+i )*10+1 ); }
		player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "+Далее" );
		player.Say( SAY_DIALOGBOX_BUTTON( 12 ), ":Вывод списка:" );
		player.Say( SAY_DIALOGBOX_BUTTON( 13 ), player.Param[ ST_VAR2 ] == 0 ? "Действие: +++" : "Действие: - - -" );
		player.Say( SAY_DIALOGBOX_BUTTON( 14 ), "Назад" );
	}
	if( answerI == 5 ) // Меню криттера - Параметры - Образ.
	{
		answer_GM_PANNEL_CRITTER_PLAYER_STATS_PARAM( player );
	}
	if( answerI == 6 ) // Меню криттера - Параметры - Моды.
	{
		answer_GM_PANNEL_MODES( player );
	}
	if( answerI == 7 ) // Меню криттера - Параметры - Лексема.
	{
		player.ShowScreen( SCREEN_SAY, 0, "PlayerLexer" );
		//ShowInputBoxScreen( player, "gm@unsafe_Description#Описание, приметы", 0, INPUTBOX_CLOSE_ON_ENTER );
	}
}

// -------------------------------------------------- ASPECT --------------------------------------------------

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL( Critter& player )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	int AspectBase = 0;
	int Aspect = 0;
	for( uint i = 0; i < 6; i++ ) { Aspect += targetCr.Param[ i ]; AspectBase += targetCr.ParamBase[ i ]; }
	string ASPECT = "ASPECT отклонения (Текущий/Базовый): "+( Aspect-15 )+"/"+( AspectBase-15 );

	string[] List = { "Ловкость", "Сила", "Восприятие", "Выносливость", "Обаяние", "Технократизм", "???" };
	int[] ListX = { ST_AGILITY, ST_STRENGTH, ST_PERCEPTION, ST_TOUGHNESS, ST_CHARISMA, ST_EDUCATION, ST_LUCK };
	MenuMakerCheck( player, List, "answer_SPECIAL_INPUT", ASPECT, ListX, 1 );
}

void answer_SPECIAL_INPUT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 7 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Ловкость", "Сила", "Восприятие", "Выносливость", "Обаяние", "Технократизм", "???" };
	int[] ListX = { ST_AGILITY, ST_STRENGTH, ST_PERCEPTION, ST_TOUGHNESS, ST_CHARISMA, ST_EDUCATION, ST_LUCK };
	player.ParamBase[ ST_VAR1 ] = ListX[ answerI ];
	MenuInputMaker( player, "ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL", List[ answerI ] );
}

// -------------------------------------------------- SKILLS --------------------------------------------------

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_SKILLS( Critter& player )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string[] List = { "Огнестрел", "Энергооружие", "Рукопашня", "Тактическое", "Медицина", "Скрытность", "Наука", "Механика", "Убеждение", "Выживание" };
	int[] ListX = { SK_SMALL_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_THROWING, SK_DOCTOR, SK_SNEAK, SK_SCIENCE, SK_REPAIR, SK_BARTER, SK_OUTDOORSMAN };
	MenuMakerCheck( player, List, "answer_SKILLS_INPUT", "SKILLS:", ListX, 1 );
}

void answer_SKILLS_INPUT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 10 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Огнестрел", "Энергооружие", "Рукопашня", "Тактическое", "Медицина", "Скрытность", "Наука", "Механика", "Убеждение", "Выживание" };
	int[] ListX = { SK_SMALL_GUNS, SK_ENERGY_WEAPONS, SK_UNARMED, SK_THROWING, SK_DOCTOR, SK_SNEAK, SK_SCIENCE, SK_REPAIR, SK_BARTER, SK_OUTDOORSMAN };
	player.ParamBase[ ST_VAR1 ] = ListX[ answerI ];
	MenuInputMaker( player, "ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL", List[ answerI ] );
}

// -------------------------------------------------- SKILLS 2 --------------------------------------------------

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_SKILLS2( Critter& player )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string[] List = { "Тяж. оружие", "Холодное", "Санитар", "Взлом", "Воровство", "Ловушки", "Демагогия", "Азартные игры" };
	int[] ListX = { SK_BIG_GUNS, SK_MELEE_WEAPONS, SK_FIRST_AID, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SPEECH, SK_GAMBLING };
	MenuMakerCheck( player, List, "answer_SKILLS_INPUT2", "SKILLS:", ListX, 1 );
}

void answer_SKILLS_INPUT2( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 8 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Тяж. оружие", "Холодное", "Санитар", "Взлом", "Воровство", "Ловушки", "Демагогия", "Азартные игры" };
	int[] ListX = { SK_BIG_GUNS, SK_MELEE_WEAPONS, SK_FIRST_AID, SK_LOCKPICK, SK_STEAL, SK_TRAPS, SK_SPEECH, SK_GAMBLING };
	player.ParamBase[ ST_VAR1 ] = ListX[ answerI ];
	MenuInputMaker( player, "ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL", List[ answerI ] );
}

// -------------------------------------------------- Бонусы --------------------------------------------------



// -------------------------------------------------- Особенности --------------------------------------------------



// -------------------------------------------------- Образ --------------------------------------------------

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_PARAM( Critter& player )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string[] List = { "Возраст", "Пол" };
	int[] ListX = { ST_AGE, ST_GENDER };
	MenuMakerCheck( player, List, "answer_GM_PARAM_INPUT", "Образ:", ListX, 1 );
}

void answer_GM_PARAM_INPUT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 2 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Возраст", "Пол" };
	int[] ListX = { ST_AGE, ST_GENDER };
	player.ParamBase[ ST_VAR1 ] = ListX[ answerI ];
	MenuInputMaker( player, "ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL", List[ answerI ] );

}

// -------------------------------------------------- ХХХ --------------------------------------------------

void ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	int parameter = player.Stat[ ST_VAR1 ];
	if( !valid( targetCr ) ) { return; }

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		targetCr.ParamBase[ parameter ] = number;
		player.Say( SAY_NETMSG, "Вы изменили параметр " + parameter + " на " + number + " у " + targetCr.Id );
		if( parameter >= 0 && parameter <= 6 ) { answer_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL( player ); }
		if( parameter >= 200 && parameter <= 217 ) { answer_GM_PANNEL_CRITTER_PLAYER_STATS_SKILLS( player ); }
		if( parameter == ST_AGE || parameter == ST_GENDER )
		{
			answer_GM_PANNEL_CRITTER_PLAYER_STATS_PARAM( player );
		}
	}
}

void answer_GM_PANNEL_CRITTER_PLAYER_GIFT_PERK( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 14 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string Farbe = "|FFFFFF ";
	if( answerI == 0 )
	{
		if( player.Param[ ST_VAR1 ] > PERK_BEGIN + 10 ) { player.ParamBase[ ST_VAR1 ] -= 10; } else { player.ParamBase[ ST_VAR1 ] = PERK_BEGIN; }
	}
	else if( answerI == 11 )
	{
		if( player.Param[ ST_VAR1 ] < PERK_END - 10 ) { player.ParamBase[ ST_VAR1 ] += 10; } else { player.ParamBase[ ST_VAR1 ] = PERK_END - 9; }
	}
	else if( answerI == 12 )
	{
		player.Say( SAY_NETMSG, Farbe+"Список перков:" );
		for(uint i = PERK_BEGIN; i < PERK_END+1; i++)
		{
			if( targetCr.Param[ i ] != 0 ) { player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, ( 10000+i )*10+1 ); }
		}
		player.Say( SAY_NETMSG, Farbe+"----------" );
	}
	else if( answerI == 13 )
	{
		if( player.Param[ ST_VAR2 ] == 0 ) { player.ParamBase[ ST_VAR2 ] = 1; } else { player.ParamBase[ ST_VAR2 ] = 0; }
	}

	else if( player.Param[ ST_VAR2 ] == 0 )
	{
		uint perkId = player.Param[ ST_VAR1 ] + answerI-1;
		targetCr.ParamBase[ perkId ] ++;
		player.Say( SAY_NETMSG, Farbe+"Увеличен перк ["+perkId+"] ("+targetCr.Param[perkId]+")"" у игрока "+targetCr.Id );
	}
	else
	{
		uint perkId = player.Param[ ST_VAR1 ] + answerI-1;
		if( targetCr.Param[ perkId ] > 0 )
		{
			targetCr.ParamBase[ perkId ] --;
			player.Say( SAY_NETMSG, Farbe+"Уменьшен перк ["+perkId+"] ("+targetCr.Param[perkId]+")"+" у игрока "+targetCr.Id );
		} else { player.Say( SAY_NETMSG, Farbe+"Перк отсутствует." ); }
	}

	player.ShowScreen( SCREEN_DIALOGBOX, 15, "answer_GM_PANNEL_CRITTER_PLAYER_GIFT_PERK" );
	player.Say( SAY_DIALOGBOX_TEXT, "Выбор перка:" );
	player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "-Назад" );
	for( uint i = 0; i < 10; i++ )
	{
		player.SayMsg( SAY_DIALOGBOX_BUTTON( i+1 ), TEXTMSG_GAME, ( 10000+player.Param[ ST_VAR1 ]+i )*10+1 );
	}
	player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "+Далее" );
	player.Say( SAY_DIALOGBOX_BUTTON( 12 ), ":Вывод списка:" );
	player.Say( SAY_DIALOGBOX_BUTTON( 13 ), player.Param[ ST_VAR2 ] == 0 ? "Действие: +++" : "Действие: - - -" );
	player.Say( SAY_DIALOGBOX_BUTTON( 14 ), "Назад" );
}

void answer_GM_PANNEL_CRITTER_PLAYER_GIFT_TRAIT( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Param[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 14 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string Farbe = "|FFFFFF ";
	if( answerI == 0 )
	{
		if( player.Param[ ST_VAR1 ] > TRAIT_BEGIN + 10 ) { player.ParamBase[ ST_VAR1 ] -= 10; } else { player.ParamBase[ ST_VAR1 ] = TRAIT_BEGIN; }
	}
	else if( answerI == 11 )
	{
		if( player.Param[ ST_VAR1 ] < TRAIT_END - 10 ) { player.ParamBase[ ST_VAR1 ] += 10; } else { player.ParamBase[ ST_VAR1 ] = TRAIT_END - 8; }
	}
	else if( answerI == 12 )
	{
		player.Say( SAY_NETMSG, Farbe+"Список трейтов:" );
		for( uint i = TRAIT_BEGIN; i < TRAIT_END+1; i++ )
		{
			if( targetCr.Param[ i ] != 0 ) { player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, ( 10000+i )*10+1 ); }
		}
		player.Say( SAY_NETMSG, Farbe+"----------" );
	}
	else if( answerI == 13 )
	{
		if( player.Param[ ST_VAR2 ] == 0 ) { player.ParamBase[ ST_VAR2 ] = 1; } else { player.ParamBase[ ST_VAR2 ] = 0; }
	}

	else if( player.Param[ ST_VAR2 ] == 0 )
	{
		uint traitId = player.Param[ ST_VAR1 ] + answerI-1;
		targetCr.ParamBase[ traitId ] = 1;
		player.Say( SAY_NETMSG, Farbe+"Добавлен трейт ["+traitId+"] у игрока "+targetCr.Id );
	}
	else
	{
		uint traitId = player.Param[ ST_VAR1 ] + answerI-1;
		if( targetCr.Param[ traitId ] > 0 )
		{
			targetCr.ParamBase[ traitId ] = 0;
			player.Say( SAY_NETMSG, Farbe+"Удалён трейт ["+traitId+"] у игрока "+targetCr.Id );
		} else { player.Say( SAY_NETMSG, Farbe+"Трейт отсутствует." ); }
	}

	player.ShowScreen( SCREEN_DIALOGBOX, 15, "answer_GM_PANNEL_CRITTER_PLAYER_GIFT_TRAIT" );
	player.Say( SAY_DIALOGBOX_TEXT, "Выбор трейта:" );
	player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "-Назад" );
	for( uint i = 0; i < 10; i++ )
	{
		player.SayMsg( SAY_DIALOGBOX_BUTTON( i+1 ), TEXTMSG_GAME, ( 10000+player.Param[ ST_VAR1 ]+i)*10+1 );
	}
	player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "+Далее" );
	player.Say( SAY_DIALOGBOX_BUTTON( 12 ), ":Вывод списка:" );
	player.Say( SAY_DIALOGBOX_BUTTON( 13 ), player.Param[ ST_VAR2 ] == 0 ? "Действие: +++" : "Действие: - - -" );
	player.Say( SAY_DIALOGBOX_BUTTON( 14 ), "Назад" );
}

// -------------------------------------------------- Моды --------------------------------------------------

void answer_GM_PANNEL_MODES( Critter& player )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	string[] List = { "Неуязвимость", "Несбиваемость", "Непихаемость", "Неворуемость", "Нелутаемость", "Нет травм", "Патроны", "NoPVP", "Нет бега", "Стоять" };
	int[] Mode = { targetCr.ParamBase[ MODE_INVULNERABLE ], targetCr.ModeBase[ MODE_NO_KNOCK ], targetCr.ModeBase[ MODE_NO_PUSH ], targetCr.ModeBase[ MODE_NO_STEAL ], targetCr.ModeBase[ MODE_NO_LOOT ], targetCr.ModeBase[ MODE_NO_LOOSE_LIMBS ], targetCr.ParamBase[ MODE_UNLIMITED_AMMO ], targetCr.ParamBase[ MODE_NO_PVP ], targetCr.ModeBase[ MODE_NO_RUN ], targetCr.ModeBase[ MODE_NO_WALK ] };
	if( targetCr.IsNpc() )
	{
		string[] ListU = { "Не говорит", "Только наличные", "Не торгует", "Забывает врагов", "Нет дом. гекса" };
		uint[] ModeU = { targetCr.ParamBase[ MODE_NO_TALK ], targetCr.ParamBase[ MODE_BARTER_ONLY_CASH ], targetCr.ParamBase[ MODE_NO_BARTER ], targetCr.ParamBase[ MODE_NO_ENEMY_STACK ], targetCr.ParamBase[ MODE_NO_HOME ] };
		for( uint i = 0, l = ListU.length(); i < l; i++ )
		{
			List.resize( List.length() + 1 );
			List[ List.length() - 1 ] = ListU[ i ];
			Mode.resize( Mode.length() + 1 );
			Mode[ Mode.length() - 1 ] = ModeU[ i ];
		}
	}
	MenuMakerCheck( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_STATS_MODES", "Выберите режимы:", Mode, 0 );
}

void answer_GM_PANNEL_CRITTER_PLAYER_STATS_MODES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.ParamBase[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	uint8 Type = 10;
	if( targetCr.IsNpc() ) { Type = 15; }
	if( answerI == Type ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	int[] ListX = { MODE_INVULNERABLE, MODE_NO_KNOCK, MODE_NO_PUSH, MODE_NO_STEAL, MODE_NO_LOOT, MODE_NO_LOOSE_LIMBS, MODE_UNLIMITED_AMMO, MODE_NO_PVP, MODE_NO_RUN, MODE_NO_WALK, MODE_NO_TALK, MODE_BARTER_ONLY_CASH, MODE_NO_BARTER, MODE_NO_ENEMY_STACK, MODE_NO_HOME };
	if( targetCr.ModeBase[ ListX[ answerI ] ] == 0 ) { targetCr.ModeBase[ ListX[ answerI ] ] = 1; } else { targetCr.ModeBase[ ListX[ answerI ] ] = 0; }

	answer_GM_PANNEL_MODES( player );
}

// -------------------------------------------------- Лексема --------------------------------------------------

void PlayerLexer( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	targetCr.SetLexems( answerS );
	player.Say( SAY_NETMSG, "Lexem set" );
}

// ================================================== Персонаж ==================================================

void answer_GM_PANNEL_CRITTER_PLAYER_MENU( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 2 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); }

	if( answerI == 0 ) // Меню криттера - Персонаж - Активировать.
	{
		//player.ShowScreen( SCREEN_SAY, 0, "ask_GM_PANNEL_SELF_CHARLIST_aprove" );
		//player.Say( SAY_SAY_TITLE, "ID на одобрение" );
		null;
	}
	if( answerI == 1 ) // Меню криттера - Персонаж - Игровой режим.
	{
		string[] List = { "Душа", "Подлизнувший", "Выживалец", "Скотина", "Подопытный", "Назад" };
		MenuMaker( player, List, "answer_GM_PANNEL_CRITTER_PLAYER_GAMEMODES", "Выбор игрового режима:" );
	}
}

// -------------------------------------------------- Активировать --------------------------------------------------



// -------------------------------------------------- Игровой режим --------------------------------------------------

void answer_GM_PANNEL_CRITTER_PLAYER_GAMEMODES( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }

	/*targetCr.ParamBase[ QST_GAMEMODE ] = answerI;
	Log_factions( player, targetCr.Id, 0, answerI, null, null );*/
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// ================================================== НПЦ ==================================================

void answer_GM_PANNEL_CRITTER_NPC_STATS( Critter& player, uint answerI, string& answerS ) // Меню криттера - НПЦ.
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( targetCr is null ) { return; }
	if( answerI == 5 ) { GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null ); return; }

	string[] List = { "Поведение", "ID Хозяина", "N Диалога", "NPC_ROLE", "TEAM_ID" };
	string[] AI_List = { "Контроль", "Болванка", "Манекен", "Монстр", "Рейдер", "Охрана", "Мутант", "Респавн", "Зерг раш", "Назад" };
	int[] ListX = { ST_AI_ID, MERC_MASTER_ID, ST_DIALOG_ID, ST_NPC_ROLE, ST_TEAM_ID };

	player.ParamBase[ ST_VAR1 ] = ListX[ answerI ];

	if( answerI == 0 ) // Меню криттера - НПЦ - Поведение.
	{
		string Str;
		int AI_type = targetCr.ParamBase[ MERC_TYPE ];
		string AI_string = "Не спавн";
		if( AI_type >= 10 && AI_type <= 18 ) { AI_string = AI_List[ AI_type-10 ]; }
		Str = "Текущий AI: "+AI_string + " - " +AI_type;
		MenuMaker( player, AI_List, "answer_GM_PANNEL_CRITTER_NPC_AI", Str );
	}
	else if( answerI < List.length() ) { MenuInputMaker( player, "answer_GM_PANNEL_CRITTER_NPC_AI_Type", List[ answerI ] ); }
}

// -------------------------------------------------- Поведение --------------------------------------------------

void answer_GM_PANNEL_CRITTER_NPC_AI( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( !valid( targetCr ) ) { return; }

	targetCr.ParamBase[ MERC_TYPE ] = answerI+10;
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// -------------------------------------------------- НПЦ --------------------------------------------------

void answer_GM_PANNEL_CRITTER_NPC_AI_Type( Critter& player, uint answerI, string& answerS )
{
	Critter@ targetCr = GetCritter( player.Stat[ ST_VAR0 ] );
	if( !valid( targetCr ) ) { return; }

	int parameter = player.Stat[ ST_VAR1 ];

	if( answerS.length() > 0 )
	{
		int number = 0;
		StrToInt( answerS, number );
		targetCr.ParamBase[ parameter ] = number;
		player.Say( SAY_NETMSG, "Вы установили параметр " + parameter + " на " + number + " у ID: " + targetCr.Id );
	}
	GM_PANNEL_CRITTER_PLAYER( player, targetCr.Id, 0, 0, null, null );
}

// ************************************************** Дичь и адовый говнокод **************************************************



// ####################################################################################################
// #                                        Mio Item Menu ^_^                                         #
// ####################################################################################################

void GM_PANNEL_ITEM( Critter& player, int itemId, int param1, int param2, string@ param3, int[] @ param4 )
{
	if( player.GetAccess() >= ACCESS_MODER ) // Меню предмета - Основное меню.
	{
		Item@ item = GetItem( itemId );
		if( item is null ) { return; }

		player.StatBase[ ST_VAR0 ] = itemId;
		string Str = "PID: "+item.GetProtoId() +"\nID: "+itemId;

		string[] List = { "Переменные", "Флаги", "Назначить скрипт" };
		MenuMaker( player, List, "answer_GM_PANNEL_ITEM", Str );
	}
}

// ================================================== Основное меню ==================================================

void answer_GM_PANNEL_ITEM( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) return;

	string Str = "PID: "+item.GetProtoId() +"\nID: "+item.Id;

	if( answerI == 0 ) // Меню предмета - Переменные.
	{
		answer_GM_PANNEL_ITEM_VALS( player );
	}
	if( answerI == 1 ) // Меню предмета - Флаги.
	{
		answer_GM_PANNEL_ITEM_FLAG( player );
	}
	if( answerI == 2 ) // Меню предмета - Назначить скрипт.
	{
		string[] List = { "(Х) Верстак", "Назад" };
		MenuMaker( player, List, "answer_GM_PANNEL_ITEM_SCRIPT", Str );
	}
}

// ================================================== Переменные ==================================================

void answer_GM_PANNEL_ITEM_VALS( Critter& player ) // Меню предмета - Переменные (рекурсия).
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }

	string Str = "PID: "+item.GetProtoId() +"\nID: "+item.Id;

	string[] List = { "Val0 "+item.Val0, "Val1 "+item.Val1, "Val2 "+item.Val2, "Val3 "+item.Val3, "Val4 "+item.Val4, "Val5 "+item.Val5, "Val6 "+item.Val6, "Val7 "+item.Val7, "Val8 "+item.Val8, "Val9 "+item.Val9, "Назад" };
	MenuMaker( player, List, "answer_GM_PANNEL_ITEM_VALS_INPUT", Str );
}
void answer_GM_PANNEL_ITEM_VALS_INPUT( Critter& player, uint answerI, string& answerS ) // Меню предмета - Переменные (ввод).
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }
	if( answerI > 9 ) { GM_PANNEL_ITEM( player, item.Id, 0, 0, null, null ); return; }

	player.ParamBase[ ST_VAR1 ] = answerI;
	MenuInputMaker( player, "ask_GM_PANNEL_ITEM", "Val"+answerI );
}

void ask_GM_PANNEL_ITEM( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }

	string Str = "PID: "+item.GetProtoId() +"\nID: "+item.Id;

	if( answerS.length() > 0 )
	{
		int val_number = player.StatBase[ ST_VAR1 ];
		int number = 0;
		StrToInt( answerS, number );
		switch( val_number )
		{
			case 0: item.Val0 = number; break;
			case 1: item.Val1 = number; break;
			case 2: item.Val2 = number; break;
			case 3: item.Val3 = number; break;
			case 4: item.Val4 = number; break;
			case 5: item.Val5 = number; break;
			case 6: item.Val6 = number; break;
			case 7: item.Val7 = number; break;
			case 8: item.Val8 = number; break;
			case 9: item.Val9 = number; break;
		}
		player.Say( SAY_NETMSG, "Вы изменили val" + val_number + " на " + number + " у предмета " + item.Id );
	}
	answer_GM_PANNEL_ITEM_VALS( player );
}

// ================================================== Флаги ==================================================

void answer_GM_PANNEL_ITEM_FLAG( Critter& player ) // Меню предмета - Флаги (рекурсия).
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }

	string Str = "PID: "+item.GetProtoId() +"\nID: "+item.Id;

	string[] List = { "Подбираемый", "Используемый", "Нет обводки", "Проходимый", "Прострел", "Плоский", "Не блок свет", "Источник света", "Игнор света" };
	bool[] ModeX = { FLAG( item.Flags, ITEM_CAN_PICKUP ), FLAG( item.Flags, ITEM_CAN_USE ), FLAG( item.Flags, ITEM_NO_HIGHLIGHT ), FLAG( item.Flags, ITEM_NO_BLOCK ), FLAG( item.Flags, ITEM_SHOOT_THRU ), FLAG( item.Flags, ITEM_FLAT ), FLAG( item.Flags, ITEM_LIGHT_THRU ), FLAG( item.Flags, ITEM_LIGHT ), FLAG( item.Flags, ITEM_NO_LIGHT_INFLUENCE ) };
	int[] Mode;
	for( uint i = 0, l = List.length(); i < l; i++ )
	{
		Mode.resize( Mode.length() + 1 );
		Mode[ Mode.length() - 1 ] = ModeX[ i ] == true ? 1 : 0;
	}
	MenuMakerCheck( player, List, "answer_GM_PANNEL_ITEM_FLAG_FUNK", Str, Mode, 2 );
}

void answer_GM_PANNEL_ITEM_FLAG_FUNK( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }
	if( answerI == 9 ) { GM_PANNEL_ITEM( player, item.Id, 0, 0, null, null ); return; }

	string logflag;
	int parameter;

	switch( answerI )
	{
		case 0: parameter = ITEM_CAN_PICKUP; logflag = "ITEM_CAN_PICKUP"; break;
		case 1: parameter = ITEM_CAN_USE; logflag = "ITEM_CAN_USE"; break;
		case 2: parameter = ITEM_NO_HIGHLIGHT; logflag = "ITEM_NO_HIGHLIGHT"; break;
		case 3: parameter = ITEM_NO_BLOCK; logflag = "ITEM_NO_BLOCK"; break;
		case 4: parameter = ITEM_SHOOT_THRU; logflag = "ITEM_SHOOT_THRU"; break;
		case 5: parameter = ITEM_FLAT; logflag = "ITEM_FLAT"; break;
		case 6: parameter = ITEM_LIGHT_THRU; logflag = "ITEM_LIGHT_THRU"; break;
		case 7: parameter = ITEM_LIGHT; logflag = "ITEM_LIGHT"; break;
		case 8: parameter = ITEM_NO_LIGHT_INFLUENCE; logflag = "ITEM_NO_LIGHT_INFLUENCE"; break;
	}
	if( FLAG( item.Flags, parameter ) ) { UNSETFLAG( item.Flags, parameter ); } else { SETFLAG( item.Flags, parameter ); }
	item.Update();
	string logmsg = "GM PANEL: Изменил флаг " + logflag + " для предмета " + item.Id;
	//LogGmStuff (player, logmsg);

	answer_GM_PANNEL_ITEM_FLAG( player );
}

// ================================================== Назначить скрипт ==================================================

void answer_GM_PANNEL_ITEM_SCRIPT( Critter& player, uint answerI, string& answerS )
{
	Item@ item = GetItem( player.StatBase[ ST_VAR0 ] );
	if( item is null ) { return; }
	if( answerI == 1 ) { GM_PANNEL_ITEM( player, item.Id, 0, 0, null, null ); return; }

	if( answerI == 0 )
	{
		if( (item.GetProtoId() != 157) && (player.GetAccess() <= ACCESS_MODER) ) { player.Say( SAY_NETMSG, "Не тот прототип." ); return; } 
		else
		{
			//SetWorkbench( player, item.Id, 0, 0 );
			//LogGmStuff (player, "GM PANEL: Выставил предмету " + item.Id + " скрипт верстака.");
		}
	}
}

// ************************************************** Дичь и адовый говнокод **************************************************



void GM_PANNEL_HEX( Critter& player, int hexX, int hexY, int param2, string@ param3, int[] @ param4 )
{
    if( player.GetAccess() >= ACCESS_MODER )
    {
        player.ParamBase[ MERC_LOSE_DIST ] = hexX;
        player.ParamBase[ MERC_MASTER_DIST ] = hexY;
        int type = player.ParamBase[ MERC_DEFEND_MASTER ],
        weapon = player.ParamBase[ MERC_ASSIST_MASTER ],
        AI_type = player.ParamBase[ MERC_TYPE ],
        AI_Team = player.ParamBase[ MERC_CANCEL_ON_ATTACK ],
        HexX = player.ParamBase[ MERC_LOSE_DIST ],
        HexY = player.ParamBase[ MERC_MASTER_DIST ],
        bonus_hp = player.ParamBase[ MERC_CANCEL_TIME ],
        bonus_dmg = player.ParamBase[ MERC_CANCEL_ON_GLOBAL ],
        bonus_skill = player.ParamBase[ MERC_WAIT_FOR_MASTER ];

	string AI_string;

	switch( AI_type )
	{
	case 0:	AI_string = "контроль";break;
	case 1:	AI_string = "болванка";break;
	case 2:	AI_string = "манекен";break;
	case 3:	AI_string = "монстр";break;
	case 4:	AI_string = "рейдер";break;
	case 5:	AI_string = "охрана";break;
	case 6:	AI_string = "мутант";break;
	case 7:	AI_string = "респавн";break;
	case 8:	AI_string = "зерг раш";break;
	default: AI_string = "не спавн";break;
	}

        player.ShowScreen( SCREEN_DIALOGBOX, 2, "answer_GM_PANNEL_HEX" );
        player.Say( SAY_DIALOGBOX_TEXT, "Действия с пустым гексом x " + HexX + " y " + HexY + " , тек тип="+ type +", АИ="+ AI_string + ", hp+=" + bonus_hp + ", dmg+=" + bonus_dmg + ", sk+=" + bonus_skill);
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "повтор спавн" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "создать нпц" );
    }
}


void answer_GM_PANNEL_HEX( Critter& player, uint answerI, string& answerS )
{
        int type = player.ParamBase[ MERC_DEFEND_MASTER ];
        int weapon = player.ParamBase[ MERC_ASSIST_MASTER ];
        int AI_type = player.ParamBase[ MERC_TYPE ];
        int AI_Team = player.ParamBase[ MERC_CANCEL_ON_ATTACK ];
        int hexX = player.ParamBase[ MERC_LOSE_DIST ];
        int hexY = player.ParamBase[ MERC_MASTER_DIST ];
        int bonus_hp = player.ParamBase[ MERC_CANCEL_TIME ];
        int bonus_dmg = player.ParamBase[ MERC_CANCEL_ON_GLOBAL ];
        int bonus_skill = player.ParamBase[ MERC_WAIT_FOR_MASTER ];

	string AI_string;

	switch( AI_type )
	{
	case 0:	AI_string = "контроль";break;
	case 1:	AI_string = "болванка";break;
	case 2:	AI_string = "манекен";break;
	case 3:	AI_string = "монстр";break;
	case 4:	AI_string = "рейдер";break;
	case 5:	AI_string = "охрана";break;
	case 6:	AI_string = "мутант";break;
	case 7:	AI_string = "респавн";break;
	case 8:	AI_string = "зерг раш";break;
	default: AI_string = "не спавн";break;
	}

    if( answerI == 0 )
    {
        Map@ map = player.GetMap();
        GM_SPAWN( player, map, type, weapon, AI_type, AI_Team, hexX, hexY, bonus_hp, bonus_dmg, bonus_skill );
        GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
		//LogGmStuff (player, "GM PANEL: Повторил спавн нпц " + type + " на карте " + player.GetMapId() + " , гексы: " + hexX + " " + hexY);
    }
    if( answerI == 1 )
    {
        string plead;
        player.ShowScreen( SCREEN_DIALOGBOX, 11, "answer_GM_PANNEL_HEX_SPAWN" );
        player.Say( SAY_DIALOGBOX_TEXT, "Выберите тип спавна нпц, АИ=" + AI_string + ", hp+=" + bonus_hp + ", dmg+=" + bonus_dmg + ", sk+=" + bonus_skill );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "АИ = " + AI_type );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "Team = " + AI_Team );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "животные" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "монстры" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "рейдеры" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "мутанты" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "гражданские" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "разное" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "бонус хп" );
        player.Say( SAY_DIALOGBOX_BUTTON( 9 ), "бонус дмг" );
        player.Say( SAY_DIALOGBOX_BUTTON( 10 ), "бонус скил" );
        player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "назад" );
    }
}

void answer_GM_PANNEL_HEX_SPAWN( Critter& player, uint answerI, string& answerS )
{
    int AI_type = player.ParamBase[ MERC_TYPE ],
        AI_Team = player.ParamBase[ MERC_CANCEL_ON_ATTACK ],
        weapon = player.ParamBase[ MERC_ASSIST_MASTER ],
        bonus_hp = player.ParamBase[ MERC_CANCEL_TIME ],
        bonus_dmg = player.ParamBase[ MERC_CANCEL_ON_GLOBAL ],
        bonus_skill = player.ParamBase[ MERC_WAIT_FOR_MASTER ];

	string AI_string;

	switch( AI_type )
	{
	case 0:	AI_string = "контроль";break;
	case 1:	AI_string = "болванка";break;
	case 2:	AI_string = "манекен";break;
	case 3:	AI_string = "монстр";break;
	case 4:	AI_string = "рейдер";break;
	case 5:	AI_string = "охрана";break;
	case 6:	AI_string = "мутант";break;
	case 7:	AI_string = "респавн";break;
	case 8:	AI_string = "зерг раш";break;
	default: AI_string = "не спавн";break;
	}

    if( answerI == 0 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 9, "answer_GM_PANNEL_HEX_SPAWN_AI" );
        player.Say( SAY_DIALOGBOX_TEXT, "АИ, текущее - " + AI_type + " - " + AI_string );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "0 - контроль" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "1 - болванка" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "2 - манекен" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "3 - монстр" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "4 - рейдер" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "5 - охрана" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "6 - мутант" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "7 - респавн" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "8 - зерг раш" );
    }
    if( answerI == 1 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 13, "answer_GM_PANNEL_HEX_SPAWN_TEAM" );
        player.Say( SAY_DIALOGBOX_TEXT, "Team, текущее - " + AI_Team );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "0" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "1" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "2" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "3" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "4" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "5" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "6" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "7" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "8" );
        player.Say( SAY_DIALOGBOX_BUTTON( 9 ), "9" );
        player.Say( SAY_DIALOGBOX_BUTTON( 10 ), "10" );
        player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "11" );
        player.Say( SAY_DIALOGBOX_BUTTON( 12 ), "12" );
    }
    if( answerI == 2 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 14, "answer_GM_PANNEL_HEX_SPAWN_ANIMAL" );
        player.Say( SAY_DIALOGBOX_TEXT, "Выберите вид животного, АИ=" + AI_string + ", hp+=" + bonus_hp + ", dmg+=" + bonus_dmg + ", sk+=" + bonus_skill );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "крыса" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "мантис" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "муравей" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "свинокрыс" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "кротокрыс" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "большой кротокрыс" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "гекко" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "золотой гекко" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "собака" );
        player.Say( SAY_DIALOGBOX_BUTTON( 9 ), "малый скорпион" );
        player.Say( SAY_DIALOGBOX_BUTTON( 10 ), "большой скорпион" );
        player.Say( SAY_DIALOGBOX_BUTTON( 11 ), "брамин" );
        player.Say( SAY_DIALOGBOX_BUTTON( 12 ), "цвет" );
        player.Say( SAY_DIALOGBOX_BUTTON( 13 ), "назад" );
    }
    if( answerI == 3 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 9, "answer_GM_PANNEL_HEX_SPAWN_MONSTER" );
        player.Say( SAY_DIALOGBOX_TEXT, "Выберите вид монстра, АИ=" + AI_string + ", hp+=" + bonus_hp + ", dmg+=" + bonus_dmg + ", sk+=" + bonus_skill );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "чужой" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "малый коготь" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "большой коготь" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "серый коготь" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "огнегекко" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "кентавр" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "летун" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "болотник" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "назад" );
    }
    if( answerI == 4 )
    {
        player.ShowScreen( SCREEN_DIALOGBOX, 11, "answer_GM_PANNEL_HEX_SPAWN_RAIDER" );
        player.Say( SAY_DIALOGBOX_TEXT, "Выберите вид рейдера, АИ=" + AI_string + ", hp+=" + bonus_hp + ", dmg+=" + bonus_dmg + ", sk+=" + bonus_skill );
        player.Say( SAY_DIALOGBOX_BUTTON( 0 ), "кан.+нож" );
        player.Say( SAY_DIALOGBOX_BUTTON( 1 ), "кан.+копье" );
        player.Say( SAY_DIALOGBOX_BUTTON( 2 ), "кан.ж +нож" );
        player.Say( SAY_DIALOGBOX_BUTTON( 3 ), "кан.ж +мяч" );
        player.Say( SAY_DIALOGBOX_BUTTON( 4 ), "рейдер+дубин" );
        player.Say( SAY_DIALOGBOX_BUTTON( 5 ), "рейдер+нож" );
        player.Say( SAY_DIALOGBOX_BUTTON( 6 ), "рейдер+винтов" );
        player.Say( SAY_DIALOGBOX_BUTTON( 7 ), "рейдер+пистолет" );
        player.Say( SAY_DIALOGBOX_BUTTON( 8 ), "рейдерша+пистолет" );
        player.Say( SAY_DIALOGBOX_BUTTON( 9 ), "рейдерша+копье" );
        player.Say( SAY_DIALOGBOX_BUTTON( 10 ), "рейдерша+пп" );
    }
    if( answerI == 5 )
    {
        player.Say( SAY_NETMSG, "Игрок не найден." );
    }
    if( answerI == 6 )
    {
        player.Say( SAY_NETMSG, "Игрок не найден." );
    }
    if( answerI == 7 )
    {
        player.Say( SAY_NETMSG, "Игрок не найден." );
    }
    if( answerI == 8 )
    {
        player.ParamBase[ ST_VAR1 ] = MERC_CANCEL_TIME;
        player.ShowScreen( SCREEN_SAY, 0, "gm@ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "бонус хп" );
    }
    if( answerI == 9 )
    {
        player.ParamBase[ ST_VAR1 ] = MERC_CANCEL_ON_GLOBAL;
        player.ShowScreen( SCREEN_SAY, 0, "gm@ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "бонус дмг" );
    }
    if( answerI == 10 )
    {
        player.ParamBase[ ST_VAR1 ] = MERC_WAIT_FOR_MASTER;
        player.ShowScreen( SCREEN_SAY, 0, "gm@ask_GM_PANNEL_CRITTER_PLAYER_STATS_SPECIAL" );
        player.Say( SAY_SAY_TITLE, "бонус скилл" );
    }
    if( answerI == 11 )
    {
        GM_PANNEL_HEX( player, player.ParamBase[ MERC_LOSE_DIST ], player.ParamBase[ MERC_MASTER_DIST ], 0, null, null );
    }

}

void answer_GM_PANNEL_HEX_SPAWN_AI( Critter& player, uint answerI, string& answerS )
{
        player.ParamBase[ MERC_TYPE ] = answerI;
        GM_PANNEL_HEX( player, player.ParamBase[ MERC_LOSE_DIST ], player.ParamBase[ MERC_MASTER_DIST ], 0, null, null );
}

void answer_GM_PANNEL_HEX_SPAWN_TEAM( Critter& player, uint answerI, string& answerS )
{
        player.ParamBase[ MERC_CANCEL_ON_ATTACK ] = answerI;
        GM_PANNEL_HEX( player, player.ParamBase[ MERC_LOSE_DIST ], player.ParamBase[ MERC_MASTER_DIST ], 0, null, null );
}

void answer_GM_PANNEL_HEX_SPAWN_ANIMAL( Critter& player, uint answerI, string& answerS )
{
    if( answerI >= 0 && answerI <= 12 )
    {
        Map@ map = player.GetMap();
        player.ParamBase[ MERC_DEFEND_MASTER ] = answerI + 610;
        player.ParamBase[ MERC_ASSIST_MASTER ] = 0;

        int hexX = player.ParamBase[ MERC_LOSE_DIST ],
        hexY = player.ParamBase[ MERC_MASTER_DIST ];

	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    else if( answerI == 13 )
	GM_PANNEL_HEX( player, player.ParamBase[ MERC_LOSE_DIST ], player.ParamBase[ MERC_MASTER_DIST ], 0, null, null );
}

void answer_GM_PANNEL_HEX_SPAWN_MONSTER( Critter& player, uint answerI, string& answerS )
{
    if( answerI >= 0 && answerI <= 7 )
    {
        player.ParamBase[ MERC_DEFEND_MASTER ] = answerI + 623;
        player.ParamBase[ MERC_ASSIST_MASTER ] = 0;

	GM_PANNEL_HEX_SPAWN( player );

        int hexX = player.ParamBase[ MERC_LOSE_DIST ],
        hexY = player.ParamBase[ MERC_MASTER_DIST ];

        GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    else if( answerI == 8 )
	GM_PANNEL_HEX( player, player.ParamBase[ MERC_LOSE_DIST ], player.ParamBase[ MERC_MASTER_DIST ], 0, null, null );
}

void answer_GM_PANNEL_HEX_SPAWN_RAIDER( Critter& player, uint answerI, string& answerS )
{
        int hexX = player.ParamBase[ MERC_LOSE_DIST ],
        hexY = player.ParamBase[ MERC_MASTER_DIST ];

    if( answerI == 0 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_KNIFE;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  635;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 1 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_SPEAR;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  635;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 2 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_KNIFE;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  636;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 3 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_ROCK;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  636;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 4 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_CLUB;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  637;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 5 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_KNIFE;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  637;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 6 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_ZIP_GUN;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  637;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 7 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_SPRINGER_RIFLE;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  637;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 8 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_ZIP_GUN;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  638;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 9 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_SPEAR;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  637;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
    if( answerI == 10 )
    {
	player.ParamBase[ MERC_ASSIST_MASTER ] = PID_10MM_SMG;
	player.ParamBase[ MERC_DEFEND_MASTER ] =  638;
	GM_PANNEL_HEX_SPAWN( player );
	GM_PANNEL_HEX( player, hexX + Random( -1, 1 ), hexY + Random( -1, 1 ), 0, null, null );
    }
}

void GM_PANNEL_HEX_SPAWN( Critter& player )
{
        Map@ map = player.GetMap();
        int type = player.ParamBase[ MERC_DEFEND_MASTER ],
            weapon = player.ParamBase[ MERC_ASSIST_MASTER ],
            AI_type = player.ParamBase[ MERC_TYPE ],
            AI_Team = player.ParamBase[ MERC_CANCEL_ON_ATTACK ],
            hexX = player.ParamBase[ MERC_LOSE_DIST ],
            hexY = player.ParamBase[ MERC_MASTER_DIST ],
            bonus_hp = player.ParamBase[ MERC_CANCEL_TIME ],
            bonus_dmg = player.ParamBase[ MERC_CANCEL_ON_GLOBAL ],
            bonus_skill = player.ParamBase[ MERC_WAIT_FOR_MASTER ];

        GM_SPAWN( player, map, type, weapon, AI_type, AI_Team, hexX, hexY, bonus_hp, bonus_dmg, bonus_skill );
}

/*
void GM_teleport_to_next_player( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@[] crs;
    GetAllPlayers( crs );
    if( player.StatBase[ ST_VAR0 ] >= crs.length() )
		{
        player.StatBase[ ST_VAR0 ] = 0;
		player.EraseTimeEvents( 1);
		}
    Critter@ daddy = crs[ player.StatBase[ ST_VAR0 ] ];
    if( not valid( daddy ) )
    {
        player.Say( SAY_NETMSG, "не верный криттер" );
        player.StatBase[ ST_VAR0 ]++;
        return;
    }
    player.StatBase[ ST_VAR0 ]++;
    if( daddy.Id == player.Id )
        return;
    Map@ map = daddy.GetMap();
    if( not valid( map ) )
    {
        player.Say( SAY_NETMSG, "игрок " + GetPlayerName( daddy.Id ) + " на глобале" );
        return;
    }
    else if( map.GetProtoId() == 90 )
    {
        player.Say( SAY_NETMSG, "игрок " + GetPlayerName( daddy.Id ) + " на карте обучения" );
        return;
    }
    else if( map.GetProtoId() == 92 )
    {
        player.Say( SAY_NETMSG, "игрок " + GetPlayerName( daddy.Id ) + " на стартовой карте" );
        return;
    }
	uint[] rates;
	player.GetTimeEvents( 1, null, null, rates );
    for( uint ii = 0; ii < rates.length(); ii++ )
    {
		if( rates[ii] == daddy.Id )
			{
			player.Say( SAY_NETMSG, "игрока " + GetPlayerName( daddy.Id ) + " уже просматривали ранее" );
			return;
			}
    }

    uint8 temp_dir = Random( 0, 5 );
    for( uint i = 0; i < 6; i++ )
    {
        uint16 hexX = daddy.HexX, hexY = daddy.HexY;
        map.MoveHexByDir( hexX, hexY, ( temp_dir + i ) % 6, 1 );
        if( not map.IsHexPassed( hexX, hexY ) ) continue;
        player.TransitToMap( map.Id, hexX, hexY, 0 );
        player.Say( SAY_NETMSG, "вы прыгнули к игроку " + GetPlayerName( daddy.Id ) + " " + daddy.Id );
		Critter@[] critters;
		map.GetCrittersHex( hexX, hexY, 20, FIND_ALL | FIND_ONLY_PLAYERS, critters );
		    for( uint j = 0; j < critters.length(); j++ )
			{
			player.AddTimeEvent("cte_visited", 10*60*__TimeMultiplier, 7, critters[j].Id );
			}
        break;
    }
}

uint cte_visited( Critter& cr, int identifier, uint& rate )
{
        return 0;
}
*/

void GM_SPAWN( Critter& player, Map& map, int type, int weapon, int AI_type, int AI_Team, uint16 hexX, uint16 hexY, int bonus_hp, int bonus_dmg, int bonus_skill )
{
	logger( player, GMLOG, "spawned npc with type " + type + "." );
    Critter@ cr = map.AddNpc( type, hexX, hexY, Random( 0, 5 ), null, null, null );
    if( valid( cr ) )
    {

        cr.StatBase[ ST_AI_ID ] = 207;
        cr.ParamBase[ MERC_TYPE ] = 10;
        cr.ParamBase[ ST_TEAM_ID ] = AI_Team;
        cr.ParamBase[ MERC_MASTER_ID ] = player.Id;

        cr.ModeBase[ MODE_NO_HOME ] = 1;
        cr.ModeBase[ MODE_UNLIMITED_AMMO ] = 1;

        cr.ParamBase[ ST_MAX_LIFE ] = cr.ParamBase[ ST_MAX_LIFE ] + bonus_hp;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = cr.ParamBase[ ST_MELEE_DAMAGE ] + bonus_dmg;
        cr.ParamBase[ SK_SMALL_GUNS ] = cr.ParamBase[ SK_SMALL_GUNS ] + bonus_skill;
        cr.ParamBase[ SK_BIG_GUNS ] = cr.ParamBase[ SK_BIG_GUNS ] + bonus_skill;
        cr.ParamBase[ SK_ENERGY_WEAPONS ] = cr.ParamBase[ SK_ENERGY_WEAPONS ] + bonus_skill;
        cr.ParamBase[ SK_UNARMED ] = cr.ParamBase[ SK_UNARMED ] + bonus_skill;
        cr.ParamBase[ SK_MELEE_WEAPONS ] = cr.ParamBase[ SK_MELEE_WEAPONS ] + bonus_skill;
        cr.ParamBase[ SK_THROWING ] = cr.ParamBase[ SK_THROWING ] + bonus_skill;

        if( weapon > 0 )
            cr.AddItem( weapon, 1 );
    }
    if( AI_type == 0 && valid( player ) )
    {
        GM_MobInit( cr, 1 );
        controlMob( player, cr.Id, 0, 0, null, null );
    }
    else if( AI_type >= 1 && AI_type <= 7 )
    {
        GM_MobInit( cr, AI_type );
    }
    else if( AI_type == 8 )
    {
        GM_MobInit( cr, 3 );
        Critter@[] players;
        if( valid( player ) && valid( cr ) && map.GetCritters( 0, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, players ) > 0 )
        {
            for( uint j = 0, jj = players.length(); j < jj; j++ )
            {
                if( players[ j ].Id != uint( cr.ParamBase[ MERC_MASTER_ID ] ) )
                {
                    AddAttackPlane( cr, 0, players[ j ], __RunOnCombat );
                    cr.AddEnemyInStack( players[ j ].Id );
                }
            }
        }
    }
}

