#include "_defines.fos"
dictionary formulas;

// < import string FormatFormulas(string@ text, bool updateList = true) from "formulas"; >
string FormatFormulas(string@ text, bool updateList = true){
	// We may skip dictionary generation and use previous values if <updateList == false> when needed
	if(formulas is null or updateList){
		formulas.set("FormatFormulas.Status","OK"); // Replacement setup example

		// Server + Client replacements setup
		// formulas.set(<string:Tag>,<string:Replacement>) ...
		float apRegenTime = __ApRegeneration / 1000;
		float apPerSec  = floor((APPOINTS_BASE / apRegenTime) * 10) / 10;
		float passiveApRegen = floor(APREGEN_BASE * 10) / 1000;
		float passiveApRegenPerSec = floor(APREGEN_PER_AGI * 10) / 1000;
		// int fov = getParam_BonusLook;
		formulas.set ("baseap", APPOINTS_BASE );
		formulas.set ("apregentime", apRegenTime );
		formulas.set ("appersec", apPerSec );
		formulas.set ("apcombatruncost", (__RtApCostCritterRun / AP_DIVIDER) );
		formulas.set ("meleedamagebase", MELEE_DAMAGE_BASE);
		// Agility
		formulas.set ("basepassiveap", passiveApRegen);
		formulas.set ("passiveap", passiveApRegenPerSec);
		// Strength
		formulas.set ("carryweightbase", CARRYWEIGHT_BASE );
		formulas.set ("carryweight", CARRYWEIGHT_PER_STR );
		formulas.set ("meleedamage", MELEE_DAMAGE_PER_STR );
		formulas.set ("acprocent", ARMOR_CLASS_PER_STR );
		// Perception
		formulas.set ("basefov", __LookNormal );
		formulas.set ("fov", FIELDOFVIEW_PER_PE );
		formulas.set ("sequence", SEQUENCE_PER_PE );
		// Endurance
		formulas.set ("basehp", HITPOINTS_BASE );
		formulas.set ("hpprocent", HITPOINTS_PER_END );
		formulas.set ("basehr", HEALINGRATE_BASE );
		formulas.set ("healingrate", HEALINGRATE_PER_END );
		formulas.set ("poisonresist", POISON_RESIST_PER_END );
		formulas.set ("radiationresist", RADIATION_RESIST_PER_END );
		// Charisma
		// Technology
		
		// Skills
		
		
		#ifdef __CLIENT
		// Client-only replacements setup
		// formulas.set(<string:Tag>,<float|int|uint|string:Replacement>) ...

		#endif
		#ifdef __SERVER
		// Server-only replacements setup
		// formulas.set(<string:Tag>,<float|int|uint|string:Replacement>) ...

		#endif
	}

	// Now, parse all @tags@ from <text> and replace <tags> with correspondent replacement from <formulas>
	string@[] parts = split(text,"@");
	string svalue;
	float fvalue;
	for(uint pos = 1; pos < parts.length; pos+=2){
		if( formulas.get(parts[pos],svalue) ){
			parts[pos] = svalue;
		}else if( formulas.get(parts[pos],fvalue) ){
			parts[pos] = fvalue;
		}
	}
	return join(parts,"");
}

/*
// Says Formulas replacer is OK on server startup if everything is OK
class Debug{Debug(){
	string test = "Formulas replacer is <@FormatFormulas.Status@>";
	Log(FormatFormulas(test));
}} Debug d;
*/